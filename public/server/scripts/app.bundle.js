!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/scripts/",n(n.s=278)}([function(t,e,n){var r=n(60);t.exports=function(t,e,n){return e in t?r(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e,n){"use strict";n.d(e,"coreModule",function(){return p});var r=n(45),o=n.n(r),i=n(105);n.o(i,"Debug")&&n.d(e,"Debug",function(){return i.Debug}),n.o(i,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return i.EventDispatcher}),n.o(i,"JQuery")&&n.d(e,"JQuery",function(){return i.JQuery}),n.o(i,"Riba")&&n.d(e,"Riba",function(){return i.Riba}),n.o(i,"RibaComponent")&&n.d(e,"RibaComponent",function(){return i.RibaComponent}),n.o(i,"Utils")&&n.d(e,"Utils",function(){return i.Utils}),n.o(i,"View")&&n.d(e,"View",function(){return i.View});var s=n(6);n.d(e,"Debug",function(){return s.a}),n.d(e,"JQuery",function(){return s.b});var a=n(70);n.d(e,"EventDispatcher",function(){return a.EventDispatcher}),n.d(e,"Utils",function(){return a.Utils});n(64);var u=n(68),c=n(145);n.d(e,"RibaComponent",function(){return c.a});var l=n(29),f=(n(65),n(10),n(37));n.d(e,"Riba",function(){return f.a});var h=n(17);n.d(e,"View",function(){return h.a});const p={formatters:o()({},l.d,l.a,l.b,l.e,l.c),binders:Object(u.a)(s.b),services:a}},function(t,e,n){"use strict";n.d(e,"a",function(){return d});var r=n(95),o=n.n(r),i=n(14),s=n.n(i),a=n(5),u=n.n(a),c=n(4),l=n.n(c),f=n(0),h=n.n(f),p=n(6);let d=function(){function t(){u()(this,t)}return l()(t,null,[{key:"getJSON",value:function(t,e){return new s.a((n,r)=>{p.b.getJSON(t,e).done(n).fail((t,e,n)=>{r(t)})})}},{key:"post",value:function(t,e,n){return new s.a((r,o)=>{p.b.post(t,e,null,n).done(r).fail((t,e,n)=>{o(t)})})}},{key:"delete",value:function(t,e,n){return new s.a((r,o)=>p.b.ajax({url:t,type:"DELETE",data:e,dataType:n}).done(r).fail((t,e,n)=>{o(t)}))}},{key:"put",value:function(t,e,n){return new s.a((r,o)=>p.b.ajax({url:t,type:"PUT",data:e,dataType:n}).done(r).fail((t,e,n)=>{o(t)}))}},{key:"get",value:function(t,e,n){return new s.a((r,o)=>{p.b.get(t,e,null,n).done(r).fail((t,e,n)=>{o(t)})})}},{key:"isJson",value:function(t){if(!t)return!1;try{const e=JSON.parse(t);return e instanceof Array||e instanceof Object}catch(t){return!1}}},{key:"isUndefined",value:function(t){return void 0===t}},{key:"isDefined",value:function(e){return!t.isUndefined(e)}},{key:"isObject",value:function(e){return t.isDefined(e)&&"object"==typeof e&&null!==e}},{key:"getString",value:function(t){return null!=t?t.toString():void 0}},{key:"getNumber",value:function(t){return t?o()(t):void 0}},{key:"times",value:function(t,e){for(let n=0;n<t;n++)e()}},{key:"getInputValue",value:function(t){const e=[];if("checkbox"===t.type)return t.checked;if("select-multiple"===t.type){const n=t.options;for(const t in n)if(n.hasOwnProperty(t)){const r=n[t];r.selected&&e.push(r.value)}return e}return t.getAttribute("contenteditable")?t.innerHTML:t.value}},{key:"isFunction",value:function(t){return"function"==typeof t}},{key:"isArray",value:function(t){return"[object Array]"===Object.prototype.toString.call(t)}},{key:"isNumber",value:function(t){return!isNaN(o()(t))&&!isNaN(t-0)}},{key:"isBoolean",value:function(t){return typeof t==typeof!0}},{key:"isString",value:function(t){return this.isDefined(t)&&"string"==typeof t}},{key:"stringHasNumber",value:function(t){return this.isString(t)&&/\d/.test(t)}},{key:"stringHasOnlyNumbers",value:function(t){return/^\d+$/.test(t)}},{key:"stringIsPhoneNumber",value:function(t){return/^[0-9 ()+-]+$/.test(t)}},{key:"justDigits",value:function(e){const n=e.replace(/[^-\d\.]/g,"");return t.isNumber(n)?Number(n):0}},{key:"extend",value:function(t,e,n,r){let o;return o=t?p.b.extend(!0,e||{},n||{},r):p.b.extend(e||{},n||{},r)}},{key:"concat",value:function(t,e,n){return e=this.extend(t,e||{},e||{},n||{})}},{key:"clone",value:function(e,n){return t.isArray(n)?n.slice():t.extend(e,{},n)}},{key:"setRequestHeaderEachRequest",value:function(t,e){p.b.ajaxSetup({beforeSend:n=>{n.setRequestHeader(t,e)}}),this._requestHeadersEachRequest.push({name:t,value:e})}},{key:"xhr",value:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5e3;const n=this.deferred(),r=new XMLHttpRequest;r.onreadystatechange=(()=>{if(4===r.readyState)return 200===r.status?n.resolve(r.responseText):n.reject(new Error("xhr: HTTP code is not 200"))}),r.ontimeout=(()=>n.reject(new Error("xhr: Timeout exceeded"))),r.open("GET",t),r.timeout=e;for(const t of this._requestHeadersEachRequest)r.setRequestHeader(t.name,t.value);return r.send(),n.promise}},{key:"deferred",value:function(){const t={},e=new s.a((e,n)=>{t.resolve=e,t.reject=n});return t.promise=e,t}},{key:"getLocation",value:function(t){if(!t)return window.location;return Object(p.b)(`<a href="${t}"></a>`)[0]}},{key:"getUrl",value:function(e){const n=t.getLocation(e);return n.protocol+"//"+n.host+n.pathname+n.search}},{key:"cleanLink",value:function(t){return t.replace(/#.*/,"")}},{key:"getPort",value:function(e,n){const r=t.getLocation(n),o=void 0!==e?e:r.port,i=r.protocol;return""!==o?Number(o):"http:"===i?80:"https:"===i?443:void 0}},{key:"isAbsoluteUrl",value:function(t){return new RegExp("^(?:[a-z]+:)?//","i").test(t)||t.startsWith("mailto:")||t.startsWith("tel:")||t.startsWith("fax:")}},{key:"getUrlParameter",value:function(t,e){e||(e=window.location.href),t=t.replace(/[\[\]]/g,"\\$&");const n=new RegExp("[?&]"+t+"(=([^&#]*)|&|#|$)").exec(e);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}},{key:"getHash",value:function(e){return t.getLocation(e).hash}},{key:"updateHash",value:function(t){return window.location.hash=t}},{key:"removeHash",value:function(){return history.pushState("",document.title,window.location.pathname+window.location.search)}},{key:"getViewportDimensions",value:function(){const t=Math.max(document.documentElement?document.documentElement.clientWidth:0,window.innerWidth||0);return{h:Math.max(document.documentElement?document.documentElement.clientHeight:0,window.innerHeight||0),w:t}}}]),t}();h()(d,"camelCase",t=>t.replace(/-([a-z])/g,t=>t[1].toUpperCase())),h()(d,"onRoute",t=>{if(t){return t===d.getLocation().pathname}return!1}),h()(d,"onParentRoute",t=>{if(t){return d.getLocation().pathname.startsWith(t)}return!1}),h()(d,"isExternalUrl",t=>{if(d.isAbsoluteUrl(t)){const e=d.getLocation(),n=e.protocol+"//"+e.hostname;let r=!0;return t.startsWith(n)&&(r=!1),r}return!1}),h()(d,"isInternalUrl",t=>!d.isExternalUrl(t)),h()(d,"_requestHeadersEachRequest",[{name:"x-barba",value:"yes"}])},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},function(t,e,n){var r=n(60);function o(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),r(t,o.key,o)}}t.exports=function(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t}},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e,n){"use strict";var r=n(36),o=n(18);n(176),n(14);(()=>{if("function"==typeof window.CustomEvent)return!1;function t(t,e){e=e||{bubbles:!1,cancelable:!1,detail:void 0};const n=document.createEvent("CustomEvent");return n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),n}t.prototype=window.Event.prototype,window.CustomEvent=t})(),n.d(e,"a",function(){return r.a}),n.d(e,"b",function(){return o.a})},function(t,e,n){t.exports=n(168)},function(t,e){var n=t.exports={version:"2.6.3"};"number"==typeof __e&&(__e=n)},function(t,e,n){var r=n(233),o=n(67);function i(e){return t.exports=i=o?r:function(t){return t.__proto__||r(t)},i(e)}t.exports=i},function(t,e,n){"use strict";n.d(e,"b",function(){return i}),n.d(e,"a",function(){return s}),n.d(e,"f",function(){return f}),n.d(e,"e",function(){return h}),n.d(e,"d",function(){return p}),n.d(e,"c",function(){return d});var r=n(2),o=n(17);const i=0,s=1,a=0,u=1,c=/^'.*'$|^".*"$/,l=/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g;function f(t){let e=i,n=t;return void 0===t?{type:e,value:void 0}:(c.test(t)?n=t.slice(1,-1):"true"===t?n=!0:"false"===t?n=!1:"null"===t?n=null:"undefined"===t?n=void 0:""===t?n=void 0:isNaN(Number(t))?r.a.isJson(t)?n=JSON.parse(t):e=s:n=Number(t),{type:e,value:n})}function h(t,e){let n=null;const r=t.length;let o=0,i=0;const s=e[0],c=e[1];for(;i<r;){if((o=t.indexOf(s,i))<0){n&&n.push({type:a,value:t.slice(i)});break}{if(n=n||[],o>0&&i<o&&n.push({type:a,value:t.slice(i,o)}),i=o+s.length,(o=t.indexOf(c,i))<0){const e=t.slice(i-c.length),r=n[n.length-1];r&&r.type===a?r.value+=e:n.push({type:a,value:e});break}const e=t.slice(i,o).trim();n.push({type:u,value:e}),i=o+c.length}}return n}function p(t,e,n){let r=!1;if(3===(e=e).nodeType){let i=null;if(e.data&&(i=h(e.data,n)),i&&i.length){for(let n=0;n<i.length;n++){const r=i[n],s=document.createTextNode(r.value);e.parentNode&&e.parentNode.insertBefore(s,e),1===r.type&&t.buildBinding(s,null,r.value,o.a.textBinder,null)}e.parentNode&&e.parentNode.removeChild(e)}r=!0}else 1===e.nodeType&&(r=t.traverse(e));if(!r&&e.childNodes)for(let r=0;r<e.childNodes.length;r++)p(t,e.childNodes[r],n)}function d(t){const e=t.match(l);if(null===e)throw new Error("[View] No matches");const n=e.map(t=>t.trim());return{keypath:n.shift()||void 0,pipes:n}}},function(t,e,n){var r=n(226),o=n(3);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?o(t):e}},function(t,e,n){t.exports=n(174)},function(t,e,n){var r=n(24),o=n(239);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=r(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&o(t,e)}},function(t,e,n){t.exports=n(198)},function(t,e,n){var r=n(16),o=n(8),i=n(39),s=n(30),a=n(27),u=function(t,e,n){var c,l,f,h=t&u.F,p=t&u.G,d=t&u.S,g=t&u.P,m=t&u.B,v=t&u.W,y=p?o:o[e]||(o[e]={}),b=y.prototype,w=p?r:d?r[e]:(r[e]||{}).prototype;for(c in p&&(n=e),n)(l=!h&&w&&void 0!==w[c])&&a(y,c)||(f=l?w[c]:n[c],y[c]=p&&"function"!=typeof w[c]?n[c]:m&&l?i(f,r):v&&w[c]==f?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(f):g&&"function"==typeof f?i(Function.call,f):f,g&&((y.virtual||(y.virtual={}))[c]=f,t&u.R&&b&&!b[c]&&s(b,c,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e,n){"use strict";n.d(e,"a",function(){return b});var r=n(7),o=n.n(r),i=n(71),s=n.n(i),a=n(5),u=n.n(a),c=n(4),l=n.n(c),f=n(0),h=n.n(f),p=n(37),d=n(65),g=n(28),m=n(66),v=n(10),y=n(36);let b=function(){function t(e,n,r){u()(this,t),h()(this,"els",void 0),h()(this,"models",void 0),h()(this,"options",void 0),h()(this,"bindings",[]),h()(this,"webComponents",[]),e instanceof Array?this.els=e:this.els=[e],this.models=n,this.options=r,this.build()}return l()(t,null,[{key:"create",value:function(e,n,r){const o=e.el.cloneNode(!0),i=new t(o,n,e.view.options);return i.bind(),e&&e.marker&&null!==e.marker.parentNode?e.marker.parentNode.insertBefore(o,r):this.debug("[View] Warn: No parent node for binding!"),i}}]),l()(t,[{key:"buildBinding",value:function(t,e,n,r,o){const i=Object(v.c)(n),s=i.keypath,a=i.pipes;this.bindings.push(new d.a(this,t,e,s,r,a,o))}},{key:"build",value:function(){this.bindings=[];const e=this.els;let n,r;for(n=0,r=e.length;n<r;n++){if(!this.options.templateDelimiters)throw new Error("templateDelimiters required");Object(v.d)(this,e[n],this.options.templateDelimiters)}this.bindings.sort(t.bindingComparator)}},{key:"traverse",value:function(e){let n;if(!(n=this.options.fullPrefix?this.options.fullPrefix:this.options.prefix+"-"))throw new Error("prefix is required");let r="SCRIPT"===e.nodeName||"STYLE"===e.nodeName||"TEMPLATE"===e.nodeName;const o=e.attributes,i=[],s=this.options.starBinders;if(this.options.binders){for(let t=0,r=o.length;t<r;t++){let r=null,a=null,u=null;const c=o[t];if(0===c.name.indexOf(n)){if(r=c.name.slice(n.length),this.options.binders.hasOwnProperty(r)&&(a=this.options.binders[r]),null===a)for(let t=0;t<s.length;t++){if(u=s[t],new RegExp(`^${u.replace(/\*/g,".+")}$`).test(r)){a=this.options.binders[u];break}}if(null===a&&(this.options.binders.hasOwnProperty("*")?(a=this.options.binders["*"],u="*"):a=p.a.fallbackBinder),a.block)return this.buildBinding(e,r,c.value,a,u),this.options.removeBinderAttributes&&e.removeAttribute(c.name),!0;i.push({attr:c,binder:a,nodeName:r,identifier:u})}}for(let t=0;t<i.length;t++){const n=i[t];this.buildBinding(e,n.nodeName,n.attr.value,n.binder,n.identifier),this.options.removeBinderAttributes&&e.removeAttribute(n.attr.name)}}if(!r){const n=e.nodeName.toLowerCase();if(this.options.components&&this.options.components[n]&&!e._bound){const o=g.a.type(this.options.components[n]);if("classic"===o&&(this.bindings.push(new m.a(this,e,n)),t.debug(`Stop parsing on (deprecated) component ${n}`)),"webcomponent"===o){const r=this.options.components[n];if(window.customElements)if(t.debug(`Define Webcomponent ${n} with customElements.define`),customElements.get(n)||e.constructor!==HTMLElement&&e.constructor!==HTMLUnknownElement)t.debug("Web component already defined",e.constructor);else try{customElements.define(n,r),customElements.get(n).context={fallback:!1,view:this}}catch(t){console.error(t);const n=new r(e,{fallback:!0,view:this});this.webComponents.push(n)}else{t.debug(`Fallback for Webcomponent ${n}`);const o=new r(e,{fallback:!0,view:this});this.webComponents.push(o)}}r=!0}}return r}},{key:"bind",value:function(){this.bindings.forEach(t=>{t.bind()})}},{key:"unbind",value:function(){s()(this.bindings)&&(this.bindings.forEach(t=>{t.unbind()}),this.webComponents.forEach(t=>{t.disconnectedFallbackCallback()}))}},{key:"sync",value:function(){this.bindings.forEach(t=>{t.sync&&t.sync()})}},{key:"publish",value:function(){this.bindings.forEach(t=>{t.binder&&t.publish&&t.binder.publishes&&t.publish()})}},{key:"update",value:function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o()(t).forEach(e=>{this.models[e]=t[e]}),this.bindings.forEach(e=>{e.update&&e.update(t)})}}]),t}();h()(b,"debug",Object(y.a)("riba:view")),h()(b,"DECLARATION_SPLIT",/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g),h()(b,"textBinder",{routine:(t,e)=>{t.data=null!=e?e:""}}),h()(b,"bindingComparator",(t,e)=>{const n=t.binder&&t.binder.priority||0;return(e.binder&&e.binder.priority||0)-n})},function(t,e,n){"use strict";var r=n(146),o=n.n(r),i=n(23),s=n.n(i),a=n(12),u=n.n(a);n.d(e,"a",function(){return c});const c=(t=>{t.attrFn=t.attrFn||{};let e="ontouchstart"in window,n={tap_pixel_range:5,swipe_h_threshold:50,swipe_v_threshold:50,taphold_threshold:750,doubletap_int:500,shake_threshold:15,touch_capable:e,orientation_support:"orientation"in window&&"onorientationchange"in window,startevent:e?"touchstart":"mousedown",endevent:e?"touchend":"mouseup",moveevent:e?"touchmove":"mousemove",tapevent:e?"tap":"click",scrollevent:e?"touchmove":"scroll",hold_timer:void 0,tap_timer:void 0};t.touch={},t.isTouchCapable=function(){return n.touch_capable},t.getStartEvent=function(){return n.startevent},t.getEndEvent=function(){return n.endevent},t.getMoveEvent=function(){return n.moveevent},t.getTapEvent=function(){return n.tapevent},t.getScrollEvent=function(){return n.scrollevent},t.touch.setSwipeThresholdX=function(t){if("number"!=typeof t)throw new Error("Threshold parameter must be a type of number");n.swipe_h_threshold=t},t.touch.setSwipeThresholdY=function(t){if("number"!=typeof t)throw new Error("Threshold parameter must be a type of number");n.swipe_v_threshold=t},t.touch.setDoubleTapInt=function(t){if("number"!=typeof t)throw new Error("Interval parameter must be a type of number");n.doubletap_int=t},t.touch.setTapHoldThreshold=function(t){if("number"!=typeof t)throw new Error("Threshold parameter must be a type of number");n.taphold_threshold=t},t.touch.setTapRange=function(t){if("number"!=typeof t)throw new Error("Ranger parameter must be a type of number");n.tap_pixel_range=t},t.each(["tapstart","tapend","tapmove","tap","singletap","doubletap","taphold","swipe","swipeup","swiperight","swipedown","swipeleft","swipeend","scrollstart","scrollend","orientationchange","tap2","taphold2"],function(e,n){t.fn[n]=function(t){return t?this.on(n,t):this.trigger(n)},t.attrFn[n]=!0}),t.event.special.tapstart={setup:function(){var e=this,r=t(e);r.on(n.startevent,function t(o){if(r.data("callee",t),o.which&&1!==o.which)return!1;var i=o.originalEvent,s={position:{x:n.touch_capable?i.touches[0].pageX:o.pageX,y:n.touch_capable?i.touches[0].pageY:o.pageY},offset:{x:n.touch_capable?Math.round(i.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(o.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(i.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(o.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:o.target};return b(e,"tapstart",o,s),!0})},remove:function(){t(this).off(n.startevent,t(this).data.callee)}},t.event.special.tapmove={setup:function(){var e=this,r=t(e);r.on(n.moveevent,function t(o){r.data("callee",t);var i=o.originalEvent,s={position:{x:n.touch_capable?i.touches[0].pageX:o.pageX,y:n.touch_capable?i.touches[0].pageY:o.pageY},offset:{x:n.touch_capable?Math.round(i.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(o.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(i.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(o.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:o.target};return b(e,"tapmove",o,s),!0})},remove:function(){t(this).off(n.moveevent,t(this).data.callee)}},t.event.special.tapend={setup:function(){var e=this,r=t(e);r.on(n.endevent,function t(o){r.data("callee",t);var i=o.originalEvent,s={position:{x:n.touch_capable?i.changedTouches[0].pageX:o.pageX,y:n.touch_capable?i.changedTouches[0].pageY:o.pageY},offset:{x:n.touch_capable?Math.round(i.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(o.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(i.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(o.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:o.target};return b(e,"tapend",o,s),!0})},remove:function(){t(this).off(n.endevent,t(this).data.callee)}},t.event.special.taphold={setup:function(){var e,r=this,o=t(r),i={x:0,y:0},a=0,c=0;o.on(n.startevent,function t(l){if(l.which&&1!==l.which)return!1;o.data("tapheld",!1),e=l.target;var f=l.originalEvent,h=u()();n.touch_capable?f.touches[0].pageX:l.pageX,n.touch_capable?f.touches[0].pageY:l.pageY,n.touch_capable?(f.touches[0].pageX,f.touches[0].target.offsetLeft):l.offsetX,n.touch_capable?(f.touches[0].pageY,f.touches[0].target.offsetTop):l.offsetY,i.x=l.originalEvent.targetTouches?l.originalEvent.targetTouches[0].pageX:l.pageX,i.y=l.originalEvent.targetTouches?l.originalEvent.targetTouches[0].pageY:l.pageY,a=i.x,c=i.y;var p=o.parent().data("threshold")?o.parent().data("threshold"):o.data("threshold"),d=void 0!==p&&!1!==p&&s()(p)?s()(p):n.taphold_threshold;return n.hold_timer=window.setTimeout(function(){var s=i.x-a,p=i.y-c;if(l.target==e&&(i.x==a&&i.y==c||s>=-n.tap_pixel_range&&s<=n.tap_pixel_range&&p>=-n.tap_pixel_range&&p<=n.tap_pixel_range)){o.data("tapheld",!0);for(var d=u()()-h,g=l.originalEvent.targetTouches?l.originalEvent.targetTouches:[l],m=[],v=0;v<g.length;v++){var y={position:{x:n.touch_capable?f.changedTouches[v].pageX:l.pageX,y:n.touch_capable?f.changedTouches[v].pageY:l.pageY},offset:{x:n.touch_capable?Math.round(f.changedTouches[v].pageX-(o.offset()?o.offset().left:0)):Math.round(l.pageX-(o.offset()?o.offset().left:0)),y:n.touch_capable?Math.round(f.changedTouches[v].pageY-(o.offset()?o.offset().top:0)):Math.round(l.pageY-(o.offset()?o.offset().top:0))},time:u()(),target:l.target,duration:d};m.push(y)}var w=2==g.length?"taphold2":"taphold";o.data("callee1",t),b(r,w,l,m)}},d),!0}).on(n.endevent,function t(){o.data("callee2",t),o.data("tapheld",!1),window.clearTimeout(n.hold_timer)}).on(n.moveevent,function t(e){o.data("callee3",t),a=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageX:e.pageX,c=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageY:e.pageY})},remove:function(){t(this).off(n.startevent,t(this).data.callee1).off(n.endevent,t(this).data.callee2).off(n.moveevent,t(this).data.callee3)}},t.event.special.doubletap={setup:function(){var e,r,o=this,i=t(o),s=null,a=!1;i.on(n.startevent,function e(o){return!(o.which&&1!==o.which||(i.data("doubletapped",!1),o.target,i.data("callee1",e),r=o.originalEvent,s||(s={position:{x:n.touch_capable?r.touches[0].pageX:o.pageX,y:n.touch_capable?r.touches[0].pageY:o.pageY},offset:{x:n.touch_capable?Math.round(r.changedTouches[0].pageX-(i.offset()?i.offset().left:0)):Math.round(o.pageX-(i.offset()?i.offset().left:0)),y:n.touch_capable?Math.round(r.changedTouches[0].pageY-(i.offset()?i.offset().top:0)):Math.round(o.pageY-(i.offset()?i.offset().top:0))},time:u()(),target:o.target,element:o.originalEvent.srcElement,index:t(o.target).index()}),0))}).on(n.endevent,function c(l){var f=u()(),h=f-(i.data("lastTouch")||f+1);if(window.clearTimeout(e),i.data("callee2",c),h<n.doubletap_int&&t(l.target).index()==s.index&&h>100){i.data("doubletapped",!0),window.clearTimeout(n.tap_timer);var p={position:{x:n.touch_capable?l.originalEvent.changedTouches[0].pageX:l.pageX,y:n.touch_capable?l.originalEvent.changedTouches[0].pageY:l.pageY},offset:{x:n.touch_capable?Math.round(r.changedTouches[0].pageX-(i.offset()?i.offset().left:0)):Math.round(l.pageX-(i.offset()?i.offset().left:0)),y:n.touch_capable?Math.round(r.changedTouches[0].pageY-(i.offset()?i.offset().top:0)):Math.round(l.pageY-(i.offset()?i.offset().top:0))},time:u()(),target:l.target,element:l.originalEvent.srcElement,index:t(l.target).index()},d={firstTap:s,secondTap:p,interval:p.time-s.time};a||(b(o,"doubletap",l,d),s=null),a=!0,window.setTimeout(function(){a=!1},n.doubletap_int)}else i.data("lastTouch",f),e=window.setTimeout(function(){s=null,window.clearTimeout(e)},n.doubletap_int,[l]);i.data("lastTouch",f)})},remove:function(){t(this).off(n.startevent,t(this).data.callee1).off(n.endevent,t(this).data.callee2)}},t.event.special.singletap={setup:function(){var e=this,r=t(e),o=null,i=null,s={x:0,y:0};r.on(n.startevent,function t(e){return!(e.which&&1!==e.which||(i=u()(),o=e.target,r.data("callee1",t),s.x=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageX:e.pageX,s.y=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageY:e.pageY,0))}).on(n.endevent,function t(a){if(r.data("callee2",t),a.target==o){var c=a.originalEvent.changedTouches?a.originalEvent.changedTouches[0].pageX:a.pageX,l=a.originalEvent.changedTouches?a.originalEvent.changedTouches[0].pageY:a.pageY;n.tap_timer=window.setTimeout(function(){var t=s.x-c,o=s.y-l;if(!r.data("doubletapped")&&!r.data("tapheld")&&(s.x==c&&s.y==l||t>=-n.tap_pixel_range&&t<=n.tap_pixel_range&&o>=-n.tap_pixel_range&&o<=n.tap_pixel_range)){var f=a.originalEvent,h={position:{x:n.touch_capable?f.changedTouches[0].pageX:a.pageX,y:n.touch_capable?f.changedTouches[0].pageY:a.pageY},offset:{x:n.touch_capable?Math.round(f.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(a.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(f.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(a.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:a.target};h.time-i<n.taphold_threshold&&b(e,"singletap",a,h)}},n.doubletap_int)}})},remove:function(){t(this).off(n.startevent,t(this).data.callee1).off(n.endevent,t(this).data.callee2)}},t.event.special.tap={setup:function(){var e,r,o=this,i=t(o),s=!1,a=null,c={x:0,y:0};i.on(n.startevent,function t(n){return i.data("callee1",t),!(n.which&&1!==n.which||(s=!0,c.x=n.originalEvent.targetTouches?n.originalEvent.targetTouches[0].pageX:n.pageX,c.y=n.originalEvent.targetTouches?n.originalEvent.targetTouches[0].pageY:n.pageY,e=u()(),a=n.target,r=n.originalEvent.targetTouches?n.originalEvent.targetTouches:[n],0))}).on(n.endevent,function t(l){i.data("callee2",t);var f=l.originalEvent.targetTouches?l.originalEvent.changedTouches[0].pageX:l.pageX,h=l.originalEvent.targetTouches?l.originalEvent.changedTouches[0].pageY:l.pageY,p=c.x-f,d=c.y-h;if(a==l.target&&s&&u()()-e<n.taphold_threshold&&(c.x==f&&c.y==h||p>=-n.tap_pixel_range&&p<=n.tap_pixel_range&&d>=-n.tap_pixel_range&&d<=n.tap_pixel_range)){for(var g=l.originalEvent,m=[],v=0;v<r.length;v++){var y={position:{x:n.touch_capable?g.changedTouches[v].pageX:l.pageX,y:n.touch_capable?g.changedTouches[v].pageY:l.pageY},offset:{x:n.touch_capable?Math.round(g.changedTouches[v].pageX-(i.offset()?i.offset().left:0)):Math.round(l.pageX-(i.offset()?i.offset().left:0)),y:n.touch_capable?Math.round(g.changedTouches[v].pageY-(i.offset()?i.offset().top:0)):Math.round(l.pageY-(i.offset()?i.offset().top:0))},time:u()(),target:l.target};m.push(y)}var w=2==r.length?"tap2":"tap";b(o,w,l,m)}})},remove:function(){t(this).off(n.startevent,t(this).data.callee1).off(n.endevent,t(this).data.callee2)}},t.event.special.swipe={setup:function(){var e,r=t(this),o=!1,i=!1,a={x:0,y:0},c={x:0,y:0};r.on(n.startevent,function i(s){(r=t(s.currentTarget)).data("callee1",i),a.x=s.originalEvent.targetTouches?s.originalEvent.targetTouches[0].pageX:s.pageX,a.y=s.originalEvent.targetTouches?s.originalEvent.targetTouches[0].pageY:s.pageY,c.x=a.x,c.y=a.y,o=!0;var l=s.originalEvent;e={position:{x:n.touch_capable?l.touches[0].pageX:s.pageX,y:n.touch_capable?l.touches[0].pageY:s.pageY},offset:{x:n.touch_capable?Math.round(l.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(s.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(l.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(s.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:s.target}}),r.on(n.moveevent,function l(f){var h;(r=t(f.currentTarget)).data("callee2",l),c.x=f.originalEvent.targetTouches?f.originalEvent.targetTouches[0].pageX:f.pageX,c.y=f.originalEvent.targetTouches?f.originalEvent.targetTouches[0].pageY:f.pageY;var p=r.parent().data("xthreshold")?r.parent().data("xthreshold"):r.data("xthreshold"),d=r.parent().data("ythreshold")?r.parent().data("ythreshold"):r.data("ythreshold"),g=void 0!==p&&!1!==p&&s()(p)?s()(p):n.swipe_h_threshold,m=void 0!==d&&!1!==d&&s()(d)?s()(d):n.swipe_v_threshold;if(a.y>c.y&&a.y-c.y>m&&(h="swipeup"),a.x<c.x&&c.x-a.x>g&&(h="swiperight"),a.y<c.y&&c.y-a.y>m&&(h="swipedown"),a.x>c.x&&a.x-c.x>g&&(h="swipeleft"),null!=h&&o){a.x=0,a.y=0,c.x=0,c.y=0,o=!1;var v=f.originalEvent,y={position:{x:n.touch_capable?v.touches[0].pageX:f.pageX,y:n.touch_capable?v.touches[0].pageY:f.pageY},offset:{x:n.touch_capable?Math.round(v.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(f.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(v.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(f.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:f.target},b=Math.abs(e.position.x-y.position.x),w=Math.abs(e.position.y-y.position.y),C={startEvnt:e,endEvnt:y,direction:h.replace("swipe",""),xAmount:b,yAmount:w,duration:y.time-e.time};i=!0,r.trigger("swipe",C).trigger(h,C)}}),r.on(n.endevent,function a(c){var l="";if((r=t(c.currentTarget)).data("callee3",a),i){var f=r.data("xthreshold"),h=r.data("ythreshold"),p=void 0!==f&&!1!==f&&s()(f)?s()(f):n.swipe_h_threshold,d=void 0!==h&&!1!==h&&s()(h)?s()(h):n.swipe_v_threshold,g=c.originalEvent,m={position:{x:n.touch_capable?g.changedTouches[0].pageX:c.pageX,y:n.touch_capable?g.changedTouches[0].pageY:c.pageY},offset:{x:n.touch_capable?Math.round(g.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(c.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(g.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(c.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:c.target};e.position.y>m.position.y&&e.position.y-m.position.y>d&&(l="swipeup"),e.position.x<m.position.x&&m.position.x-e.position.x>p&&(l="swiperight"),e.position.y<m.position.y&&m.position.y-e.position.y>d&&(l="swipedown"),e.position.x>m.position.x&&e.position.x-m.position.x>p&&(l="swipeleft");var v=Math.abs(e.position.x-m.position.x),y=Math.abs(e.position.y-m.position.y),b={startEvnt:e,endEvnt:m,direction:l.replace("swipe",""),xAmount:v,yAmount:y,duration:m.time-e.time};r.trigger("swipeend",b)}o=!1,i=!1})},remove:function(){t(this).off(n.startevent,t(this).data.callee1).off(n.moveevent,t(this).data.callee2).off(n.endevent,t(this).data.callee3)}},t.event.special.scrollstart={setup:function(){var e,r,o=this,i=t(o);function s(t,n){b(o,(e=n)?"scrollstart":"scrollend",t)}i.on(n.scrollevent,function t(n){i.data("callee",t),e||s(n,!0),clearTimeout(r),r=setTimeout(function(){s(n,!1)},50)})},remove:function(){t(this).off(n.scrollevent,t(this).data.callee)}};var r,o,i,a,c=t(window),l={0:!0,180:!0};if(n.orientation_support){var f=window.innerWidth||c.width(),h=window.innerHeight||c.height();i=f>h&&f-h>50,a=l[window.orientation],(i&&a||!i&&!a)&&(l={"-90":!0,90:!0})}function p(){var t=r();t!==o&&(o=t,c.trigger("orientationchange"))}t.event.special.orientationchange={setup:function(){return!n.orientation_support&&(o=r(),c.on("throttledresize",p),!0)},teardown:function(){return!n.orientation_support&&(c.off("throttledresize",p),!0)},add:function(t){var e=t.handler;t.handler=function(t){return t.orientation=r(),e.apply(this,arguments)}}},t.event.special.orientationchange.orientation=r=function(){var t=document.documentElement;return(n.orientation_support?l[window.orientation]:t&&t.clientWidth/t.clientHeight<1.1)?"portrait":"landscape"},t.event.special.throttledresize={setup:function(){t(this).on("resize",v)},teardown:function(){t(this).off("resize",v)}};var d,g,m,v=function(){g=u()(),(m=g-y)>=250?(y=g,t(this).trigger("throttledresize")):(d&&window.clearTimeout(d),d=window.setTimeout(p,250-m))},y=0;function b(e,n,r,o){var i=r.type;r.type=n,t.event.dispatch.call(e,r,o),r.type=i}return t.each({scrollend:"scrollstart",swipeup:"swipe",swiperight:"swipe",swipedown:"swipe",swipeleft:"swipe",swipeend:"swipe",tap2:"tap",taphold2:"taphold"},function(e,n){t.event.special[e]={setup:function(){t(this).on(n,t.noop)}}}),t})(o.a)},function(t,e,n){"use strict";n.r(e);var r=n(5),o=n.n(r),i=n(4),s=n.n(i),a=n(0),u=n.n(a),c=n(1);let l=function(){function t(){o()(this,t),u()(this,"data",void 0),this.data={}}return s()(t,[{key:"set",value:function(t,e){return this.data[t]=e}},{key:"get",value:function(t){return this.data[t]}},{key:"reset",value:function(){this.data={}}},{key:"extend",value:function(t){return c.Utils.extend(!1,this,t)}}]),t}();var f=n(11),h=n.n(f),p=n(9),d=n.n(p),g=n(13),m=n.n(g),v=n(3),y=n.n(v);let b=function(){function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"replace";o()(this,t),u()(this,"$oldContainer",void 0),u()(this,"$newContainer",void 0),u()(this,"newContainerLoading",void 0),u()(this,"deferred",void 0),u()(this,"debug",Object(c.Debug)("barba:BaseTransition")),u()(this,"action",void 0),this.action=e}return s()(t,[{key:"init",value:function(t,e){const n=this;this.$oldContainer=t,this.deferred=c.Utils.deferred();const r=c.Utils.deferred();return this.newContainerLoading=r.promise,this.start(),e.then(t=>{n.$newContainer=t,r.resolve()}),this.deferred.promise}},{key:"done",value:function(){if(this.debug("done"),!this.$oldContainer)throw new Error("Can't remove old container");if("replace"===this.action&&this.$oldContainer.remove(),!this.$newContainer)throw new Error("Can't show new container");this.$newContainer.css("visibility","visible"),this.deferred.resolve()}}]),t}(),w=function(t){function e(){var t;o()(this,e);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return t=h()(this,d()(e).call(this,...r)),u()(y()(y()(t)),"debug",Object(c.Debug)("rivets:CustomTransition")),t}return m()(e,t),s()(e,[{key:"init",value:function(t,e){const n=this;this.$oldContainer=t,this.debug("init"),this.deferred=c.Utils.deferred();const r=c.Utils.deferred();return this.newContainerLoading=r.promise,this.start(),e.then(t=>{n.$newContainer=t,r.resolve()}),this.deferred.promise}},{key:"start",value:function(){if(this.debug("CustomTransition start"),!this.newContainerLoading)throw new Error("this.newContainerLoading is not set");this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(t){document.body.scrollTop=0,this.debug("CustomTransition finish"),this.done()}}]),e}(b);var C=n(14),x=n.n(C);let E=function(t){function e(){var t;let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"replace",r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return o()(this,e),t=h()(this,d()(e).call(this,n)),u()(y()(y()(t)),"debug",Object(c.Debug)("barba:HideShowTransition")),u()(y()(y()(t)),"action",void 0),u()(y()(y()(t)),"scrollToTop",void 0),t.action=n,t.scrollToTop=r,t.debug("new HideShowTransition",t.action),t}return m()(e,t),s()(e,[{key:"doScrollToTop",value:function(){return this.debug("scrollToTop"),new x.a((t,e)=>{Object(c.JQuery)("html, body").animate({scrollTop:"0px"},{duration:1e3,complete:()=>{this.debug("scrollToTop complete"),t()},fail:()=>{this.debug("scrollToTop fail"),e()}})})}},{key:"start",value:function(){if(this.debug("start"),!this.newContainerLoading)throw new Error("this.newContainerLoading is not set");this.scrollToTop&&this.doScrollToTop().then(()=>{this.debug("scroll then done")}),this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(){this.debug("finish"),this.done()}}]),e}(b),k=function(){function t(){o()(this,t),u()(this,"namespace",void 0),u()(this,"$container",void 0),u()(this,"dispatcher",new c.EventDispatcher)}return s()(t,[{key:"extend",value:function(t){return c.Utils.extend(!1,this,t)}},{key:"init",value:function(){const t=this;this.dispatcher.on("initStateChange",(e,n,r)=>{r&&r.namespace===t.namespace&&t.onLeave()}),this.dispatcher.on("newPageReady",(e,n,r,o,i,s)=>{t.$container=o,n.namespace===t.namespace&&t.onEnter()}),this.dispatcher.on("transitionCompleted",(e,n,r)=>{n.namespace===t.namespace&&t.onEnterCompleted(),r&&r.namespace===t.namespace&&t.onLeaveCompleted()})}}]),t}(),T=function(){function t(){return o()(this,t),u()(this,"history",new Array),t.instance?t.instance:(t.instance=this,t.instance)}return s()(t,[{key:"currentStatus",value:function(){return this.history[this.history.length-1]}},{key:"prevStatus",value:function(){const t=this.history;return t.length<2?null:t[t.length-2]}},{key:"add",value:function(t,e){e||(e=void 0),this.history.push({namespace:e,url:t})}}]),t}();u()(T,"instance",void 0);let D=function(){function t(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"[data-namespace]",r=arguments.length>2?arguments[2]:void 0;o()(this,t),u()(this,"dataNamespace","namespace"),u()(this,"containerSelector",void 0),u()(this,"currentHTML",void 0),u()(this,"_$wrapper",void 0),u()(this,"parseTitle",void 0),u()(this,"debug",Object(c.Debug)("router:Dom")),this._$wrapper=e,this.containerSelector=n,this.parseTitle=r}return s()(t,[{key:"parseResponse",value:function(t){this.currentHTML=t;const e=document.createElement("template");e.innerHTML=t;const n=e.querySelector("title");return n&&n.textContent&&(document.title=n.textContent),this.getContainer(e)}},{key:"getWrapper",value:function(){return this._$wrapper}},{key:"getContainer",value:function(t){if(!t)throw new Error("Barba.js: [getContainer] No element to get container from!");let e;if(!(e=t.jquery?t[0]:t))throw new Error("Barba.js: [getContainer] DOM not ready!");const n=this.parseContainer(e);if(!n)throw new Error("[DOM] No container found");return Object(c.JQuery)(n)}},{key:"getNamespace",value:function(t){if(t&&t.data())return t.data("namespace");throw new Error("[DOM] Missing data-namespace attribute")}},{key:"putContainer",value:function(t){if(this.debug("putContainer",t),t.jquery){(t=t).css("visibility","hidden"),this.getWrapper()[0].appendChild(t[0])}else{(t=t).style.visibility="hidden",this.getWrapper()[0].appendChild(t)}}},{key:"parseContainer",value:function(t){if(!t)throw new Error(`No container with selector "${this.containerSelector}" found!`);let e;if(!(e=t.content?t.content.querySelector(this.containerSelector):t.querySelector(this.containerSelector)))throw new Error(`No container with selector "${this.containerSelector}" found! ${t.tagName}`);return e}}]),t}(),A=function(){function t(){if(o()(this,t),u()(this,"ignoreClassLink","no-barba-prefetch"),u()(this,"debug",Object(c.Debug)("router:Prefetch")),t.instance)return t.instance;t.instance=this}return s()(t,[{key:"init",value:function(){let t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!window.history.pushState)return!1;t&&(document.body.addEventListener("mouseover",this.onLinkEnter.bind(this)),document.body.addEventListener("touchstart",this.onLinkEnter.bind(this)))}},{key:"onLinkEnter",value:function(t,e,n){if(!e){if(!n&&t&&(n=t.target||t.currentTarget),!n)throw new Error("HTML Element not set");for(;n&&!O.getHref(n);)n=n.parentNode;if(!n||n.classList.contains(this.ignoreClassLink))return;e=O.getHref(n)}if(this.debug("onLinkEnter",e),e||console.warn("Url is not defined, you can't cache the link without the url. Please make shure your element has the href attribute or pass the url directly to this function."),e&&O.preventCheck(t,n,e)&&!O.cache.get(e)){const t=c.Utils.xhr(e);O.cache.set(e,t),this.debug("cached",e,t)}else this.debug("not cached",e),e&&(O.cache.get(e)&&this.debug("already cached",O.cache.get(e)),O.preventCheck(t,n,e)||this.debug("preventCheck failed",O.preventCheck(t,n,e)))}}]),t}();u()(A,"instance",void 0);let O=function(){function t(e,n){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"[data-namespace]",i=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:new E,l=arguments.length>6&&void 0!==arguments[6]&&arguments[6];o()(this,t),u()(this,"dom",void 0),u()(this,"history",new T),u()(this,"cacheEnabled",!0),u()(this,"transitionProgress",!1),u()(this,"listenAllLinks",void 0),u()(this,"listenPopstate",void 0),u()(this,"parseTitle",!1),u()(this,"dispatcher",void 0),u()(this,"transition",void 0),u()(this,"$wrapper",void 0),u()(this,"viewId",void 0),t.DEBUG("constructor",e),this.viewId=e;let f=this;return this.dispatcher=new c.EventDispatcher(this.viewId),this.listenAllLinks=i,this.listenPopstate=s,t.instances[this.viewId]&&(f=t.instances[this.viewId]),f.transition=f.transition||a,f.$wrapper=f.$wrapper||n,f.listenAllLinks=c.Utils.isBoolean(f.listenAllLinks)?f.listenAllLinks:i,f.listenPopstate=c.Utils.isBoolean(f.listenPopstate)?f.listenPopstate:s,f.parseTitle=f.parseTitle||l,f.$wrapper&&(f.dom=f.dom||new D(f.$wrapper,r,this.parseTitle),f.$wrapper.attr("aria-live","polite")),t.instances[this.viewId]=f,t.instances[this.viewId]}return s()(t,null,[{key:"getInstance",value:function(e){const n=t.instances[e];if(!n)throw new Error(`No Pjax instance with id ${e} found!`);return n}},{key:"preventCheck",value:function(e,n,r){return!!window.history.pushState&&(!r&&n&&(r=this.getHref(n)),r&&!n&&(n=document.createElement("a")).setAttribute("href",r),t.DEBUG("preventCheck",r,n),!!n&&(!!r&&(!(r.indexOf("#")>-1)&&(c.Utils.cleanLink(r)===c.Utils.cleanLink(location.href)?(t.DEBUG("trying to load the same page"),!1):e&&e.which&&e.which>1||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey?(t.DEBUG("Middle click, cmd click or ctrl click"),!1):n.target&&"_blank"===n.target?(t.DEBUG("_blank target"),!1):window.location.protocol!==n.protocol||window.location.hostname!==n.hostname?(t.DEBUG("not the the same domain"),!1):c.Utils.getPort()!==c.Utils.getPort(n.port)?(t.DEBUG("not the the same port"),!1):n.getAttribute&&"string"==typeof n.getAttribute("download")?(t.DEBUG("download link"),!1):!n.classList.contains(this.ignoreClassLink)))))}},{key:"getHref",value:function(t){if(t){if(t.getAttribute&&"string"==typeof t.getAttribute("xlink:href"))return t.getAttribute("xlink:href")||void 0;if("string"==typeof t.href){let e=t.href;if(e&&c.Utils.isAbsoluteUrl(e)){const t=c.Utils.getLocation(),n=t.protocol+"//"+t.hostname;0===e.indexOf(n)&&(e=e.replace(n,""))}return e}}}}]),s()(t,[{key:"start",value:function(){this.$wrapper?this.init(this.$wrapper,this.listenAllLinks,this.listenPopstate):console.error("Can't init pjax without wrapper")}},{key:"getCurrentUrl",value:function(){return c.Utils.cleanLink(c.Utils.getUrl())}},{key:"goTo",value:function(e){let n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(t.DEBUG("goTo",e,n),n){const t=window.open(e,"_blank");return!!t&&t.focus()}if(0!==e.indexOf("http"))return window.history.pushState(null,"",e),this.onStateChange();this.forceGoTo(e)}},{key:"getTransition",value:function(){return this.transition||new E}},{key:"load",value:function(e){const n=c.Utils.deferred(),r=this;let o;return(o=t.cache.get(e))||(o=c.Utils.xhr(e),t.cache.set(e,o)),o.then(e=>{if(!r.dom)throw new Error("[Pjax] you need to call the start method first!");const o=r.dom.parseResponse(e);r.dom.putContainer(o),r.cacheEnabled||t.cache.reset(),n.resolve(o)},()=>{r.forceGoTo(e),n.reject()}),n.promise}},{key:"bindEvents",value:function(t,e){t&&(console.warn("listenAllLinks"),document.addEventListener("click",this.onLinkClick.bind(this))),e&&window.addEventListener("popstate",this.onStateChange.bind(this))}},{key:"forceGoTo",value:function(t){t instanceof Location&&(window.location=t),"string"==typeof t&&(window.location.href=t)}},{key:"onLinkClick",value:function(e){let n=e.target;for(;n&&!t.getHref(n);)n=n.parentNode;const r=t.getHref(n);if(t.preventCheck(e,n,r)){if(e.stopPropagation(),e.preventDefault(),this.dispatcher.trigger("linkClicked",n,e),!r)throw new Error("href is null");this.goTo(r)}}},{key:"onStateChange",value:function(){const t=this.getCurrentUrl();if(this.transitionProgress&&this.forceGoTo(t),this.history.currentStatus().url===t)return!1;this.history.add(t);const e=this.load(t),n=this.getTransition();if(this.transitionProgress=!0,this.dispatcher.trigger("initStateChange",this.viewId,this.history.currentStatus(),this.history.prevStatus()),!this.dom)throw new Error("[Pjax] you need to call the start method first!");const r=n.init(this.dom.getContainer(document.body),e);e.then(this.onNewContainerLoaded.bind(this)),r.then(this.onTransitionEnd.bind(this))}},{key:"onNewContainerLoaded",value:function(t){const e=this.history.currentStatus();if(!this.dom)throw new Error("[Pjax] you need to call the start method first!");e.namespace=this.dom.getNamespace(t),this.dispatcher.trigger("newPageReady",this.viewId,this.history.currentStatus(),this.history.prevStatus(),t,this.dom.currentHTML,t.data(),!1)}},{key:"onTransitionEnd",value:function(){this.transitionProgress=!1,this.dispatcher.trigger("transitionCompleted",this.viewId,this.history.currentStatus(),this.history.prevStatus())}},{key:"init",value:function(t,e,n){if(!this.dom)throw new Error("[Pjax] you need to call the start method first!");const r=this.dom.getContainer(document.body);this.$wrapper=t,this.history.add(this.getCurrentUrl(),this.dom.getNamespace(r)),this.dispatcher.trigger("initStateChange",this.viewId,this.history.currentStatus()),this.dispatcher.trigger("newPageReady",this.viewId,this.history.currentStatus(),{},r,this.dom.currentHTML,r.data(),!0),this.dispatcher.trigger("transitionCompleted",this.viewId,this.history.currentStatus()),this.bindEvents(e,n)}}]),t}();u()(O,"ignoreClassLink","no-barba"),u()(O,"cache",new l),u()(O,"instances",{}),u()(O,"DEBUG",Object(c.Debug)("router:Pjax")),n.d(e,"BaseCache",function(){return l}),n.d(e,"CustomTransition",function(){return w}),n.d(e,"BaseTransition",function(){return b}),n.d(e,"HideShowTransition",function(){return E}),n.d(e,"BaseView",function(){return k}),n.d(e,"Pjax",function(){return O}),n.d(e,"HistoryManager",function(){return T}),n.d(e,"Dom",function(){return D}),n.d(e,"Prefetch",function(){return A})},function(t,e,n){var r=n(77)("wks"),o=n(50),i=n(16).Symbol,s="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=s&&i[t]||(s?i:o)("Symbol."+t))}).store=r},function(t,e,n){var r=n(22);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){t.exports=n(171)},function(t,e,n){t.exports=n(222)},function(t,e,n){var r=n(21),o=n(96),i=n(74),s=Object.defineProperty;e.f=n(26)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(31)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){"use strict";n.d(e,"a",function(){return l});var r=n(5),o=n.n(r),i=n(4),s=n.n(i),a=n(0),u=n.n(a),c=n(6);let l=function(){function t(e){o()(this,t),u()(this,"components",void 0),u()(this,"debug",Object(c.a)("components:ComponentService")),this.components=e}return s()(t,null,[{key:"type",value:function(t){return t.hasOwnProperty("initialize")&&t.hasOwnProperty("template")?"classic":t.tagName?"webcomponent":void 0}}]),s()(t,[{key:"registWrapper",value:function(t,e){e||(e=t.name);const n=t;return this.components[e]=n,this.components}},{key:"regist",value:function(t,e){if(e||(t.hasOwnProperty("name")&&(e=t.name),"string"==typeof t.tagName&&(e=t.tagName)),this.debug("name",e,t),!e)throw console.error(t),new Error("[ComponentService] name is required");return this.components[e]=t,this.components}},{key:"regists",value:function(t){for(let e in t)if(t.hasOwnProperty(e)){const n=t[e];"string"==typeof n.tagName&&(e=n.tagName),this.regist(n,e)}return this.components}}]),t}()},function(t,e,n){"use strict";const r={and:(t,e)=>t&&e,between:function(t){return t>=(arguments.length<=1?void 0:arguments[1])&&t<=(arguments.length<=2?void 0:arguments[2])},egt:(t,e)=>t>=e,eq:(t,e)=>t===e,gt:(t,e)=>t>e,ne:(t,e)=>t!==e,lt:(t,e)=>t<e,elt:(t,e)=>t<=e,or:(t,e)=>t||e,not:t=>!t};var o=n(2);const i=(t,e)=>0===e?t:i(e,t%e),s={digits:t=>{if(o.a.isNumber(t))return t;const e=t.replace(/[^-\d\.]/g,"");return isNaN(Number(e))?0:Number(e)},dividedBy:(t,e)=>Number(t)/Number(e),even:t=>t%2==0,gcd:i,minus:(t,e)=>Number(t)-Number(e),number:(t,e)=>{const n=o.a.getNumber(t);return e?n||e:n},modulo:(t,e)=>Number(t)%Number(e),plus:(t,e)=>Number(t)+Number(e),random:t=>{if(o.a.isArray(t))return t[Math.floor(Math.random()*t.length)];return null},times:(t,e)=>Number(t)*Number(e),uneven:t=>t%2!=0},a=(t,e)=>o.a.isObject(t)||o.a.isArray(t)?t[e]:o.a.isString(t)&&o.a.isNumber(e)?t.charAt(e):null,u=t=>t&&t.length?t.length:0,c=t=>u(t)<=0,l={parse:t=>{if(o.a.isString(t))return JSON.parse(t);return null},first:t=>a(t,0),last:t=>a(t,t.length-1),contains:(t,e,n)=>{if(o.a.isString(t))return t.indexOf(e)>-1;if(o.a.isArray(t))for(const r in t)if(o.a.isDefined(t[r])&&o.a.isDefined(t[r][e])){if(o.a.isUndefined(n))return!0;if(t[r][e]===n)return!0}if(o.a.isObject(t))for(const r in t)if(t.hasOwnProperty(r)&&r===e){if(o.a.isUndefined(n))return!0;if(t[r][e]===n)return!0}return!1},get:a,set:(t,e,n)=>(n||(n=e),o.a.isObject(t)||o.a.isArray(t)?t[e]=n:t=n,t),match:(t,e,n)=>t.match(new RegExp(e,n)),size:u,empty:c,isLast:(t,e)=>t.length===e+1,range:(t,e,n)=>(e=Number(o.a.isNumber(e)?e:0),(n=Number(o.a.isNumber(n)?n:t.length-1))>t.length-1&&(n=t.length-1),e>n?[]:t.slice(Number(e||0),1+n))};var f=n(36);const h=Object(f.a)("formatter");var p=n(149),d=n.n(p);const g={args:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return(e,r,o,i)=>(n.push(e),n.push(r),n.push(o),n.push(i),t.apply(this,n))},boolean:t=>"true"===t||!0===t,debug:t=>(h(t),t),default:(t,e)=>o.a.isDefined(t)?o.a.isString(t)?t.length>0?t:e:t:e,call:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return t.apply(this,n)},currency:(t,e)=>{let n=t.toFixed(2).toString().replace(".",",");return e&&(n+=e),n},json:function(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=d()(t);return e&&n?n.replace(/'/g,"&#39;"):n}},m=t=>t.toLowerCase(),v=t=>t.trim(),y={append:(t,e)=>t+e,downcase:m,filled:t=>o.a.isString(t)&&!c(t.replace(/\s/g,"")),isString:t=>o.a.isString(t),handleize:t=>(t=(t=v(t)).replace(/[^\w\s]/gi,""),(t=m(t)).replace(/ /g,"-")),pluralize:(t,e,n)=>(null===n&&(n=e+"s"),o.a.isArray(t)&&(t=t.length),1===t?e:n),prepend:(t,e)=>e+t,upcase:t=>t.toUpperCase(),replace:(t,e,n)=>t.replace(new RegExp(e,"g"),n),replace_first:(t,e,n)=>t.replace(e,n),slice:(t,e,n)=>t.slice(e,n),strip:v,strip_html:t=>{const e=document.createElement("DIV");return e.innerHTML=t,e.textContent||e.innerText||""},string:(t,e)=>{if(o.a.isArray(t))for(const e in t)t[e]&&(t[e]=o.a.getString(t[e]));else if(o.a.isObject(t))for(const e in t)t.hasOwnProperty(e)&&(t[e]=o.a.getString(t[e]));else t=o.a.getString(t);return e?t||e:t}};n.d(e,"a",function(){return r}),n.d(e,"b",function(){return s}),n.d(e,"c",function(){return l}),n.d(e,"d",function(){return g}),n.d(e,"e",function(){return y})},function(t,e,n){var r=n(25),o=n(47);t.exports=n(26)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var r=n(159),o=n(48);t.exports=function(t){return r(o(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){function r(t){if(t)return function(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}(t)}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var o=0;o<r.length;o++)if((n=r[o])===e||n.fn===e){r.splice(o,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,e);return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){var r,o=n(259),i=n(139),s=n(260),a=n(261),u=n(262);"undefined"!=typeof ArrayBuffer&&(r=n(263));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),l="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=c||l;e.protocol=3;var h=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},p=o(h),d={type:"error",data:"parser error"},g=n(264);function m(t,e,n){for(var r=new Array(t.length),o=a(t.length,n),i=function(t,n,o){e(n,function(e,n){r[t]=n,o(e,r)})},s=0;s<t.length;s++)i(s,t[s],o)}e.encodePacket=function(t,n,r,o){"function"==typeof n&&(o=n,n=!1),"function"==typeof r&&(o=r,r=null);var i=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&i instanceof ArrayBuffer)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=t.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=h[t.type];for(var a=0;a<i.length;a++)s[a+1]=i[a];return r(s.buffer)}(t,n,o);if(void 0!==g&&i instanceof g)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);if(f)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=new FileReader;return o.onload=function(){e.encodePacket({type:t.type,data:o.result},n,!0,r)},o.readAsArrayBuffer(t.data)}(t,n,r);var o=new Uint8Array(1);o[0]=h[t.type];var i=new g([o.buffer,t.data]);return r(i)}(t,n,o);if(i&&i.base64)return function(t,n){var r="b"+e.packets[t.type]+t.data.data;return n(r)}(t,o);var s=h[t.type];return void 0!==t.data&&(s+=r?u.encode(String(t.data),{strict:!1}):String(t.data)),o(""+s)},e.encodeBase64Packet=function(t,n){var r,o="b"+e.packets[t.type];if(void 0!==g&&t.data instanceof g){var i=new FileReader;return i.onload=function(){var t=i.result.split(",")[1];n(o+t)},i.readAsDataURL(t.data)}try{r=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var s=new Uint8Array(t.data),a=new Array(s.length),u=0;u<s.length;u++)a[u]=s[u];r=String.fromCharCode.apply(null,a)}return o+=btoa(r),n(o)},e.decodePacket=function(t,n,r){if(void 0===t)return d;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(r&&!1===(t=function(t){try{t=u.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return d;var o=t.charAt(0);return Number(o)==o&&p[o]?t.length>1?{type:p[o],data:t.substring(1)}:{type:p[o]}:d}o=new Uint8Array(t)[0];var i=s(t,1);return g&&"blob"===n&&(i=new g([i])),{type:p[o],data:i}},e.decodeBase64Packet=function(t,e){var n=p[t.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:t.substr(1)}};var o=r.decode(t.substr(1));return"blob"===e&&g&&(o=new g([o])),{type:n,data:o}},e.encodePayload=function(t,n,r){"function"==typeof n&&(r=n,n=null);var o=i(t);if(n&&o)return g&&!f?e.encodePayloadAsBlob(t,r):e.encodePayloadAsArrayBuffer(t,r);if(!t.length)return r("0:");m(t,function(t,r){e.encodePacket(t,!!o&&n,!1,function(t){r(null,function(t){return t.length+":"+t}(t))})},function(t,e){return r(e.join(""))})},e.decodePayload=function(t,n,r){if("string"!=typeof t)return e.decodePayloadAsBinary(t,n,r);var o;if("function"==typeof n&&(r=n,n=null),""===t)return r(d,0,1);for(var i,s,a="",u=0,c=t.length;u<c;u++){var l=t.charAt(u);if(":"===l){if(""===a||a!=(i=Number(a)))return r(d,0,1);if(a!=(s=t.substr(u+1,i)).length)return r(d,0,1);if(s.length){if(o=e.decodePacket(s,n,!1),d.type===o.type&&d.data===o.data)return r(d,0,1);if(!1===r(o,u+i,c))return}u+=i,a=""}else a+=l}return""!==a?r(d,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){if(!t.length)return n(new ArrayBuffer(0));m(t,function(t,n){e.encodePacket(t,!0,!0,function(t){return n(null,t)})},function(t,e){var r=e.reduce(function(t,e){var n;return t+(n="string"==typeof e?e.length:e.byteLength).toString().length+n+2},0),o=new Uint8Array(r),i=0;return e.forEach(function(t){var e="string"==typeof t,n=t;if(e){for(var r=new Uint8Array(t.length),s=0;s<t.length;s++)r[s]=t.charCodeAt(s);n=r.buffer}o[i++]=e?0:1;var a=n.byteLength.toString();for(s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(r=new Uint8Array(n),s=0;s<r.length;s++)o[i++]=r[s]}),n(o.buffer)})},e.encodePayloadAsBlob=function(t,n){m(t,function(t,n){e.encodePacket(t,!0,!0,function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var r=new Uint8Array(t.length),o=0;o<t.length;o++)r[o]=t.charCodeAt(o);t=r.buffer,e[0]=0}var i=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),s=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)s[o]=parseInt(i[o]);if(s[i.length]=255,g){var a=new g([e.buffer,s.buffer,t]);n(null,a)}})},function(t,e){return n(new g(e))})},e.decodePayloadAsBinary=function(t,n,r){"function"==typeof n&&(r=n,n=null);for(var o=t,i=[];o.byteLength>0;){for(var a=new Uint8Array(o),u=0===a[0],c="",l=1;255!==a[l];l++){if(c.length>310)return r(d,0,1);c+=a[l]}o=s(o,2+c.length),c=parseInt(c);var f=s(o,0,c);if(u)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(t){var h=new Uint8Array(f);f="";for(l=0;l<h.length;l++)f+=String.fromCharCode(h[l])}i.push(f),o=s(o,c)}var p=i.length;i.forEach(function(t,o){r(e.decodePacket(t,n,!0),o,p)})}},function(t,e,n){"use strict";var r=n(94),o=n.n(r);n.d(e,"a",function(){return o.a});o.a},function(t,e,n){"use strict";var r=n(7),o=n.n(r),i=n(5),s=n.n(i),a=n(4),u=n.n(a),c=n(0),l=n.n(c),f=n(2),h=n(10),p=n(64),d=n(17),g=n(38),m=n(6),v=n(62),y=n(28),b=n(63);let w=function(){function t(e,n,r){s()(this,t),l()(this,"binderService",void 0),l()(this,"componentService",void 0),l()(this,"formatterService",void 0),l()(this,"debug",Object(m.a)("binders:ModulesService")),this.binderService=new v.a(e),this.componentService=new y.a(n),this.formatterService=new b.a(r)}return u()(t,[{key:"regist",value:function(t){t.binders&&this.binderService.regists(t.binders),t.components&&this.componentService.regists(t.components),t.formatters&&this.formatterService.regists(t.formatters)}}]),t}();n.d(e,"a",function(){return E});const C=function(t){const e=t.detail;this.observer.value()!==e.newValue&&this.observer.setValue(e.newValue)},x={bind(t){t.addEventListener("publish-binder-change:"+this.type,C.bind(this))},unbind(t){delete this.customData,this.el.removeEventListener("publish-binder-change",C.bind(this))},routine(t,e){if(!this.type)throw new Error("Can't set attribute of "+this.type);const n=t.getAttribute(this.type);null!=e?n!==e&&t.setAttribute(this.type,e):t.removeAttribute(this.type),n!==e&&t.dispatchEvent(new CustomEvent("binder-changed",{detail:{name:this.type,oldValue:n,newValue:e,namespace:null}}))}};let E=function(){function t(){if(s()(this,t),l()(this,"module",void 0),l()(this,"binders",{}),l()(this,"components",{}),l()(this,"formatters",{}),l()(this,"adapters",{".":p.a}),l()(this,"parseTemplate",h.e),l()(this,"parseType",h.f),l()(this,"templateDelimiters",["{","}"]),l()(this,"rootInterface","."),l()(this,"preloadData",!0),l()(this,"_prefix","rv"),l()(this,"_fullPrefix","rv-"),this.module=new w(this.binders,this.components,this.formatters),t.instance)return t.instance;t.instance=this}return u()(t,[{key:"prefix",set:function(t){this._prefix=t,this._fullPrefix=t+"-"},get:function(){return this._prefix}},{key:"fullPrefix",get:function(){return this._fullPrefix}}],[{key:"handler",value:function(t,e,n,r){this.call(t,e,n.view.models,r)}}]),u()(t,[{key:"configure",value:function(t){t&&o()(t).forEach(e=>{const n=t[e];switch(e){case"binders":this.binders=f.a.concat(!1,this.binders,n);break;case"formatters":this.formatters=f.a.concat(!1,this.formatters,n);break;case"components":this.components=f.a.concat(!1,this.components,n);break;case"adapters":case"adapter":this.adapters=f.a.concat(!1,this.adapters,n);break;case"prefix":this.prefix=n;break;case"parseTemplate":this.parseTemplate=n;break;case"parseType":this.parseType=n;break;case"templateDelimiters":this.templateDelimiters=n;break;case"rootInterface":this.rootInterface=n;break;case"preloadData":this.preloadData=n;break;default:console.warn("Option not supported",e,n)}})}},{key:"init",value:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(e||(e=document.createElement("div")),this.components[t].hasOwnProperty("initialize")&&this.components[t].hasOwnProperty("template")){const r=this.components[t],o=r.template.call(this,e);null!==o&&(e.innerHTML=o);const i=r.initialize.call(this,e,n),s=this.bind(e,i);return s.bind(),s}}},{key:"getViewOptions",value:function(e){const n={adapters:{},binders:{},components:{},formatters:{},starBinders:{},rootInterface:{},removeBinderAttributes:!0,executeFunctions:!1};return e&&(n.binders=f.a.concat(!1,n.binders,e.binders),n.formatters=f.a.concat(!1,n.formatters,e.formatters),n.components=f.a.concat(!1,n.components,e.components),n.adapters=f.a.concat(!1,n.adapters,e.adapters)),n.prefix=e&&e.prefix?e.prefix:this.prefix,n.fullPrefix=n.prefix?n.prefix+"-":this.fullPrefix,n.templateDelimiters=e&&e.templateDelimiters?e.templateDelimiters:this.templateDelimiters,n.rootInterface=e&&e.rootInterface?e.rootInterface:this.rootInterface,n.preloadData=e&&e.preloadData?e.preloadData:this.preloadData,n.handler=e&&e.handler?e.handler:t.handler,n.binders=f.a.concat(!1,this.binders,n.binders),n.formatters=f.a.concat(!1,this.formatters,n.formatters),n.components=f.a.concat(!1,this.components,n.components),n.adapters=f.a.concat(!1,this.adapters,n.adapters),n.binders&&(n.starBinders=o()(n.binders).filter(t=>t.indexOf("*")>=1)),n}},{key:"bind",value:function(t,e,n){const r=this.getViewOptions(n);e=e||new Object(null),g.a.updateOptions(r);const o=new d.a(t,e,r);return o.bind(),o}}]),t}();l()(E,"fallbackBinder",x),l()(E,"instance",void 0)},function(t,e,n){"use strict";n.d(e,"a",function(){return h});var r=n(7),o=n.n(r),i=n(5),s=n.n(i),a=n(4),u=n.n(a),c=n(0),l=n.n(c),f=n(2);let h=function(){function t(e,n,r){s()(this,t),l()(this,"keypath",void 0),l()(this,"callback",void 0),l()(this,"objectPath",void 0),l()(this,"obj",void 0),l()(this,"target",void 0),l()(this,"key",void 0),l()(this,"tokens",void 0),this.keypath=n,this.callback=r,this.objectPath=[];const o=this.parse();this.key=o.key,this.tokens=o.tokens,this.obj=this.getRootObject(e),this.target=this.realize(),f.a.isObject(this.target)&&this.set(!0,this.key,this.target,this.callback)}return u()(t,null,[{key:"updateOptions",value:function(e){if(!e.adapters)throw new Error("adapters are required!");if(!e.rootInterface)throw new Error("rootInterface is required!");t.adapters=e.adapters,t.interfaces=o()(t.adapters),t.rootInterface=e.rootInterface}},{key:"tokenize",value:function(e,n){const r=[];let o,i,s={i:n,path:""};for(o=0;o<e.length;o++)i=e.charAt(o),~t.interfaces.indexOf(i)?(r.push(s),s={i:i,path:""}):s.path+=i;return r.push(s),r}}]),u()(t,[{key:"parse",value:function(){let e,n;if(!t.interfaces||!t.interfaces.length)throw new Error("[Observer] Must define at least one adapter interface.");if(~t.interfaces.indexOf(this.keypath[0])?(n=this.keypath[0],e=this.keypath.substr(1)):(n=t.rootInterface,e=this.keypath),this.tokens=t.tokenize(e,n),!this.tokens.length)throw new Error("[Observer] No tokens");return this.key=this.tokens.pop(),{key:this.key,tokens:this.tokens}}},{key:"realize",value:function(){let t,e,n=this.obj,r=-1;for(let o=0;o<this.tokens.length;o++)e=this.tokens[o],f.a.isObject(n)?(void 0!==this.objectPath[o]?n!==(t=this.objectPath[o])&&(this.set(!1,e,t,this),this.set(!0,e,n,this),this.objectPath[o]=n):(this.set(!0,e,n,this),this.objectPath[o]=n),n=this.get(e,n)):(-1===r&&(r=o),(t=this.objectPath[o])&&this.set(!1,e,t,this));return-1!==r&&this.objectPath.splice(r),n}},{key:"sync",value:function(){let t,e,n;(t=this.realize())!==this.target?(f.a.isObject(this.target)&&this.set(!1,this.key,this.target,this.callback),f.a.isObject(t)&&this.set(!0,this.key,t,this.callback),e=this.value(),this.target=t,((n=this.value())!==e||n instanceof Function)&&this.callback.sync()):t instanceof Array&&this.callback.sync()}},{key:"value",value:function(){if(f.a.isObject(this.target))return this.get(this.key,this.target)}},{key:"setValue",value:function(e){f.a.isObject(this.target)&&t.adapters[this.key.i].set(this.target,this.key.path,e)}},{key:"get",value:function(e,n){return t.adapters[e.i].get(n,e.path)}},{key:"set",value:function(e,n,r,o){e?t.adapters[n.i].observe(r,n.path,o):t.adapters[n.i].unobserve(r,n.path,o)}},{key:"unobserve",value:function(){let t,e;for(let n=0;n<this.tokens.length;n++)e=this.tokens[n],(t=this.objectPath[n])&&this.set(!1,e,t,this);f.a.isObject(this.target)&&this.set(!1,this.key,this.target,this.callback)}},{key:"getRootObject",value:function(t){let e,n;if(!t.$parent)return t;for(e=this.tokens.length?this.tokens[0].path:this.key.path,n=t;n.$parent&&void 0===n[e];)n=n.$parent;return n}}]),t}();l()(h,"adapters",void 0),l()(h,"interfaces",void 0),l()(h,"rootInterface",void 0)},function(t,e,n){var r=n(33);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=!0},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var u,c=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!l){var t=a(h);l=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function g(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||l||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports={}},function(t,e,n){var r=n(61),o=n(160),i=n(7),s=n(0);t.exports=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},a=i(n);"function"==typeof o&&(a=a.concat(o(n).filter(function(t){return r(n,t).enumerable}))),a.forEach(function(e){s(t,e,n[e])})}return t}},function(t,e,n){"use strict";(function(t){for(var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],o=0,i=0;i<r.length;i+=1)if(n&&navigator.userAgent.indexOf(r[i])>=0){o=1;break}var s=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},o))}};function a(t){return t&&"[object Function]"==={}.toString.call(t)}function u(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function c(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function l(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=u(t),n=e.overflow,r=e.overflowX,o=e.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?t:l(c(t))}var f=n&&!(!window.MSInputMethodContext||!document.documentMode),h=n&&/MSIE 10/.test(navigator.userAgent);function p(t){return 11===t?f:10===t?h:f||h}function d(t){if(!t)return document.documentElement;for(var e=p(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===u(n,"position")?d(n):n:t?t.ownerDocument.documentElement:document.documentElement}function g(t){return null!==t.parentNode?g(t.parentNode):t}function m(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?t:e,o=n?e:t,i=document.createRange();i.setStart(r,0),i.setEnd(o,0);var s,a,u=i.commonAncestorContainer;if(t!==u&&e!==u||r.contains(o))return"BODY"===(a=(s=u).nodeName)||"HTML"!==a&&d(s.firstElementChild)!==s?d(u):u;var c=g(t);return c.host?m(c.host,e):m(t,g(e).host)}function v(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var r=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||r)[e]}return t[e]}function y(t,e){var n="x"===e?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+r+"Width"],10)}function b(t,e,n,r){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],p(10)?parseInt(n["offset"+t])+parseInt(r["margin"+("Height"===t?"Top":"Left")])+parseInt(r["margin"+("Height"===t?"Bottom":"Right")]):0)}function w(t){var e=t.body,n=t.documentElement,r=p(10)&&getComputedStyle(n);return{height:b("Height",e,n,r),width:b("Width",e,n,r)}}var C=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},x=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),E=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},k=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function T(t){return k({},t,{right:t.left+t.width,bottom:t.top+t.height})}function D(t){var e={};try{if(p(10)){e=t.getBoundingClientRect();var n=v(t,"top"),r=v(t,"left");e.top+=n,e.left+=r,e.bottom+=n,e.right+=r}else e=t.getBoundingClientRect()}catch(t){}var o={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},i="HTML"===t.nodeName?w(t.ownerDocument):{},s=i.width||t.clientWidth||o.right-o.left,a=i.height||t.clientHeight||o.bottom-o.top,c=t.offsetWidth-s,l=t.offsetHeight-a;if(c||l){var f=u(t);c-=y(f,"x"),l-=y(f,"y"),o.width-=c,o.height-=l}return T(o)}function A(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=p(10),o="HTML"===e.nodeName,i=D(t),s=D(e),a=l(t),c=u(e),f=parseFloat(c.borderTopWidth,10),h=parseFloat(c.borderLeftWidth,10);n&&o&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var d=T({top:i.top-s.top-f,left:i.left-s.left-h,width:i.width,height:i.height});if(d.marginTop=0,d.marginLeft=0,!r&&o){var g=parseFloat(c.marginTop,10),m=parseFloat(c.marginLeft,10);d.top-=f-g,d.bottom-=f-g,d.left-=h-m,d.right-=h-m,d.marginTop=g,d.marginLeft=m}return(r&&!n?e.contains(a):e===a&&"BODY"!==a.nodeName)&&(d=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=v(e,"top"),o=v(e,"left"),i=n?-1:1;return t.top+=r*i,t.bottom+=r*i,t.left+=o*i,t.right+=o*i,t}(d,e)),d}function O(t){if(!t||!t.parentElement||p())return document.documentElement;for(var e=t.parentElement;e&&"none"===u(e,"transform");)e=e.parentElement;return e||document.documentElement}function S(t,e,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i={top:0,left:0},s=o?O(t):m(t,e);if("viewport"===r)i=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,r=A(t,n),o=Math.max(n.clientWidth,window.innerWidth||0),i=Math.max(n.clientHeight,window.innerHeight||0),s=e?0:v(n),a=e?0:v(n,"left");return T({top:s-r.top+r.marginTop,left:a-r.left+r.marginLeft,width:o,height:i})}(s,o);else{var a=void 0;"scrollParent"===r?"BODY"===(a=l(c(e))).nodeName&&(a=t.ownerDocument.documentElement):a="window"===r?t.ownerDocument.documentElement:r;var f=A(a,s,o);if("HTML"!==a.nodeName||function t(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===u(e,"position"))return!0;var r=c(e);return!!r&&t(r)}(s))i=f;else{var h=w(t.ownerDocument),p=h.height,d=h.width;i.top+=f.top-f.marginTop,i.bottom=p+f.top,i.left+=f.left-f.marginLeft,i.right=d+f.left}}var g="number"==typeof(n=n||0);return i.left+=g?n:n.left||0,i.top+=g?n:n.top||0,i.right-=g?n:n.right||0,i.bottom-=g?n:n.bottom||0,i}function _(t,e,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var s=S(n,r,i,o),a={top:{width:s.width,height:e.top-s.top},right:{width:s.right-e.right,height:s.height},bottom:{width:s.width,height:s.bottom-e.bottom},left:{width:e.left-s.left,height:s.height}},u=Object.keys(a).map(function(t){return k({key:t},a[t],{area:(e=a[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),c=u.filter(function(t){var e=t.width,r=t.height;return e>=n.clientWidth&&r>=n.clientHeight}),l=c.length>0?c[0].key:u[0].key,f=t.split("-")[1];return l+(f?"-"+f:"")}function F(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return A(n,r?O(e):m(e,n),r)}function N(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),r=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+r,height:t.offsetHeight+n}}function P(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function j(t,e,n){n=n.split("-")[0];var r=N(t),o={width:r.width,height:r.height},i=-1!==["right","left"].indexOf(n),s=i?"top":"left",a=i?"left":"top",u=i?"height":"width",c=i?"width":"height";return o[s]=e[s]+e[u]/2-r[u]/2,o[a]=n===a?e[a]-r[c]:e[P(a)],o}function R(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function L(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var r=R(t,function(t){return t[e]===n});return t.indexOf(r)}(t,"name",n))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&a(n)&&(e.offsets.popper=T(e.offsets.popper),e.offsets.reference=T(e.offsets.reference),e=n(e,t))}),e}function M(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function B(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),r=0;r<e.length;r++){var o=e[r],i=o?""+o+n:t;if(void 0!==document.body.style[i])return i}return null}function I(t){var e=t.ownerDocument;return e?e.defaultView:window}function U(t,e,n,r){n.updateBound=r,I(t).addEventListener("resize",n.updateBound,{passive:!0});var o=l(t);return function t(e,n,r,o){var i="BODY"===e.nodeName,s=i?e.ownerDocument.defaultView:e;s.addEventListener(n,r,{passive:!0}),i||t(l(s.parentNode),n,r,o),o.push(s)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function H(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,I(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function q(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function $(t,e){Object.keys(e).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&q(e[n])&&(r="px"),t.style[n]=e[n]+r})}var W=n&&/Firefox/i.test(navigator.userAgent);function Y(t,e,n){var r=R(t,function(t){return t.name===e}),o=!!r&&t.some(function(t){return t.name===n&&t.enabled&&t.order<r.order});if(!o){var i="`"+e+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")}return o}var J=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],V=J.slice(3);function X(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=V.indexOf(t),r=V.slice(n+1).concat(V.slice(0,n));return e?r.reverse():r}var Q={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function z(t,e,n,r){var o=[0,0],i=-1!==["right","left"].indexOf(r),s=t.split(/(\+|\-)/).map(function(t){return t.trim()}),a=s.indexOf(R(s,function(t){return-1!==t.search(/,|\s/)}));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,c=-1!==a?[s.slice(0,a).concat([s[a].split(u)[0]]),[s[a].split(u)[1]].concat(s.slice(a+1))]:[s];return(c=c.map(function(t,r){var o=(1===r?!i:i)?"height":"width",s=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,s=!0,t):s?(t[t.length-1]+=e,s=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,r){var o=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),i=+o[1],s=o[2];if(!i)return t;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=r}return T(a)[e]/100*i}if("vh"===s||"vw"===s)return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*i;return i}(t,o,e,n)})})).forEach(function(t,e){t.forEach(function(n,r){q(n)&&(o[e]+=n*("-"===t[r-1]?-1:1))})}),o}var G={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],r=e.split("-")[1];if(r){var o=t.offsets,i=o.reference,s=o.popper,a=-1!==["bottom","top"].indexOf(n),u=a?"left":"top",c=a?"width":"height",l={start:E({},u,i[u]),end:E({},u,i[u]+i[c]-s[c])};t.offsets.popper=k({},s,l[r])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,r=t.placement,o=t.offsets,i=o.popper,s=o.reference,a=r.split("-")[0],u=void 0;return u=q(+n)?[+n,0]:z(n,i,s,a),"left"===a?(i.top+=u[0],i.left-=u[1]):"right"===a?(i.top+=u[0],i.left+=u[1]):"top"===a?(i.left+=u[0],i.top-=u[1]):"bottom"===a&&(i.left+=u[0],i.top+=u[1]),t.popper=i,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||d(t.instance.popper);t.instance.reference===n&&(n=d(n));var r=B("transform"),o=t.instance.popper.style,i=o.top,s=o.left,a=o[r];o.top="",o.left="",o[r]="";var u=S(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);o.top=i,o.left=s,o[r]=a,e.boundaries=u;var c=e.priority,l=t.offsets.popper,f={primary:function(t){var n=l[t];return l[t]<u[t]&&!e.escapeWithReference&&(n=Math.max(l[t],u[t])),E({},t,n)},secondary:function(t){var n="right"===t?"left":"top",r=l[n];return l[t]>u[t]&&!e.escapeWithReference&&(r=Math.min(l[n],u[t]-("right"===t?l.width:l.height))),E({},n,r)}};return c.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";l=k({},l,f[e](t))}),t.offsets.popper=l,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,r=e.reference,o=t.placement.split("-")[0],i=Math.floor,s=-1!==["top","bottom"].indexOf(o),a=s?"right":"bottom",u=s?"left":"top",c=s?"width":"height";return n[a]<i(r[u])&&(t.offsets.popper[u]=i(r[u])-n[c]),n[u]>i(r[a])&&(t.offsets.popper[u]=i(r[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!Y(t.instance.modifiers,"arrow","keepTogether"))return t;var r=e.element;if("string"==typeof r){if(!(r=t.instance.popper.querySelector(r)))return t}else if(!t.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var o=t.placement.split("-")[0],i=t.offsets,s=i.popper,a=i.reference,c=-1!==["left","right"].indexOf(o),l=c?"height":"width",f=c?"Top":"Left",h=f.toLowerCase(),p=c?"left":"top",d=c?"bottom":"right",g=N(r)[l];a[d]-g<s[h]&&(t.offsets.popper[h]-=s[h]-(a[d]-g)),a[h]+g>s[d]&&(t.offsets.popper[h]+=a[h]+g-s[d]),t.offsets.popper=T(t.offsets.popper);var m=a[h]+a[l]/2-g/2,v=u(t.instance.popper),y=parseFloat(v["margin"+f],10),b=parseFloat(v["border"+f+"Width"],10),w=m-t.offsets.popper[h]-y-b;return w=Math.max(Math.min(s[l]-g,w),0),t.arrowElement=r,t.offsets.arrow=(E(n={},h,Math.round(w)),E(n,p,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(M(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=S(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),r=t.placement.split("-")[0],o=P(r),i=t.placement.split("-")[1]||"",s=[];switch(e.behavior){case Q.FLIP:s=[r,o];break;case Q.CLOCKWISE:s=X(r);break;case Q.COUNTERCLOCKWISE:s=X(r,!0);break;default:s=e.behavior}return s.forEach(function(a,u){if(r!==a||s.length===u+1)return t;r=t.placement.split("-")[0],o=P(r);var c=t.offsets.popper,l=t.offsets.reference,f=Math.floor,h="left"===r&&f(c.right)>f(l.left)||"right"===r&&f(c.left)<f(l.right)||"top"===r&&f(c.bottom)>f(l.top)||"bottom"===r&&f(c.top)<f(l.bottom),p=f(c.left)<f(n.left),d=f(c.right)>f(n.right),g=f(c.top)<f(n.top),m=f(c.bottom)>f(n.bottom),v="left"===r&&p||"right"===r&&d||"top"===r&&g||"bottom"===r&&m,y=-1!==["top","bottom"].indexOf(r),b=!!e.flipVariations&&(y&&"start"===i&&p||y&&"end"===i&&d||!y&&"start"===i&&g||!y&&"end"===i&&m);(h||v||b)&&(t.flipped=!0,(h||v)&&(r=s[u+1]),b&&(i=function(t){return"end"===t?"start":"start"===t?"end":t}(i)),t.placement=r+(i?"-"+i:""),t.offsets.popper=k({},t.offsets.popper,j(t.instance.popper,t.offsets.reference,t.placement)),t=L(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],r=t.offsets,o=r.popper,i=r.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return o[s?"left":"top"]=i[n]-(a?o[s?"width":"height"]:0),t.placement=P(e),t.offsets.popper=T(o),t}},hide:{order:800,enabled:!0,fn:function(t){if(!Y(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=R(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,r=e.y,o=t.offsets.popper,i=R(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==i?i:e.gpuAcceleration,a=d(t.instance.popper),u=D(a),c={position:o.position},l=function(t,e){var n=t.offsets,r=n.popper,o=n.reference,i=Math.round,s=Math.floor,a=function(t){return t},u=i(o.width),c=i(r.width),l=-1!==["left","right"].indexOf(t.placement),f=-1!==t.placement.indexOf("-"),h=e?l||f||u%2==c%2?i:s:a,p=e?i:a;return{left:h(u%2==1&&c%2==1&&!f&&e?r.left-1:r.left),top:p(r.top),bottom:p(r.bottom),right:h(r.right)}}(t,window.devicePixelRatio<2||!W),f="bottom"===n?"top":"bottom",h="right"===r?"left":"right",p=B("transform"),g=void 0,m=void 0;if(m="bottom"===f?"HTML"===a.nodeName?-a.clientHeight+l.bottom:-u.height+l.bottom:l.top,g="right"===h?"HTML"===a.nodeName?-a.clientWidth+l.right:-u.width+l.right:l.left,s&&p)c[p]="translate3d("+g+"px, "+m+"px, 0)",c[f]=0,c[h]=0,c.willChange="transform";else{var v="bottom"===f?-1:1,y="right"===h?-1:1;c[f]=m*v,c[h]=g*y,c.willChange=f+", "+h}var b={"x-placement":t.placement};return t.attributes=k({},b,t.attributes),t.styles=k({},c,t.styles),t.arrowStyles=k({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return $(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&$(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,r,o){var i=F(o,e,t,n.positionFixed),s=_(n.placement,i,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",s),$(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},K=function(){function t(e,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};C(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=s(this.update.bind(this)),this.options=k({},t.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(k({},t.Defaults.modifiers,o.modifiers)).forEach(function(e){r.options.modifiers[e]=k({},t.Defaults.modifiers[e]||{},o.modifiers?o.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return k({name:t},r.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&a(t.onLoad)&&t.onLoad(r.reference,r.popper,r.options,t,r.state)}),this.update();var i=this.options.eventsEnabled;i&&this.enableEventListeners(),this.state.eventsEnabled=i}return x(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=F(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=_(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=j(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=L(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,M(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[B("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=U(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return H.call(this)}}]),t}();K.Utils=("undefined"!=typeof window?window:t).PopperUtils,K.placements=J,K.Defaults=G,e.a=K}).call(this,n(88))},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(75),o=n(47),i=n(32),s=n(74),a=n(27),u=n(96),c=Object.getOwnPropertyDescriptor;e.f=n(26)?c:function(t,e){if(t=i(t),e=s(e,!0),u)try{return c(t,e)}catch(t){}if(a(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(25).f,o=n(27),i=n(20)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},function(t,e,n){var r=n(99),o=n(82);t.exports=Object.keys||function(t){return r(t,o)}},function(t,e,n){var r=n(21),o=n(166),i=n(82),s=n(81)("IE_PROTO"),a=function(){},u=function(){var t,e=n(73)("iframe"),r=i.length;for(e.style.display="none",n(103).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),u=t.F;r--;)delete u.prototype[i[r]];return u()};t.exports=Object.create||function(t,e){var n;return null!==t?(a.prototype=r(t),n=new a,a.prototype=null,n[s]=t):n=u(),void 0===e?n:o(n,e)}},function(t,e){var n=t.exports={version:"2.6.3"};"number"==typeof __e&&(__e=n)},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){(function(r){function o(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG),t}(e=t.exports=n(246)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,r)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=o,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(o())}).call(this,n(42))},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},function(t,e){t.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){(function(r){function o(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG),t}(e=t.exports=n(265)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,r)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=o,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(o())}).call(this,n(42))},function(t,e,n){t.exports=n(155)},function(t,e,n){t.exports=n(157)},function(t,e,n){"use strict";n.d(e,"a",function(){return f});var r=n(5),o=n.n(r),i=n(4),s=n.n(i),a=n(0),u=n.n(a),c=n(6),l=n(2);let f=function(){function t(e){o()(this,t),u()(this,"binders",void 0),u()(this,"debug",Object(c.a)("binders:BindersService")),this.binders=e}return s()(t,[{key:"registWrapper",value:function(t,e){e||(e=t.name);const n=t.binder;return this.binders[e]=n,this.binders}},{key:"regist",value:function(t,e){if(t.hasOwnProperty("binder")&&(t=t,e||(e=t.name),t=t.binder),this.debug("name",e,t),!e)throw new Error("[BindersService] name is required");return this.binders[e]=t,this.binders}},{key:"regists",value:function(t){if(l.a.isArray(t))for(let e=0;e<t.length;e++){const n=t[e];this.regist(n.binder,n.name)}if(l.a.isObject(t))for(const e in t)t.hasOwnProperty(e)&&this.regist(t[e],e);return this.binders}}]),t}()},function(t,e,n){"use strict";n.d(e,"a",function(){return f});var r=n(5),o=n.n(r),i=n(4),s=n.n(i),a=n(0),u=n.n(a),c=n(6),l=n(2);let f=function(){function t(e){o()(this,t),u()(this,"formatters",void 0),u()(this,"debug",Object(c.a)("formatters:FormatterService")),this.formatters=e}return s()(t,[{key:"regist",value:function(t,e){if(e||(t.hasOwnProperty("constructor")&&(e=t.constructor.name),t.hasOwnProperty("name")&&(e=t.name)),this.debug("name",e,t),!e)throw new Error("[FormatterService] name is required");return this.formatters[e]=t,this.formatters}},{key:"regists",value:function(t){if(l.a.isArray(t))for(let e=0;e<t.length;e++){const n=t[e];this.regist(n.formatter,n.name)}if(l.a.isObject(t))for(const e in t)t.hasOwnProperty(e)&&this.regist(t[e],e);return this.formatters}}]),t}()},function(t,e,n){"use strict";n.d(e,"a",function(){return m});var r=n(60),o=n.n(r),i=n(61),s=n.n(i),a=n(7),u=n.n(a),c=n(5),l=n.n(c),f=n(4),h=n.n(f),p=n(0),d=n.n(p);let g=function(){function t(){l()(this,t),d()(this,"counter",0),d()(this,"weakmap",{})}return h()(t,[{key:"weakReference",value:function(t){if(!t.hasOwnProperty("__rv")){const e=this.counter++;Object.defineProperty(t,"__rv",{value:e})}return this.weakmap[t.__rv]||(this.weakmap[t.__rv]={callbacks:{}}),this.weakmap[t.__rv]}},{key:"cleanupWeakReference",value:function(t,e){u()(t.callbacks).length||t.pointers&&u()(t.pointers).length||delete this.weakmap[e]}},{key:"stubFunction",value:function(t,e){const n=t[e],r=this.weakReference(t),o=this.weakmap;t[e]=function(){for(var e=arguments.length,i=new Array(e),s=0;s<e;s++)i[s]=arguments[s];const a=n.apply(t,i);return u()(r.pointers).forEach(t=>{const e=r.pointers[t];o[t]&&o[t].callbacks[e]instanceof Array&&o[t].callbacks[e].forEach(t=>{t.sync()})}),a}}},{key:"observeMutations",value:function(e,n,r){if(e instanceof Array){const o=this.weakReference(e);o.pointers||(o.pointers={},t.ARRAY_METHODS.forEach(t=>{this.stubFunction(e,t)})),o.pointers[n]||(o.pointers[n]=[]),-1===o.pointers[n].indexOf(r)&&o.pointers[n].push(r)}}},{key:"unobserveMutations",value:function(t,e,n){if(t instanceof Array&&null!=t.__rv){const r=this.weakmap[t.__rv];if(r){const o=r.pointers[e];if(o){const i=o.indexOf(n);i>-1&&o.splice(i,1),o.length||delete r.pointers[e],this.cleanupWeakReference(r,t.__rv)}}}}},{key:"observe",value:function(t,e,n){let r;const i=this.weakReference(t).callbacks;if(!i[e]){i[e]=[];const n=s()(t,e);n&&(n.get||n.set||!n.configurable)||(r=t[e],o()(t,e,{enumerable:!0,get:()=>r,set:n=>{if(n!==r){this.unobserveMutations(r,t.__rv,e),r=n;const o=this.weakmap[t.__rv];if(o){const r=o.callbacks[e];r&&r.forEach(t=>{t.sync()}),this.observeMutations(n,t.__rv,e)}}}}))}-1===i[e].indexOf(n)&&i[e].push(n),this.observeMutations(t[e],t.__rv,e)}},{key:"unobserve",value:function(t,e,n){const r=this.weakmap[t.__rv];if(r){const o=r.callbacks[e];if(o){const i=o.indexOf(n);i>-1&&(o.splice(i,1),o.length||(delete r.callbacks[e],this.unobserveMutations(t[e],t.__rv,e))),this.cleanupWeakReference(r,t.__rv)}}}},{key:"get",value:function(t,e){return t[e]}},{key:"set",value:function(t,e,n){t[e]=n}}]),t}();d()(g,"ARRAY_METHODS",["push","pop","shift","unshift","sort","reverse","splice"]);const m=new g},function(t,e,n){"use strict";n.d(e,"a",function(){return g});var r=n(7),o=n.n(r),i=n(5),s=n.n(i),a=n(4),u=n.n(a),c=n(0),l=n.n(c),f=n(10),h=n(38),p=n(2),d=n(6);let g=function(){function t(e,n,r,o,i,a,u){s()(this,t),l()(this,"value",void 0),l()(this,"observer",void 0),l()(this,"view",void 0),l()(this,"el",void 0),l()(this,"type",void 0),l()(this,"binder",void 0),l()(this,"formatters",void 0),l()(this,"formatterObservers",{}),l()(this,"keypath",void 0),l()(this,"args",void 0),l()(this,"model",void 0),l()(this,"marker",void 0),l()(this,"_bound",void 0),l()(this,"customData",void 0),l()(this,"debug",void 0),this.view=e,this.el=n,this.type=r,this.keypath=o,this.binder=i,this.formatters=a,this.model=void 0,this.customData={},this.debug=Object(d.a)("riba:Binding"),this.args=u&&r?this.getStarArguments(u,r):new Array}return u()(t,[{key:"observe",value:function(t,e,n){return new h.a(t,e,n)}},{key:"parseTarget",value:function(){if(this.keypath){const t=Object(f.f)(this.keypath);if(t.type===f.b)this.value=t.value;else{if(t.type!==f.a)throw new Error("Unknown type in token");this.observer=this.observe(this.view.models,this.keypath,this),this.model=this.observer.target}}else this.value=void 0}},{key:"getIterationAlias",value:function(t){return"%"+t+"%"}},{key:"parseFormatterArguments",value:function(t,e){return t.map(f.f).map((t,n)=>{let r=t.type,o=t.value;if(r===f.b){return o}if(r===f.a){const t=o;this.formatterObservers[e]||(this.formatterObservers[e]={});let r=this.formatterObservers[e][n];return r||(r=this.observe(this.view.models,t,this),this.formatterObservers[e][n]=r),r.value()}throw new Error("Unknown argument type")})}},{key:"formattedValue",value:function(e){if(null===this.formatters)throw new Error("formatters is null");return this.formatters.reduce((e,n,r)=>{const o=n.match(t.FORMATTER_ARGS);if(null===o)throw new Error(`No args matched from FORMATTER_ARGS "${n}"`);const i=o.shift();if(!i)throw new Error("No id found in args");if(!this.view.options.formatters)throw new Error("No formatters are defined");const s=this.view.options.formatters[i],a=this.parseFormatterArguments(o,r);let u;return s&&s.read instanceof Function?u=s.read:s instanceof Function&&(u=s),u instanceof Function&&(e=u.apply(this.model,[e,...a])),e},e)}},{key:"eventHandler",value:function(t,e){const n=this,r=n.view.options.handler;return o=>{if(!r)throw new Error("No handler defined in binding.view.options.handler");r.call(t,this,o,n,e)}}},{key:"set",value:function(t){let e;if(t=t instanceof Function&&!this.binder.function&&this.view.options.executeFunctions?this.formattedValue(t.call(this.model)):this.formattedValue(t),null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("routine")?(this.binder=this.binder,e=this.binder.routine):(this.binder=this.binder,e=this.binder),e instanceof Function&&(t&&"function"==typeof t.then&&"function"==typeof t.catch?t.then(t=>{e.call(this,this.el,t)}).catch(t=>{console.error(t)}):e.call(this,this.el,t))}},{key:"sync",value:function(){this.observer?(this.model=this.observer.target,this.set(this.observer.value())):this.set(this.value)}},{key:"publish",value:function(){if(this.observer){if(null===this.formatters)throw new Error("formatters is null");const e=this.formatters.reduceRight((e,n,r)=>{const o=n.split(t.FORMATTER_SPLIT),i=o.shift();if(!i)throw new Error("id not defined");if(!this.view.options.formatters)return;const s=this.view.options.formatters[i],a=this.parseFormatterArguments(o,r);return s&&s.publish&&(e=s.publish(e,...a)),e},this.getValue(this.el));this.observer.setValue(e)}}},{key:"bind",value:function(){if(this.parseTarget(),this.binder&&this.binder.hasOwnProperty("bind")){if(this.binder=this.binder,!this.binder.bind&&"function"!=typeof this.binder.bind)throw new Error("the method bind is not a function");this.binder.bind.call(this,this.el)}this.view.options.preloadData&&this.sync()}},{key:"unbind",value:function(){if(null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("bind")&&(this.binder=this.binder,this.binder.unbind&&this.binder.unbind.call(this,this.el)),this.observer&&this.observer.unobserve(),o()(this.formatterObservers).forEach(t=>{const e=this.formatterObservers[t];o()(e).forEach(t=>{e[t].unobserve()})}),this.formatterObservers={}}},{key:"update",value:function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this.observer&&(this.model=this.observer.target),null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("update")&&(this.binder=this.binder,this.binder.update&&this.binder.update.call(this,t))}},{key:"getValue",value:function(t){if(null===this.binder)throw new Error("binder is null");if(this.binder.hasOwnProperty("getValue")){if(this.binder=this.binder,"function"!=typeof this.binder.getValue)throw new Error("getValue is not a function");return this.binder.getValue.call(this,t)}return p.a.getInputValue(t)}},{key:"getStarArguments",value:function(t,e){const n=new Array;new RegExp(`^${t.replace(/\*/g,".+")}$`).test(e)&&e.split("-")[0]===t.split("-")[0]||"*"!==t&&console.error("Nodename not matchs the identifier,",t,e);const r=t.split("*");if(r.length>0){if(r.length-1<=1)n.push(e.slice(t.length-1));else{const t=r[0];let o=e.slice(t.length);r.forEach((t,e)=>{if(e>0){let i=o.split(t)[0];e===r.length-1&&(i=o),p.a.isNumber(i)&&(i=Number(i)),o=o.substring(o.indexOf(t)+1),n.push(i)}})}}return n}}]),t}();l()(g,"FORMATTER_ARGS",/[^\s']+|'([^']|'[^\s])*'|"([^"]|"[^\s])*"/g),l()(g,"FORMATTER_SPLIT",/\s+/)},function(t,e,n){"use strict";n.d(e,"a",function(){return v});var r=n(24),o=n.n(r),i=n(7),s=n.n(i),a=n(5),u=n.n(a),c=n(4),l=n.n(c),f=n(0),h=n.n(f),p=n(10),d=n(17),g=n(38),m=n(2);let v=function(){function t(e,n,r){if(u()(this,t),h()(this,"view",void 0),h()(this,"el",void 0),h()(this,"type",void 0),h()(this,"component",void 0),h()(this,"static",{}),h()(this,"keypaths",{}),h()(this,"formattersObservers",{}),h()(this,"observers",void 0),h()(this,"bindingPrefix",void 0),h()(this,"pipes",{}),!e.options.components)throw new Error("No components found!");this.view=e,this.el=n,this.type=r,this.component=e.options.components[this.type],this.static={},this.observers={},this.bindingPrefix=e.options.prefix+"-",this.parseTarget(),this.sync()}return l()(t,[{key:"observe",value:function(t,e,n){return new g.a(t,e,n)}},{key:"sync",value:function(){s()(this.static).forEach(t=>{this.component.bind&&-1!==this.component.bind.indexOf(t)&&(this[t]=this.static[t])}),s()(this.observers).forEach(t=>{this.component.bind&&-1!==this.component.bind.indexOf(t)&&(this[t]=this.observers[t].value())})}},{key:"publish",value:function(t,e){t&&this.observers[t]&&this.observers[t].setValue(e)}},{key:"locals",value:function(){const t={};return s()(this.static).forEach(e=>{t[e]=this.static[e]}),s()(this.observers).forEach(e=>{t[e]=this.observers[e].value()}),t}},{key:"getMergedOptions",value:function(){const t={adapters:o()(null),binders:o()(null),components:o()(null),formatters:o()(null),starBinders:o()(null),rootInterface:o()(null)};return this.component.binders&&(t.binders=m.a.concat(!1,t.binders,this.component.binders)),this.component.formatters&&(t.formatters=m.a.concat(!1,t.formatters,this.component.formatters)),this.component.components&&(t.components=m.a.concat(!1,t.components,this.component.components)),this.component.adapters&&(t.adapters=m.a.concat(!1,t.adapters,this.component.adapters)),t.binders=m.a.concat(!1,t.binders,this.view.options.binders),t.formatters=m.a.concat(!1,t.formatters,this.view.options.formatters),t.components=m.a.concat(!1,t.components,this.view.options.components),t.adapters=m.a.concat(!1,t.adapters,this.view.options.adapters),t.prefix=this.component.prefix?this.component.prefix:this.view.options.prefix,t.templateDelimiters=this.component.templateDelimiters?this.component.templateDelimiters:this.view.options.templateDelimiters,t.rootInterface=this.component.rootInterface?this.component.rootInterface:this.view.options.rootInterface,t.preloadData=this.component.preloadData?this.component.preloadData:this.view.options.preloadData,t.handler=this.component.handler?this.component.handler:this.view.options.handler,t.binders&&(t.starBinders=s()(t.binders).filter(t=>t.indexOf("*")>0)),t}},{key:"bind",value:function(){if(this.el._bound)this.view.bind();else{const t=this.component.template.call(this,this.el);null!==t&&(this.el.innerHTML=t);const e=this.component.initialize.call(this,this.el,this.locals());this.view=new d.a(Array.prototype.slice.call(this.el.childNodes),e,this.getMergedOptions()),this.view.bind(),this.el._bound=!0}}},{key:"parseTarget",value:function(){for(let t=0,e=this.el.attributes.length;t<e;t++){const e=this.el.attributes[t];if(0!==e.name.indexOf(this.bindingPrefix)){const t=m.a.camelCase(e.name),n=e.value,r=Object(p.c)(n);r.pipes.length>0&&console.warn("Formatters on component arguments not supported for the moment",r.pipes),this.pipes[t]=r.pipes;const o=Object(p.f)(r.keypath);if(void 0!==this.component.static&&-1!==this.component.static.indexOf(t))this.static[t]=e.value;else if(o.type===p.b)this.static[t]=o.value;else{if(o.type!==p.a)throw new Error("can't parse component attribute");this.keypaths[t]=e.value,this.observers[t]=this.observe(this.view.models,this.keypaths[t],this)}}}}},{key:"unbind",value:function(){s()(this.observers).forEach(t=>{this.observers[t].unobserve()}),s()(this.formattersObservers).forEach(t=>{s()(this.formattersObservers[t]).forEach(e=>{s()(this.formattersObservers[t][e]).forEach(n=>{this.formattersObservers[t][e][n].unobserve()})})}),this.view&&this.view.unbind.call(this)}}]),t}()},function(t,e,n){t.exports=n(236)},function(t,e,n){"use strict";var r=n(6);const o={function:!0,priority:1e3,bind(t){const e=Object(r.b)(t),n=this.args[0];e.addClass(n)},unbind(t){},routine(t,e){const n=Object(r.b)(t),o=this.args[0];e?n.addClass(o+"-start").removeClass(o+"-done"):n.removeClass(o+"-start").addClass(o+"-done")}};var i=n(2);const s=function(t,e){i.a.extend(!1,this.view.models,e)};var a=n(18);const u={function:!0,priority:1e3,bind(t){const e=Object(a.a)(t);this.customData={$el:e,staticClasses:e.attr("class")}},unbind(t){delete this.customData},routine(t,e){e&&(Object(a.a)(t).attr("class",this.customData.staticClasses),Object(a.a)(t).addClass(e))}},c={publishes:!0,priority:2e3,bind(t){const e=this;this.customData={},this.customData.callback||(this.customData.callback=(()=>{e.publish()})),t.addEventListener("change",this.customData.callback)},unbind(t){t.removeEventListener("change",this.customData.callback)},routine(t,e){"radio"===t.type?t.checked=i.a.getString(t.value)===i.a.getString(e):t.checked=!!e}},l=function(t,e){const n=Object(a.a)(t),r=this.args[0];return e?n.addClass(r):n.removeClass(r),e},f=function(t,e){const n=Object(a.a)(t),r=this.args[0];return e?n.css(r,e):n.css(r,""),e},h=(t,e)=>{t.disabled=!e},p=(t,e)=>{t.disabled=!!e},d=t=>{return{binder:{function:!0,priority:1e3,bind(t){this.customData||(this.customData={handler:null})},unbind(e){if(this.customData.handler){if(null===this.args)throw new Error("args is null");t(e).off(this.args[0],this.customData.handler)}},routine(e,n){if(null===this.args)throw new Error("args is null");const r=this.args[0];this.customData.handler&&t(e).off(r,this.customData),this.customData.handler=this.eventHandler(n,e);try{t(e).on(r,this.customData.handler)}catch(n){console.warn(n),t(e).on(r,t=>{this.customData.handler(t)})}}},name:"on-*"}},g=(t,e)=>{const n=Object(a.a)(t);return e&&n.removeClass(e),e};var m=n(17);const v={block:!0,priority:4e3,bind(t){this.customData={},this.marker?!1===this.customData.bound&&this.customData.nested&&this.customData.nested.bind():(this.marker=document.createComment(" riba: "+this.type+" "+this.keypath+" "),this.customData.attached=!1,t.parentNode&&(t.parentNode.insertBefore(this.marker,t),t.parentNode.removeChild(t))),this.customData.bound=!0},unbind(){this.customData.nested&&(this.customData.nested.unbind(),this.customData.bound=!1)},routine(t,e){(e=!!e)!==this.customData.attached&&(e?(this.customData.nested||(this.customData.nested=new m.a(t,this.view.models,this.view.options),this.customData.nested.bind()),this.marker&&this.marker.parentNode&&this.marker.parentNode.insertBefore(t,this.marker.nextSibling),this.customData.attached=!0):(t.parentNode&&t.parentNode.removeChild(t),this.customData.attached=!1))},update(t){this.customData.nested&&this.customData.nested.update(t)}};var y=n(7),b=n.n(y),w=n(71),C=n.n(w);const x={block:!0,priority:4e3,bind(t){this.marker?this.customData.iterated.forEach(t=>{t.bind()}):(this.marker=document.createComment(` riba: ${this.type} `),this.customData={iterated:[]},t.parentNode&&(t.parentNode.insertBefore(this.marker,t),t.parentNode.removeChild(t)))},unbind(t){this.customData.iterated&&this.customData.iterated.forEach(t=>{t.unbind()})},routine(t,e){if(null===this.args)throw new Error("args is null");const n=this.args[0];if(e=e||[],!C()(e))throw new Error("each-"+n+" needs an array to iterate over, but it is");const r=t.getAttribute("index-property")||this.getIterationAlias(n);e.forEach((t,e)=>{const o={$parent:this.view.models};o[r]=e,o[n]=t;let i=this.customData.iterated[e];if(i)if(i.models[n]!==t){let s,a;for(let r=e+1;r<this.customData.iterated.length;r++)if((a=this.customData.iterated[r]).models[n]===t){s=r;break}if(void 0!==s){if(this.customData.iterated.splice(s,1),!this.marker||!this.marker.parentNode)throw new Error("Marker has no parent node");this.marker.parentNode.insertBefore(a.els[0],i.els[0]),a.models[r]=e}else a=m.a.create(this,o,i.els[0]);this.customData.iterated.splice(e,0,a)}else i.models[r]=e;else{let t;if(this.customData.iterated.length)t=this.customData.iterated[this.customData.iterated.length-1].els[0];else{if(!this.marker)throw new Error("previous not defined");t=this.marker}i=m.a.create(this,o,t.nextSibling),this.customData.iterated.push(i)}}),this.customData.iterated.length>e.length&&i.a.times(this.customData.iterated.length-e.length,()=>{const t=this.customData.iterated.pop();if(t.unbind(),!this.marker||!this.marker.parentNode)throw new Error("Marker has no parent node");this.marker.parentNode.removeChild(t.els[0])}),"OPTION"===t.nodeName&&this.view.bindings&&this.view.bindings.forEach(t=>{this.marker&&t.el===this.marker.parentNode&&"value"===t.type&&t.sync&&t.sync()})},update(t){const e={};b()(t).forEach(n=>{if(null===this.args)throw new Error("args is null");n!==this.args[0]&&(e[n]=t[n])}),this.customData.iterated.forEach(t=>{t.update(e)})}},E=(t,e)=>{t.innerHTML=null!=e?e:""},k=(t,e)=>{t.style.display=e?"none":"",e?t.setAttribute("hidden","true"):t.removeAttribute("hidden")},T=(t,e)=>{t.style.display=e?"":"none",e?t.removeAttribute("hidden"):t.setAttribute("hidden","true")},D=(t,e)=>{t.textContent=null!=e?e:""},A=Object(r.a)("binder:value"),O=t=>{const e={};return e.$el=Object(r.b)(t),e.type=e.$el.prop("type"),e.tagName=e.$el.prop("tagName"),e.contenteditable=!!e.$el.attr("contenteditable"),e.isRadio="INPUT"===e.tagName&&"radio"===e.type,e},S={publishes:!0,priority:3e3,bind(t){if(this.customData||(this.customData=O(t)),!this.customData.isRadio){this.customData.event=t.getAttribute("event-name")||("SELECT"===t.tagName?"change":"input");const e=this;this.customData.callback||(this.customData.callback=(()=>{e.publish()})),this.customData.event||(this.customData.event="change input keyup paste blur focus"),Object(r.b)(t).on(this.customData.event,this.customData.callback)}},unbind(t){Object(r.b)(t).off(this.customData.event,this.customData.callback)},routine(t,e){const n=this.getValue(t);if(A("routine value",e),this.customData||(this.customData=O(t)),this.customData.isRadio)t.setAttribute("value",e);else if("select-multiple"===t.type&&t instanceof HTMLSelectElement){if(e instanceof Array)for(let n=0;n<t.options.length;n++){const r=t.options[n];r.selected=e.indexOf(r.value)>-1}}else t.getAttribute("contenteditable")?i.a.getString(e)!==n&&(t.innerHTML=e):i.a.getString(e)!==n&&(t.value=null!=e?e:"")},getValue:i.a.getInputValue},_=function(t){const e=t.detail;this.observer.value()!==e.newValue&&this.observer.setValue(e.newValue)},F={bind(t){this.customData.$el=Object(a.a)(t),t.addEventListener("publish-binder-change:"+this.type,_.bind(this))},unbind(t){delete this.customData,this.el.removeEventListener("publish-binder-change",_.bind(this))},routine(t,e){if(!this.type)throw new Error("Can't set attribute of "+this.type);const n=t.getAttribute(this.type);null!=e?n!==e&&t.setAttribute(this.type,e):t.removeAttribute(this.type),n!==e&&t.dispatchEvent(new CustomEvent("binder-changed",{detail:{name:this.type,oldValue:n,newValue:e,namespace:null}}))}};n.d(e,"a",function(){return N});const N=t=>{return{"animate-*":o,assign:s,"on-*":d(t).binder,"each-*":x,class:u,"remove-class":g,"class-*":l,"css-*":f,text:D,html:E,show:T,hide:k,enabled:h,disabled:p,checked:c,value:S,if:v,"*":F}}},function(t,e,n){"use strict";var r=n(14),o=n.n(r),i=n(1),s=n(19);const a=()=>{window.history.back()};n.d(e,"a",function(){return u});const u={},c=(()=>{const t=Object(i.Debug)("binders:view");return{binder:{block:!0,bind(e){t("bind",this.customData);const n=this;this.customData||(this.customData={}),this.customData.nested=this.customData.nested||null,this.customData.$wrapper=this.customData.$wrapper||Object(i.JQuery)(e),this.customData.onPageReady=((e,r,o,s,a,u,c)=>{e===n.customData.options.viewId?(n.customData.nested&&(t("unbind nested"),"replace"===n.customData.options.action&&n.customData.nested.unbind()),i.Utils.isObject(n.view.models)||(n.view.models={}),!0===n.customData.options.datasetToModel&&i.Utils.isObject(u)&&(n.view.models.dataset=u,t("newPageReady dataset:",u)),n.customData.nested=new i.View(s[0],n.view.models,n.view.options),n.customData.nested.bind()):t("not the right view",n.customData.options.viewId,e)}),this.customData.onTransitionCompleted=(e=>{if(t("onTransitionCompleted",n.customData),e===n.customData.options.viewId){if(this.customData.options.scrollToAnchorHash&&window.location.hash){const e=Object(i.JQuery)(window.location.hash);if(e&&e.length){const n=e.offset();if(n&&n.top)return t("scroll to anchor:",e),new o.a((e,r)=>{setTimeout(()=>{Object(i.JQuery)("body, html").animate({scrollTop:n.top},{duration:1e3,complete:()=>{t("scroll complete"),e()},fail:()=>{t("scroll fail"),r()}})},0)})}}return o.a.resolve()}t("[onTransitionCompleted] not the right view",n.customData.options.viewId,e)})},routine(e,n){const r=Object(i.JQuery)(e);this.customData.options=n||{},this.customData.options.viewId=this.customData.options.viewId||r.attr("id")||"main",this.customData.options.action=this.customData.options.action||"replace",this.customData.options.parseTitle=!!i.Utils.isBoolean(this.customData.options.parseTitle)&&this.customData.options.parseTitle,this.customData.options.containerSelector=this.customData.options.containerSelector||"[data-namespace]","main"===this.customData.options.viewId?(this.customData.options.scrollToTop=!i.Utils.isBoolean(this.customData.options.scrollToTop)||this.customData.options.scrollToTop,this.customData.options.listenAllLinks=!i.Utils.isBoolean(this.customData.options.listenAllLinks)||this.customData.options.listenAllLinks,this.customData.options.listenPopstate=!i.Utils.isBoolean(this.customData.options.listenPopstate)||this.customData.options.listenPopstate,this.customData.options.scrollToAnchorHash=!i.Utils.isBoolean(this.customData.options.scrollToAnchorHash)||this.customData.options.scrollToAnchorHash,this.customData.options.datasetToModel=!i.Utils.isBoolean(this.customData.options.datasetToModel)||this.customData.options.datasetToModel):(this.customData.options.scrollToTop=!!i.Utils.isBoolean(this.customData.options.scrollToTop)&&this.customData.options.scrollToTop,this.customData.options.listenAllLinks=!!i.Utils.isBoolean(this.customData.options.listenAllLinks)&&this.customData.options.listenAllLinks,this.customData.options.listenPopstate=!!i.Utils.isBoolean(this.customData.options.listenPopstate)&&this.customData.options.listenPopstate,this.customData.options.scrollToAnchorHash=!!i.Utils.isBoolean(this.customData.options.scrollToAnchorHash)&&this.customData.options.scrollToAnchorHash,this.customData.options.datasetToModel=!!i.Utils.isBoolean(this.customData.options.datasetToModel)&&this.customData.options.datasetToModel),this.customData.options.autoprefetchLinks=this.customData.options.listenAllLinks,this.customData.options.transition=this.customData.options.transition||new s.HideShowTransition(this.customData.options.action,this.customData.options.scrollToTop),this.customData.dispatcher=new i.EventDispatcher(this.customData.options.viewId),this.customData.prefetch=new s.Prefetch,t("routine",this.customData.options.viewId),this.customData.$wrapper.attr("id",this.customData.options.viewId),t("options",this.customData.options),this.customData.dispatcher.on("newPageReady",this.customData.onPageReady),this.customData.dispatcher.on("transitionCompleted",this.customData.onTransitionCompleted);const o=new s.Pjax(this.customData.options.viewId,this.customData.$wrapper,this.customData.options.containerSelector,this.customData.options.listenAllLinks,this.customData.options.listenPopstate,this.customData.options.transition,this.customData.options.parseTitle);this.customData.prefetch.init(this.customData.options.autoprefetchLinks),o.start()},unbind(e){t("unbind",this.customData.options.viewId),this.customData.dispatcher&&(this.customData.dispatcher.off("newPageReady",this.customData.onPageReady),this.customData.dispatcher.off("transitionCompleted",this.customData.onTransitionCompleted)),this.customData&&null!==this.customData.nested&&this.customData.nested.unbind(),delete this.customData}},name:"view"}})(),l=(()=>{const t=Object(i.Debug)("binders:view-static");return{binder:{block:!0,bind(e){t("bind",this.customData),this.customData||(this.customData={nested:null})},routine(e,n){t("routine",this.customData);const r=Object(i.JQuery)(e),o=this;(n=n||{}).listenAllLinks=!1,n.listenPopstate=!1,n.parseTitle=!1,n.transition=n.transition||new s.HideShowTransition,n.viewId=n.url,t("options",n),new s.Pjax(n.viewId,r,"[data-namespace]",n.listenAllLinks,n.listenPopstate,n.transition,n.parseTitle).load(n.url).then(e=>{r.replaceWith(e),e.css("visibility","visible"),i.Utils.isObject(o.view.models)||(o.view.models={}),o.customData.nested&&(t("unbind nested"),o.customData.nested.unbind()),o.customData.nested=new i.View(e[0],o.view.models,o.view.options),o.customData.nested.bind()})},unbind(e){t("unbind"),this.customData.nested&&(t("unbind nested"),this.customData.nested.unbind()),delete this.customData}},name:"view-static"}})(),f=(()=>{const t=Object(i.Debug)("binders:route");return{binder:{bind(e){this.customData={prefetch:new s.Prefetch,dispatcher:void 0,options:{removeAfterActivation:!1,newTab:!1},$el:Object(i.JQuery)(e),checkURL:t=>!(!t||!i.Utils.onRoute(t)),onClick(e){t("go to",this.customData.options.url),e.preventDefault(),i.Utils.onRoute(this.customData.options.url)?t("already on this site"):this.customData.options.url&&s.Pjax.getInstance(this.customData.options.viewId).goTo(this.customData.options.url,this.customData.options.newTab),this.customData.options.removeAfterActivation&&this.customData.$el&&this.customData.$el.remove()},onNewPageReady(){this.customData.$el&&this.customData.$el.trigger("new-page-ready"),this.customData.checkURL.call(this,this.customData.options.url)},onLinkEnter(t){this.customData.prefetch.onLinkEnter(t,this.customData.options.url)}}},routine(e,n){if(i.Utils.isString(n)?this.customData.options.url=n:i.Utils.isObject(n)&&(this.customData.options=n),this.customData.options.viewId=this.customData.options.viewId||"main",this.customData.options.removeAfterActivation=!!i.Utils.isBoolean(this.customData.options.removeAfterActivation)&&this.customData.options.removeAfterActivation,this.customData.dispatcher=new i.EventDispatcher(this.customData.options.viewId),this.customData.options.newTab=!1,!this.customData.$el)throw new Error("$el is not set");const r="A"===this.customData.$el.prop("tagName");if(t("getBinder",e,this.customData.options.url),!this.customData.options.url&&r){const t=this.customData.$el.attr("href");t&&(this.customData.options.url=t)}"_blank"===this.customData.$el.attr("target")&&(this.customData.options.newTab=!0);const o=i.Utils.getLocation(),s=o.protocol+"//"+o.hostname;this.customData.options.url&&i.Utils.isAbsoluteUrl(this.customData.options.url)?(t("is absolut url",this.customData.options.url),i.Utils.isInternalUrl(this.customData.options.url)?(t("interal url",this.customData.options.url),this.customData.options.url=this.customData.options.url.replace(s,"")):(t("external url",this.customData.options.url),this.customData.options.newTab=!0)):t("is relative url",this.customData.options.url),r&&!this.customData.$el.attr("href")&&this.customData.options.url&&this.customData.$el.attr("href",this.customData.options.url),this.customData.dispatcher.on("newPageReady",this.customData.onNewPageReady.bind(this)),this.customData.$el.off("click").on("click",this.customData.onClick.bind(this)),this.customData.options.newTab||i.Utils.onRoute(this.customData.options.url)||(e.addEventListener("mouseover",this.customData.onLinkEnter.bind(this)),e.addEventListener("touchstart",this.customData.onLinkEnter.bind(this))),this.customData.checkURL.call(this,this.customData.options.url)},unbind(t){t.removeEventListener("mouseover",this.customData.onLinkEnter),t.removeEventListener("touchstart",this.customData.onLinkEnter),this.customData.$el.off("click",this.customData.onClick),this.customData.dispatcher.off("newPageReady",this.customData.onNewPageReady)}},name:"route"}})(),h={binder:{bind(t){this.customData={dispatcher:new i.EventDispatcher("main")}},routine(t,e){const n=Object(i.JQuery)(t),r=this.args[0].toString()||"active",o="A"===n.prop("tagName");if(!e&&o){const t=n.attr("href");t&&(e=t)}const s=t=>{if(t){if(i.Utils.onRoute(t))return n.addClass(r),n.is(":radio")&&n.prop("checked",!0),!0;n.removeClass(r),n.is(":radio")&&n.prop("checked",!1)}return!1};this.customData.dispatcher.on("newPageReady",()=>s(e)),s(e)},unbind(t){}},name:"route-class-*"},p={binder:{bind(t){this.customData={dispatcher:new i.EventDispatcher("main")}},routine(t,e){const n=Object(i.JQuery)(t),r=this.args[0].toString()||"active",o="A"===n.prop("tagName");if(!e&&o){const t=n.attr("href");t&&(e=t)}const s=t=>{if(t){if(i.Utils.onParentRoute(t))return n.addClass(r),n.is(":radio")&&n.prop("checked",!0),!0;n.removeClass(r),n.is(":radio")&&n.prop("checked",!1)}return!1};this.customData.dispatcher.on("newPageReady",()=>s(e)),s(e)},unbind(t){}},name:"parent-route-class-*"},d={binder:{priority:3e3,bind(t){},unbind(t){Object(i.JQuery)(t).off(this.args[0],a)},routine(t,e){if(null===this.args)throw new Error("args is null");const n=this.args[0];Object(i.JQuery)(t).off(n,a),Object(i.JQuery)(t).on(n,a)}},name:"route-back-on-*"};u[c.name]=c.binder,u[l.name]=l.binder,u[f.name]=f.binder,u[h.name]=h.binder,u[p.name]=p.binder,u[d.name]=d.binder},function(t,e,n){"use strict";n.r(e);var r=n(62),o=n(28),i=n(5),s=n.n(i),a=n(4),u=n.n(a),c=n(0),l=n.n(c);let f=function(){function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"main";return s()(this,t),l()(this,"events",{}),l()(this,"id",void 0),this.id=e,t.instances[this.id]?t.instances[this.id]:(t.instances[this.id]=this,t.instances[this.id])}return u()(t,null,[{key:"getInstance",value:function(e){const n=t.instances[e];if(!n)throw new Error(`No EventDispatcher instance with id ${e} found!`);return n}}]),u()(t,[{key:"on",value:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)}},{key:"off",value:function(t,e){t in this.events!=!1&&this.events[t].splice(this.events[t].indexOf(e),1)}},{key:"trigger",value:function(t){if(t in this.events!=!1){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];for(let e=0;e<this.events[t].length;e++)this.events[t][e].apply(this,n)}}}]),t}();l()(f,"instances",{});var h=n(63),p=n(2);n.d(e,"BindersService",function(){return r.a}),n.d(e,"ComponentService",function(){return o.a}),n.d(e,"EventDispatcher",function(){return f}),n.d(e,"FormatterService",function(){return h.a}),n.d(e,"Utils",function(){return p.a})},function(t,e,n){t.exports=n(220)},function(t,e,n){var r=n(61),o=n(272),i=(n(9),n(275));function s(e,n,a){return"undefined"!=typeof Reflect&&o?t.exports=s=o:t.exports=s=function(t,e,n){var o=i(t,e);if(o){var s=r(o,e);return s.get?s.get.call(n):s.value}},s(e,n,a||e)}t.exports=s},function(t,e,n){var r=n(22),o=n(16).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){var r=n(22);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(15),o=n(8),i=n(31);t.exports=function(t,e){var n=(o.Object||{})[t]||Object[t],s={};s[t]=e(n),r(r.S+r.F*i(function(){n(1)}),"Object",s)}},function(t,e,n){var r=n(8),o=n(16),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(41)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){e.f=n(20)},function(t,e,n){var r=n(16),o=n(8),i=n(41),s=n(78),a=n(25).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:s.f(t)})}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(77)("keys"),o=n(50);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(48);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){t.exports=!n(118)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(27),o=n(83),i=n(81)("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},function(t,e,n){"use strict";var r=n(33);function o(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}t.exports.f=function(t){return new o(t)}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(248)("socket.io-parser"),o=n(34),i=n(251),s=n(90),a=n(135);function u(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=u,e.Decoder=f;var c=e.ERROR+'"encode error"';function l(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var o=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===o)return c;n+=o}return r("encoded %j as %s",t,n),n}function f(){this.reconstructor=null}function h(t){this.reconPack=t,this.buffers=[]}function p(t){return{type:e.ERROR,data:"parser error: "+t}}u.prototype.encode=function(t,n){(r("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){i.removeBlobs(t,function(t){var n=i.deconstructPacket(t),r=l(n.packet),o=n.buffers;o.unshift(r),e(o)})}(t,n):n([l(t)])},o(f.prototype),f.prototype.add=function(t){var n;if("string"==typeof t)n=function(t){var n=0,o={type:Number(t.charAt(0))};if(null==e.types[o.type])return p("unknown packet type "+o.type);if(e.BINARY_EVENT===o.type||e.BINARY_ACK===o.type){for(var i="";"-"!==t.charAt(++n)&&(i+=t.charAt(n),n!=t.length););if(i!=Number(i)||"-"!==t.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===t.charAt(n+1))for(o.nsp="";++n;){var a=t.charAt(n);if(","===a)break;if(o.nsp+=a,n===t.length)break}else o.nsp="/";var u=t.charAt(n+1);if(""!==u&&Number(u)==u){for(o.id="";++n;){var a=t.charAt(n);if(null==a||Number(a)!=a){--n;break}if(o.id+=t.charAt(n),n===t.length)break}o.id=Number(o.id)}if(t.charAt(++n)){var c=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(n)),l=!1!==c&&(o.type===e.ERROR||s(c));if(!l)return p("invalid payload");o.data=c}return r("decoded %s as %j",t,o),o}(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new h(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!a(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",n))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},h.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},h.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){"use strict";(function(t){var r=n(252),o=n(253),i=n(254);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=h(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),o=(t=a(t,r)).write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|p(e.length);return 0===(t=a(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):h(t,e);if("Buffer"===e.type&&i(e.data))return h(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(l(e),t=a(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function h(t,e){var n=e.length<0?0:0|p(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return U(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return H(t).length;default:if(r)return U(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function m(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:v(t,e,n,r,o);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):v(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function v(t,e,n,r,o){var i,s=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(o){var l=-1;for(i=n;i<a;i++)if(c(t,i)===c(e,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*s}else-1!==l&&(i-=i-l),l=-1}else for(n+u>a&&(n=a-u),i=n;i>=0;i--){for(var f=!0,h=0;h<u;h++)if(c(t,i+h)!==c(e,h)){f=!1;break}if(f)return i}return-1}function y(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function b(t,e,n,r){return q(U(e,t.length-n),t,n,r)}function w(t,e,n,r){return q(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function C(t,e,n,r){return w(t,e,n,r)}function x(t,e,n,r){return q(H(e),t,n,r)}function E(t,e,n,r){return q(function(t,e){for(var n,r,o,i=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function k(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function T(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,s,a,u,c=t[o],l=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(i=t[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=t[o+1],s=t[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=t[o+1],s=t[o+2],a=t[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=f}return function(t){var e=t.length;if(e<=D)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=D));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var s=t[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,o),o+=s.length}return r},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?T(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return S(this,e,n);case"utf8":case"utf-8":return T(this,e,n);case"ascii":return A(this,e,n);case"latin1":case"binary":return O(this,e,n);case"base64":return k(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,o){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0),a=Math.min(i,s),c=this.slice(r,o),l=t.slice(e,n),f=0;f<a;++f)if(c[f]!==l[f]){i=c[f],s=l[f];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return m(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return m(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return y(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return C(this,t,e,n);case"base64":return x(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var D=4096;function A(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function O(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function S(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=I(t[i]);return o}function _(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function F(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function N(t,e,n,r,o,i){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function P(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function j(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function R(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function L(t,e,n,r,i){return i||R(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function M(t,e,n,r,i){return i||R(t,0,n,8),o.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var o=e-t;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||F(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||F(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},u.prototype.readUInt8=function(t,e){return e||F(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||F(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||F(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||F(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||F(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||F(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||F(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return e||F(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||F(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||F(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||F(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||F(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||F(t,4,this.length),o.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||F(t,4,this.length),o.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||F(t,8,this.length),o.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||F(t,8,this.length),o.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||N(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||N(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||N(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||N(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):P(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||N(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):P(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||N(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):j(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||N(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):j(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);N(this,t,e,n,o-1,-o)}var i=0,s=1,a=0;for(this[e]=255&t;++i<n&&(s*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);N(this,t,e,n,o-1,-o)}var i=n-1,s=1,a=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||N(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||N(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):P(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||N(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):P(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||N(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):j(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||N(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):j(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return L(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return L(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return M(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return M(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var s=u.isBuffer(t)?t:U(new u(t,r).toString()),a=s.length;for(i=0;i<n-e;++i)this[i+e]=s[i%a]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function I(t){return t<16?"0"+t.toString(16):t.toString(16)}function U(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function H(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function q(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}}).call(this,n(88))},function(t,e,n){var r=n(257);t.exports=function(t){var e=t.xdomain,n=t.xscheme,o=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!n&&o)return new XDomainRequest}catch(t){}if(!e)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},function(t,e,n){var r=n(35),o=n(34);function i(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}t.exports=i,o(i.prototype),i.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(t){var e=r.decodePacket(t,this.socket.binaryType);this.onPacket(e)},i.prototype.onPacket=function(t){this.emit("packet",t)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,n){"use strict";(function(r){function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}e.log=function(){var t;return"object"===("undefined"==typeof console?"undefined":o(console))&&console.log&&(t=console).log.apply(t,arguments)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var r=0,o=0;e[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(r++,"%c"===t&&(o=r))}),e.splice(o,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){var t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(170)(e),t.exports.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(42))},function(t,e,n){t.exports=n(217)},function(t,e,n){t.exports=!n(26)&&!n(31)(function(){return 7!=Object.defineProperty(n(73)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){"use strict";var r=n(16),o=n(27),i=n(26),s=n(15),a=n(98),u=n(162).KEY,c=n(31),l=n(77),f=n(51),h=n(50),p=n(20),d=n(78),g=n(79),m=n(163),v=n(102),y=n(21),b=n(22),w=n(32),C=n(74),x=n(47),E=n(53),k=n(167),T=n(49),D=n(25),A=n(52),O=T.f,S=D.f,_=k.f,F=r.Symbol,N=r.JSON,P=N&&N.stringify,j=p("_hidden"),R=p("toPrimitive"),L={}.propertyIsEnumerable,M=l("symbol-registry"),B=l("symbols"),I=l("op-symbols"),U=Object.prototype,H="function"==typeof F,q=r.QObject,$=!q||!q.prototype||!q.prototype.findChild,W=i&&c(function(){return 7!=E(S({},"a",{get:function(){return S(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=O(U,e);r&&delete U[e],S(t,e,n),r&&t!==U&&S(U,e,r)}:S,Y=function(t){var e=B[t]=E(F.prototype);return e._k=t,e},J=H&&"symbol"==typeof F.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof F},V=function(t,e,n){return t===U&&V(I,e,n),y(t),e=C(e,!0),y(n),o(B,e)?(n.enumerable?(o(t,j)&&t[j][e]&&(t[j][e]=!1),n=E(n,{enumerable:x(0,!1)})):(o(t,j)||S(t,j,x(1,{})),t[j][e]=!0),W(t,e,n)):S(t,e,n)},X=function(t,e){y(t);for(var n,r=m(e=w(e)),o=0,i=r.length;i>o;)V(t,n=r[o++],e[n]);return t},Q=function(t){var e=L.call(this,t=C(t,!0));return!(this===U&&o(B,t)&&!o(I,t))&&(!(e||!o(this,t)||!o(B,t)||o(this,j)&&this[j][t])||e)},z=function(t,e){if(t=w(t),e=C(e,!0),t!==U||!o(B,e)||o(I,e)){var n=O(t,e);return!n||!o(B,e)||o(t,j)&&t[j][e]||(n.enumerable=!0),n}},G=function(t){for(var e,n=_(w(t)),r=[],i=0;n.length>i;)o(B,e=n[i++])||e==j||e==u||r.push(e);return r},K=function(t){for(var e,n=t===U,r=_(n?I:w(t)),i=[],s=0;r.length>s;)!o(B,e=r[s++])||n&&!o(U,e)||i.push(B[e]);return i};H||(a((F=function(){if(this instanceof F)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(n){this===U&&e.call(I,n),o(this,j)&&o(this[j],t)&&(this[j][t]=!1),W(this,t,x(1,n))};return i&&$&&W(U,t,{configurable:!0,set:e}),Y(t)}).prototype,"toString",function(){return this._k}),T.f=z,D.f=V,n(104).f=k.f=G,n(75).f=Q,n(101).f=K,i&&!n(41)&&a(U,"propertyIsEnumerable",Q,!0),d.f=function(t){return Y(p(t))}),s(s.G+s.W+s.F*!H,{Symbol:F});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Z.length>tt;)p(Z[tt++]);for(var et=A(p.store),nt=0;et.length>nt;)g(et[nt++]);s(s.S+s.F*!H,"Symbol",{for:function(t){return o(M,t+="")?M[t]:M[t]=F(t)},keyFor:function(t){if(!J(t))throw TypeError(t+" is not a symbol!");for(var e in M)if(M[e]===t)return e},useSetter:function(){$=!0},useSimple:function(){$=!1}}),s(s.S+s.F*!H,"Object",{create:function(t,e){return void 0===e?E(t):X(E(t),e)},defineProperty:V,defineProperties:X,getOwnPropertyDescriptor:z,getOwnPropertyNames:G,getOwnPropertySymbols:K}),N&&s(s.S+s.F*(!H||c(function(){var t=F();return"[null]"!=P([t])||"{}"!=P({a:t})||"{}"!=P(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=e=r[1],(b(e)||void 0!==t)&&!J(t))return v(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!J(e))return e}),r[1]=e,P.apply(N,r)}}),F.prototype[R]||n(30)(F.prototype,R,F.prototype.valueOf),f(F,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){t.exports=n(30)},function(t,e,n){var r=n(27),o=n(32),i=n(164)(!1),s=n(81)("IE_PROTO");t.exports=function(t,e){var n,a=o(t),u=0,c=[];for(n in a)n!=s&&r(a,n)&&c.push(n);for(;e.length>u;)r(a,n=e[u++])&&(~i(c,n)||c.push(n));return c}},function(t,e,n){var r=n(80),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(40);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(16).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(99),o=n(82).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,e,n){"use strict";var r=n(106);n.o(r,"Debug")&&n.d(e,"Debug",function(){return r.Debug}),n.o(r,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return r.EventDispatcher}),n.o(r,"JQuery")&&n.d(e,"JQuery",function(){return r.JQuery}),n.o(r,"Riba")&&n.d(e,"Riba",function(){return r.Riba}),n.o(r,"RibaComponent")&&n.d(e,"RibaComponent",function(){return r.RibaComponent}),n.o(r,"Utils")&&n.d(e,"Utils",function(){return r.Utils}),n.o(r,"View")&&n.d(e,"View",function(){return r.View});var o=n(107);n.o(o,"Debug")&&n.d(e,"Debug",function(){return o.Debug}),n.o(o,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return o.EventDispatcher}),n.o(o,"JQuery")&&n.d(e,"JQuery",function(){return o.JQuery}),n.o(o,"Riba")&&n.d(e,"Riba",function(){return o.Riba}),n.o(o,"RibaComponent")&&n.d(e,"RibaComponent",function(){return o.RibaComponent}),n.o(o,"Utils")&&n.d(e,"Utils",function(){return o.Utils}),n.o(o,"View")&&n.d(e,"View",function(){return o.View});var i=n(108);n.o(i,"Debug")&&n.d(e,"Debug",function(){return i.Debug}),n.o(i,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return i.EventDispatcher}),n.o(i,"JQuery")&&n.d(e,"JQuery",function(){return i.JQuery}),n.o(i,"Riba")&&n.d(e,"Riba",function(){return i.Riba}),n.o(i,"RibaComponent")&&n.d(e,"RibaComponent",function(){return i.RibaComponent}),n.o(i,"Utils")&&n.d(e,"Utils",function(){return i.Utils}),n.o(i,"View")&&n.d(e,"View",function(){return i.View});var s=n(109);n.o(s,"Debug")&&n.d(e,"Debug",function(){return s.Debug}),n.o(s,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return s.EventDispatcher}),n.o(s,"JQuery")&&n.d(e,"JQuery",function(){return s.JQuery}),n.o(s,"Riba")&&n.d(e,"Riba",function(){return s.Riba}),n.o(s,"RibaComponent")&&n.d(e,"RibaComponent",function(){return s.RibaComponent}),n.o(s,"Utils")&&n.d(e,"Utils",function(){return s.Utils}),n.o(s,"View")&&n.d(e,"View",function(){return s.View});var a=n(110);n.o(a,"Debug")&&n.d(e,"Debug",function(){return a.Debug}),n.o(a,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return a.EventDispatcher}),n.o(a,"JQuery")&&n.d(e,"JQuery",function(){return a.JQuery}),n.o(a,"Riba")&&n.d(e,"Riba",function(){return a.Riba}),n.o(a,"RibaComponent")&&n.d(e,"RibaComponent",function(){return a.RibaComponent}),n.o(a,"Utils")&&n.d(e,"Utils",function(){return a.Utils}),n.o(a,"View")&&n.d(e,"View",function(){return a.View});var u=n(111);n.o(u,"Debug")&&n.d(e,"Debug",function(){return u.Debug}),n.o(u,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return u.EventDispatcher}),n.o(u,"JQuery")&&n.d(e,"JQuery",function(){return u.JQuery}),n.o(u,"Riba")&&n.d(e,"Riba",function(){return u.Riba}),n.o(u,"RibaComponent")&&n.d(e,"RibaComponent",function(){return u.RibaComponent}),n.o(u,"Utils")&&n.d(e,"Utils",function(){return u.Utils}),n.o(u,"View")&&n.d(e,"View",function(){return u.View});var c=n(112);n.o(c,"Debug")&&n.d(e,"Debug",function(){return c.Debug}),n.o(c,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return c.EventDispatcher}),n.o(c,"JQuery")&&n.d(e,"JQuery",function(){return c.JQuery}),n.o(c,"Riba")&&n.d(e,"Riba",function(){return c.Riba}),n.o(c,"RibaComponent")&&n.d(e,"RibaComponent",function(){return c.RibaComponent}),n.o(c,"Utils")&&n.d(e,"Utils",function(){return c.Utils}),n.o(c,"View")&&n.d(e,"View",function(){return c.View});var l=n(113);n.o(l,"Debug")&&n.d(e,"Debug",function(){return l.Debug}),n.o(l,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return l.EventDispatcher}),n.o(l,"JQuery")&&n.d(e,"JQuery",function(){return l.JQuery}),n.o(l,"Riba")&&n.d(e,"Riba",function(){return l.Riba}),n.o(l,"RibaComponent")&&n.d(e,"RibaComponent",function(){return l.RibaComponent}),n.o(l,"Utils")&&n.d(e,"Utils",function(){return l.Utils}),n.o(l,"View")&&n.d(e,"View",function(){return l.View});var f=n(114);n.o(f,"Debug")&&n.d(e,"Debug",function(){return f.Debug}),n.o(f,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return f.EventDispatcher}),n.o(f,"JQuery")&&n.d(e,"JQuery",function(){return f.JQuery}),n.o(f,"Riba")&&n.d(e,"Riba",function(){return f.Riba}),n.o(f,"RibaComponent")&&n.d(e,"RibaComponent",function(){return f.RibaComponent}),n.o(f,"Utils")&&n.d(e,"Utils",function(){return f.Utils}),n.o(f,"View")&&n.d(e,"View",function(){return f.View})},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){var n=1e3,r=60*n,o=60*r,i=24*o,s=7*i,a=365.25*i;function u(t,e,n,r){var o=e>=1.5*n;return Math.round(t/n)+" "+r+(o?"s":"")}t.exports=function(t,e){e=e||{};var c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var u=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return u*a;case"weeks":case"week":case"w":return u*s;case"days":case"day":case"d":return u*i;case"hours":case"hour":case"hrs":case"hr":case"h":return u*o;case"minutes":case"minute":case"mins":case"min":case"m":return u*r;case"seconds":case"second":case"secs":case"sec":case"s":return u*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return u;default:return}}(t);if("number"===c&&!1===isNaN(t))return e.long?function(t){var e=Math.abs(t);if(e>=i)return u(t,e,i,"day");if(e>=o)return u(t,e,o,"hour");if(e>=r)return u(t,e,r,"minute");if(e>=n)return u(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=i)return Math.round(t/i)+"d";if(e>=o)return Math.round(t/o)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){var r=n(15),o=n(48),i=n(31),s=n(84),a="["+s+"]",u=RegExp("^"+a+a+"*"),c=RegExp(a+a+"*$"),l=function(t,e,n){var o={},a=i(function(){return!!s[t]()||"​"!="​"[t]()}),u=o[t]=a?e(f):s[t];n&&(o[n]=u),r(r.P+r.F*a,"String",o)},f=l.trim=function(t,e){return t=String(o(t)),1&e&&(t=t.replace(u,"")),2&e&&(t=t.replace(c,"")),t};t.exports=l},function(t,e,n){var r=n(179),o=n(184);t.exports=n(85)?function(t,e,n){return r.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(194)("wks"),o=n(119),i=n(43).Symbol,s="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=s&&i[t]||(s?i:o)("Symbol."+t))}).store=r},function(t,e){},function(t,e,n){"use strict";var r=n(199)(!0);n(123)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){"use strict";var r=n(41),o=n(15),i=n(98),s=n(30),a=n(44),u=n(200),c=n(51),l=n(86),f=n(20)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,n,d,g,m,v){u(n,e,d);var y,b,w,C=function(t){if(!h&&t in T)return T[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},x=e+" Iterator",E="values"==g,k=!1,T=t.prototype,D=T[f]||T["@@iterator"]||g&&T[g],A=D||C(g),O=g?E?C("entries"):A:void 0,S="Array"==e&&T.entries||D;if(S&&(w=l(S.call(new t)))!==Object.prototype&&w.next&&(c(w,x,!0),r||"function"==typeof w[f]||s(w,f,p)),E&&D&&"values"!==D.name&&(k=!0,A=function(){return D.call(this)}),r&&!v||!h&&!k&&T[f]||s(T,f,A),a[e]=A,a[x]=p,g)if(y={values:E?A:C("values"),keys:m?A:C("keys"),entries:O},v)for(b in y)b in T||i(T,b,y[b]);else o(o.P+o.F*(h||k),e,y);return y}},function(t,e,n){n(201);for(var r=n(16),o=n(30),i=n(44),s=n(20)("toStringTag"),a="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),u=0;u<a.length;u++){var c=a[u],l=r[c],f=l&&l.prototype;f&&!f[s]&&o(f,s,c),i[c]=i.Array}},function(t,e,n){var r=n(40),o=n(20)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,s;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?n:i?r(e):"Object"==(s=r(e))&&"function"==typeof e.callee?"Arguments":s}},function(t,e,n){var r=n(21),o=n(33),i=n(20)("species");t.exports=function(t,e){var n,s=r(t).constructor;return void 0===s||null==(n=r(s)[i])?e:o(n)}},function(t,e,n){var r,o,i,s=n(39),a=n(128),u=n(103),c=n(73),l=n(16),f=l.process,h=l.setImmediate,p=l.clearImmediate,d=l.MessageChannel,g=l.Dispatch,m=0,v={},y=function(){var t=+this;if(v.hasOwnProperty(t)){var e=v[t];delete v[t],e()}},b=function(t){y.call(t.data)};h&&p||(h=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return v[++m]=function(){a("function"==typeof t?t:Function(t),e)},r(m),m},p=function(t){delete v[t]},"process"==n(40)(f)?r=function(t){f.nextTick(s(y,t,1))}:g&&g.now?r=function(t){g.now(s(y,t,1))}:d?(i=(o=new d).port2,o.port1.onmessage=b,r=s(i.postMessage,i,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(t){l.postMessage(t+"","*")},l.addEventListener("message",b,!1)):r="onreadystatechange"in c("script")?function(t){u.appendChild(c("script")).onreadystatechange=function(){u.removeChild(this),y.call(t)}}:function(t){setTimeout(s(y,t,1),0)}),t.exports={set:h,clear:p}},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){var r=n(21),o=n(22),i=n(87);t.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;var n=i.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){"use strict";n(132),n(133)},function(t,e){},function(t,e){},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,o=t.indexOf("["),i=t.indexOf("]");-1!=o&&-1!=i&&(t=t.substring(0,o)+t.substring(o,i).replace(/:/g,";")+t.substring(i,t.length));for(var s=n.exec(t||""),a={},u=14;u--;)a[r[u]]=s[u]||"";return-1!=o&&-1!=i&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e,n){(function(e){t.exports=function(t){return n&&e.isBuffer(t)||r&&(t instanceof ArrayBuffer||o(t))};var n="function"==typeof e&&"function"==typeof e.isBuffer,r="function"==typeof ArrayBuffer,o=function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer}}).call(this,n(91).Buffer)},function(t,e,n){var r=n(255),o=n(142),i=n(34),s=n(89),a=n(143),u=n(144),c=n(56)("socket.io-client:manager"),l=n(141),f=n(271),h=Object.prototype.hasOwnProperty;function p(t,e){if(!(this instanceof p))return new p(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=e.parser||s;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}t.exports=p,p.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)h.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},p.prototype.updateSocketIds=function(){for(var t in this.nsps)h.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},p.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},i(p.prototype),p.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},p.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},p.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},p.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},p.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},p.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},p.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},p.prototype.open=p.prototype.connect=function(t,e){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var i=a(n,"open",function(){o.onopen(),t&&t()}),s=a(n,"error",function(e){if(c("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",e),t){var n=new Error("Connection error");n.data=e,t(n)}else o.maybeReconnectOnOpen()});if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u);var l=setTimeout(function(){c("connect attempt timed out after %d",u),i.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",u)},u);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(i),this.subs.push(s),this},p.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(a(t,"data",u(this,"ondata"))),this.subs.push(a(t,"ping",u(this,"onping"))),this.subs.push(a(t,"pong",u(this,"onpong"))),this.subs.push(a(t,"error",u(this,"onerror"))),this.subs.push(a(t,"close",u(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",u(this,"ondecoded")))},p.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},p.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},p.prototype.ondata=function(t){this.decoder.add(t)},p.prototype.ondecoded=function(t){this.emit("packet",t)},p.prototype.onerror=function(t){c("error",t),this.emitAll("error",t)},p.prototype.socket=function(t,e){var n=this.nsps[t];if(!n){n=new o(this,t,e),this.nsps[t]=n;var r=this;n.on("connecting",i),n.on("connect",function(){n.id=r.generateId(t)}),this.autoConnect&&i()}function i(){~l(r.connecting,n)||r.connecting.push(n)}return n},p.prototype.destroy=function(t){var e=l(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},p.prototype.packet=function(t){c("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(n){for(var r=0;r<n.length;r++)e.engine.write(n[r],t.options);e.encoding=!1,e.processPacketQueue()}))},p.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},p.prototype.cleanup=function(){c("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},p.prototype.close=p.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},p.prototype.onclose=function(t){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},p.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();c("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout(function(){t.skipReconnect||(c("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(c("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(c("reconnect success"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(n)}})}},p.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,n){var r=n(92),o=n(258),i=n(267),s=n(268);e.polling=function(t){var e=!1,n=!1,s=!1!==t.jsonp;if("undefined"!=typeof location){var a="https:"===location.protocol,u=location.port;u||(u=a?443:80),e=t.hostname!==location.hostname||u!==t.port,n=t.secure!==a}if(t.xdomain=e,t.xscheme=n,"open"in new r(t)&&!t.forceJSONP)return new o(t);if(!s)throw new Error("JSONP disabled");return new i(t)},e.websocket=s},function(t,e,n){var r=n(93),o=n(57),i=n(35),s=n(58),a=n(140),u=n(59)("engine.io-client:polling");t.exports=l;var c=null!=new(n(92))({xdomain:!1}).responseType;function l(t){var e=t&&t.forceBase64;c&&!e||(this.supportsBinary=!1),r.call(this,t)}s(l,r),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(t){var e=this;function n(){u("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||n()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||n()}))}else n()},l.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(t){var e=this;u("polling got data %s",t);i.decodePayload(t,this.socket.binaryType,function(t,n,r){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},l.prototype.doClose=function(){var t=this;function e(){u("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),e()):(u("transport not open - deferring close"),this.once("open",e))},l.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")};i.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,n)})},l.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(t[this.timestampParam]=a()),this.supportsBinary||t.sid||(t.b64=1),t=o.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(n=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t}},function(t,e,n){(function(e){var r=n(90),o=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),s="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);t.exports=function t(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var o=0,a=n.length;o<a;o++)if(t(n[o]))return!0;return!1}if("function"==typeof e&&e.isBuffer&&e.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||i&&n instanceof Blob||s&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return t(n.toJSON(),!0);for(var u in n)if(Object.prototype.hasOwnProperty.call(n,u)&&t(n[u]))return!0;return!1}}).call(this,n(91).Buffer)},function(t,e,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i=64,s={},a=0,u=0;function c(t){var e="";do{e=o[t%i]+e,t=Math.floor(t/i)}while(t>0);return e}function l(){var t=c(+new Date);return t!==r?(a=0,r=t):t+"."+c(a++)}for(;u<i;u++)s[o[u]]=u;l.encode=c,l.decode=function(t){var e=0;for(u=0;u<t.length;u++)e=e*i+s[t.charAt(u)];return e},t.exports=l},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1}},function(t,e,n){var r=n(89),o=n(34),i=n(270),s=n(143),a=n(144),u=n(56)("socket.io-client:socket"),c=n(57),l=n(139);t.exports=p;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},h=o.prototype.emit;function p(t,e,n){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}o(p.prototype),p.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[s(t,"open",a(this,"onopen")),s(t,"packet",a(this,"onpacket")),s(t,"close",a(this,"onclose"))]}},p.prototype.open=p.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},p.prototype.send=function(){var t=i(arguments);return t.unshift("message"),this.emit.apply(this,t),this},p.prototype.emit=function(t){if(f.hasOwnProperty(t))return h.apply(this,arguments),this;var e=i(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:l(e))?r.BINARY_EVENT:r.EVENT,data:e,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},p.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},p.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",t),this.packet({type:r.CONNECT,query:t})}else this.packet({type:r.CONNECT})},p.prototype.onclose=function(t){u("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},p.prototype.onpacket=function(t){var e=t.nsp===this.nsp,n=t.type===r.ERROR&&"/"===t.nsp;if(e||n)switch(t.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(t);break;case r.ACK:case r.BINARY_ACK:this.onack(t);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",t.data)}},p.prototype.onevent=function(t){var e=t.data||[];u("emitting event %j",e),null!=t.id&&(u("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?h.apply(this,e):this.receiveBuffer.push(e)},p.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var o=i(arguments);u("sending ack %j",o),e.packet({type:l(o)?r.BINARY_ACK:r.ACK,id:t,data:o})}}},p.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(u("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):u("bad ack %s",t.id)},p.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},p.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)h.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},p.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},p.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},p.prototype.close=p.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},p.prototype.compress=function(t){return this.flags.compress=t,this},p.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){t.exports=function(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}},function(t,e){var n=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return e.apply(t,r.concat(n.call(arguments)))}}},function(t,e,n){"use strict";n(66),n(28);var r=n(147),o=n.n(r),i=n(14),s=n.n(i),a=n(5),u=n.n(a),c=n(11),l=n.n(c),f=n(9),h=n.n(f),p=n(4),d=n.n(p),g=n(13),m=n.n(g),v=n(3),y=n.n(v),b=n(0),w=n.n(b),C=n(6),x=n(17),E=n(37),k=n(2),T=n(67),D=n.n(T),A=n(24),O=n.n(A),S=n(148),_=n.n(S);let F=function t(e){if(u()(this,t),window.customElements)return _()(HTMLElement,[],this.constructor)};window.customElements&&(F.prototype=O()(HTMLElement.prototype,{constructor:{value:HTMLElement,configurable:!0,writable:!0}}),D()(F,HTMLElement));let N=function(t){function e(t,n){var r;if(u()(this,e),r=l()(this,h()(e).call(this,t)),w()(y()(y()(r)),"context",void 0),w()(y()(y()(r)),"debug",void 0),w()(y()(y()(r)),"view",void 0),w()(y()(y()(r)),"templateLoaded",!1),w()(y()(y()(r)),"riba",void 0),w()(y()(y()(r)),"el",void 0),w()(y()(y()(r)),"scope",void 0),w()(y()(y()(r)),"autobind",!0),w()(y()(y()(r)),"attributeObserverFallback",void 0),r.context=n,r.debug=Object(C.a)("component:RibaComponent"),r.debug("constructor called",t,n,y()(y()(r))),t)r.el=t;else{if(!window.customElements)throw new Error("element is required on browsers without custom elements support");r.el=y()(y()(r))}return r}return m()(e,t),d()(e,[{key:"bound",get:function(){return!!this.view}}]),d()(e,[{key:"remove",value:function(){this.debug("remove",this.el),this.el&&this.el.parentElement&&(this.el.parentElement.removeChild(this.el),window.customElements||this.disconnectedFallbackCallback())}},{key:"disconnectedFallbackCallback",value:function(){this.disconnectedCallback()}},{key:"requiredAttributes",value:function(){return[]}},{key:"init",value:async function(t){if(this.initAttributeObserver(t),this.checkRequiredAttributes())return this.loadTemplate().then(t=>this.autobind?s.a.resolve(this.bind()):s.a.resolve(null));this.debug("not all required attributes are set to load and bind the template")}},{key:"checkRequiredAttributes",value:function(){let t=!0;return this.requiredAttributes().forEach(e=>{this.scope.hasOwnProperty(e)&&this.scope[e]?this.debug(`Attribute ${e} is defined: ${this.scope[e]}`):(this.debug(`Attribute ${e} not set: ${this.scope[e]}`),t=!1)}),t}},{key:"parseAttribute",value:function(t){let e=t;return"true"===t?e=!0:"false"===t?e=!1:"null"===t?e=null:"undefined"===t?e=void 0:""===t?e=void 0:isNaN(Number(t))?k.a.isJson(t)&&(e=JSON.parse(t)):(e=Number(t))>=o.a&&(e=t),e}},{key:"publish",value:function(t,e,n){this.el.dispatchEvent(new CustomEvent("publish-binder-change:"+t,{detail:{name:t,newValue:e,namespace:null}}))}},{key:"eventHandler",value:function(t){return this.debug("eventHandler",t),function(e,n,r,o){this.call(t,e,n,r.view.models,o)}}},{key:"callFormatterHandler",value:function(t){var e=this;return function(n){t.debug("callFormatterHandler",e,n);for(var r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return n.apply(t,o)}}},{key:"argsFormatterHandler",value:function(t){return this.debug("argsFormatterHandler",t),function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return(n,o,i,s)=>(r.push(n),r.push(o),r.push(i),r.push(s),e.apply(t,r))}}},{key:"connectedCallback",value:function(){this.debug("connectedCallback called")}},{key:"disconnectedCallback",value:function(){this.debug("disconnectedCallback called"),this.view&&this.view.unbind(),this.attributeObserverFallback&&this.attributeObserverFallback.disconnect(),this.el.removeEventListener("binder-changed",this.BinderChangedEventHandler)}},{key:"attributeChangedCallback",value:function(t,e,n,r){n=this.parseAttribute(n),t=k.a.camelCase(t),this.debug("attributeChangedCallback called",t,e,n,r),this.scope&&this.scope[t]&&(e=this.scope[t]),this.scope[t]=n,this.parsedAttributeChangedCallback(t,e,n,r),this.checkRequiredAttributes()?this.loadTemplate().then(t=>this.autobind?this.bind():s.a.resolve(null)):this.debug("not all required attributes are set to load and bind the template")}},{key:"parsedAttributeChangedCallback",value:function(t,e,n,r){this.debug("parsedAttributeChangedCallback called",t,e,n,r)}},{key:"adoptedCallback",value:function(t,e){this.debug("adoptedCallback called",t,e)}},{key:"loadTemplate",value:async function(){return this.templateLoaded?(this.debug("template already loaded"),null):this.checkRequiredAttributes()?s.a.resolve(this.template()).then(t=>(this.debug("template",t),null!==t&&(this.el.innerHTML=t),t)).then(t=>(this.templateLoaded=!0,t)).catch(t=>(console.error(t),this.templateLoaded=!1,t)):(this.debug("not all required attributes are set to load the template"),null)}},{key:"bind",value:async function(){if(this.bound)this.debug("component already bounded");else{if(this.checkRequiredAttributes())return await this.beforeBind().then(()=>{if(!this.el)throw new Error("this.el is not defined");this.riba=new E.a;const t=this.riba.getViewOptions({handler:this.eventHandler(this),formatters:{call:this.callFormatterHandler(this),args:this.argsFormatterHandler(this)}});return this.view=new x.a(Array.prototype.slice.call(this.el.childNodes),this.scope,t),this.scope=this.view.models,this.view.bind(),this.view}).then(t=>this.afterBind()).catch(t=>{console.error(t)}),this.view;this.debug("not all required attributes are set for bind")}}},{key:"unbind",value:async function(){this.view&&(this.view.unbind(),delete this.view)}},{key:"build",value:async function(){this.view&&this.view.build()}},{key:"beforeBind",value:async function(){this.debug("beforeBind",this.bound)}},{key:"afterBind",value:async function(){this.debug("afterBind",this.bound)}},{key:"BinderChangedEventHandler",value:function(t){const e=t.detail;this.attributeChangedCallback(e.name,e.oldValue,e.oldValue,e.namespace)}},{key:"initAttributeObserver",value:function(t){if(window.customElements);else{window.MutationObserver?(this.attributeObserverFallback=new MutationObserver(e=>{e.forEach(e=>{if("attributes"===e.type&&(this.debug("attributes changed",e),e.attributeName&&-1!==t.indexOf(e.attributeName))){const t=this.el.getAttribute(e.attributeName);this.attributeChangedCallback(e.attributeName,e.oldValue,t,e.attributeNamespace)}})}),this.attributeObserverFallback.observe(this.el,{attributes:!0})):this.el.addEventListener("binder-changed",this.BinderChangedEventHandler);const e=this.el.attributes;for(const n in e)if(e.hasOwnProperty(n)){const r=e[n],o=r.nodeName;if(-1!==t.indexOf(o)){const t=r.nodeValue;this.attributeChangedCallback(o,null,t,null)}}}}}]),e}(F);w()(N,"tagName",void 0),n.d(e,"a",function(){return N})},function(t,e,n){var r;!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,o){"use strict";var i=[],s=n.document,a=Object.getPrototypeOf,u=i.slice,c=i.concat,l=i.push,f=i.indexOf,h={},p=h.toString,d=h.hasOwnProperty,g=d.toString,m=g.call(Object),v={},y=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},b=function(t){return null!=t&&t===t.window},w={type:!0,src:!0,noModule:!0};function C(t,e,n){var r,o=(e=e||s).createElement("script");if(o.text=t,n)for(r in w)n[r]&&(o[r]=n[r]);e.head.appendChild(o).parentNode.removeChild(o)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?h[p.call(t)]||"object":typeof t}var E=function(t,e){return new E.fn.init(t,e)},k=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function T(t){var e=!!t&&"length"in t&&t.length,n=x(t);return!y(t)&&!b(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}E.fn=E.prototype={jquery:"3.3.1",constructor:E,length:0,toArray:function(){return u.call(this)},get:function(t){return null==t?u.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=E.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return E.each(this,t)},map:function(t){return this.pushStack(E.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:i.sort,splice:i.splice},E.extend=E.fn.extend=function(){var t,e,n,r,o,i,s=arguments[0]||{},a=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||y(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],s!==(r=t[e])&&(c&&r&&(E.isPlainObject(r)||(o=Array.isArray(r)))?(o?(o=!1,i=n&&Array.isArray(n)?n:[]):i=n&&E.isPlainObject(n)?n:{},s[e]=E.extend(c,i,r)):void 0!==r&&(s[e]=r));return s},E.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==p.call(t))&&(!(e=a(t))||"function"==typeof(n=d.call(e,"constructor")&&e.constructor)&&g.call(n)===m)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t){C(t)},each:function(t,e){var n,r=0;if(T(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(k,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(T(Object(t))?E.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:f.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,o=t.length;r<n;r++)t[o++]=e[r];return t.length=o,t},grep:function(t,e,n){for(var r=[],o=0,i=t.length,s=!n;o<i;o++)!e(t[o],o)!==s&&r.push(t[o]);return r},map:function(t,e,n){var r,o,i=0,s=[];if(T(t))for(r=t.length;i<r;i++)null!=(o=e(t[i],i,n))&&s.push(o);else for(i in t)null!=(o=e(t[i],i,n))&&s.push(o);return c.apply([],s)},guid:1,support:v}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=i[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){h["[object "+e+"]"]=e.toLowerCase()});var D=function(t){var e,n,r,o,i,s,a,u,c,l,f,h,p,d,g,m,v,y,b,w="sizzle"+1*new Date,C=t.document,x=0,E=0,k=st(),T=st(),D=st(),A=function(t,e){return t===e&&(f=!0),0},O={}.hasOwnProperty,S=[],_=S.pop,F=S.push,N=S.push,P=S.slice,j=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",B="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+L+"*\\]",I=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+B+")*)|.*)\\)|)",U=new RegExp(L+"+","g"),H=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),q=new RegExp("^"+L+"*,"+L+"*"),$=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),W=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),Y=new RegExp(I),J=new RegExp("^"+M+"$"),V={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+B),PSEUDO:new RegExp("^"+I),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Q=/^h\d$/i,z=/^[^{]+\{\s*\[native \w/,G=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),tt=function(t,e,n){var r="0x"+e-65536;return r!=r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,nt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=function(){h()},ot=yt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{N.apply(S=P.call(C.childNodes),C.childNodes),S[C.childNodes.length].nodeType}catch(t){N={apply:S.length?function(t,e){F.apply(t,P.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}function it(t,e,r,o){var i,a,c,l,f,d,v,y=e&&e.ownerDocument,x=e?e.nodeType:9;if(r=r||[],"string"!=typeof t||!t||1!==x&&9!==x&&11!==x)return r;if(!o&&((e?e.ownerDocument||e:C)!==p&&h(e),e=e||p,g)){if(11!==x&&(f=G.exec(t)))if(i=f[1]){if(9===x){if(!(c=e.getElementById(i)))return r;if(c.id===i)return r.push(c),r}else if(y&&(c=y.getElementById(i))&&b(e,c)&&c.id===i)return r.push(c),r}else{if(f[2])return N.apply(r,e.getElementsByTagName(t)),r;if((i=f[3])&&n.getElementsByClassName&&e.getElementsByClassName)return N.apply(r,e.getElementsByClassName(i)),r}if(n.qsa&&!D[t+" "]&&(!m||!m.test(t))){if(1!==x)y=e,v=t;else if("object"!==e.nodeName.toLowerCase()){for((l=e.getAttribute("id"))?l=l.replace(et,nt):e.setAttribute("id",l=w),a=(d=s(t)).length;a--;)d[a]="#"+l+" "+vt(d[a]);v=d.join(","),y=K.test(t)&&gt(e.parentNode)||e}if(v)try{return N.apply(r,y.querySelectorAll(v)),r}catch(t){}finally{l===w&&e.removeAttribute("id")}}}return u(t.replace(H,"$1"),e,r,o)}function st(){var t=[];return function e(n,o){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=o}}function at(t){return t[w]=!0,t}function ut(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ct(t,e){for(var n=t.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=e}function lt(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ft(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ht(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function pt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ot(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function dt(t){return at(function(e){return e=+e,at(function(n,r){for(var o,i=t([],n.length,e),s=i.length;s--;)n[o=i[s]]&&(n[o]=!(r[o]=n[o]))})})}function gt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=it.support={},i=it.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},h=it.setDocument=function(t){var e,o,s=t?t.ownerDocument||t:C;return s!==p&&9===s.nodeType&&s.documentElement?(d=(p=s).documentElement,g=!i(p),C!==p&&(o=p.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",rt,!1):o.attachEvent&&o.attachEvent("onunload",rt)),n.attributes=ut(function(t){return t.className="i",!t.getAttribute("className")}),n.getElementsByTagName=ut(function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length}),n.getElementsByClassName=z.test(p.getElementsByClassName),n.getById=ut(function(t){return d.appendChild(t).id=w,!p.getElementsByName||!p.getElementsByName(w).length}),n.getById?(r.filter.ID=function(t){var e=t.replace(Z,tt);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(Z,tt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,r,o,i=e.getElementById(t);if(i){if((n=i.getAttributeNode("id"))&&n.value===t)return[i];for(o=e.getElementsByName(t),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===t)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],o=0,i=e.getElementsByTagName(t);if("*"===t){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},v=[],m=[],(n.qsa=z.test(p.querySelectorAll))&&(ut(function(t){d.appendChild(t).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+L+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+L+"*(?:value|"+R+")"),t.querySelectorAll("[id~="+w+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+w+"+*").length||m.push(".#.+[+~]")}),ut(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+L+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),d.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=z.test(y=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ut(function(t){n.disconnectedMatch=y.call(t,"*"),y.call(t,"[s!='']:x"),v.push("!=",I)}),m=m.length&&new RegExp(m.join("|")),v=v.length&&new RegExp(v.join("|")),e=z.test(d.compareDocumentPosition),b=e||z.test(d.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},A=e?function(t,e){if(t===e)return f=!0,0;var r=!t.compareDocumentPosition-!e.compareDocumentPosition;return r||(1&(r=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===r?t===p||t.ownerDocument===C&&b(C,t)?-1:e===p||e.ownerDocument===C&&b(C,e)?1:l?j(l,t)-j(l,e):0:4&r?-1:1)}:function(t,e){if(t===e)return f=!0,0;var n,r=0,o=t.parentNode,i=e.parentNode,s=[t],a=[e];if(!o||!i)return t===p?-1:e===p?1:o?-1:i?1:l?j(l,t)-j(l,e):0;if(o===i)return lt(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?lt(s[r],a[r]):s[r]===C?-1:a[r]===C?1:0},p):p},it.matches=function(t,e){return it(t,null,null,e)},it.matchesSelector=function(t,e){if((t.ownerDocument||t)!==p&&h(t),e=e.replace(W,"='$1']"),n.matchesSelector&&g&&!D[e+" "]&&(!v||!v.test(e))&&(!m||!m.test(e)))try{var r=y.call(t,e);if(r||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){}return it(e,p,null,[t]).length>0},it.contains=function(t,e){return(t.ownerDocument||t)!==p&&h(t),b(t,e)},it.attr=function(t,e){(t.ownerDocument||t)!==p&&h(t);var o=r.attrHandle[e.toLowerCase()],i=o&&O.call(r.attrHandle,e.toLowerCase())?o(t,e,!g):void 0;return void 0!==i?i:n.attributes||!g?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},it.escape=function(t){return(t+"").replace(et,nt)},it.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},it.uniqueSort=function(t){var e,r=[],o=0,i=0;if(f=!n.detectDuplicates,l=!n.sortStable&&t.slice(0),t.sort(A),f){for(;e=t[i++];)e===t[i]&&(o=r.push(i));for(;o--;)t.splice(r[o],1)}return l=null,t},o=it.getText=function(t){var e,n="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=o(t)}else if(3===i||4===i)return t.nodeValue}else for(;e=t[r++];)n+=o(e);return n},(r=it.selectors={cacheLength:50,createPseudo:at,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(Z,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(Z,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||it.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&it.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return V.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&Y.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(Z,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=k[t+" "];return e||(e=new RegExp("(^|"+L+")"+t+"("+L+"|$)"))&&k(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(r){var o=it.attr(r,t);return null==o?"!="===e:!e||(o+="","="===e?o===n:"!="===e?o!==n:"^="===e?n&&0===o.indexOf(n):"*="===e?n&&o.indexOf(n)>-1:"$="===e?n&&o.slice(-n.length)===n:"~="===e?(" "+o.replace(U," ")+" ").indexOf(n)>-1:"|="===e&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,o){var i="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===r&&0===o?function(t){return!!t.parentNode}:function(e,n,u){var c,l,f,h,p,d,g=i!==s?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!u&&!a,b=!1;if(m){if(i){for(;g;){for(h=e;h=h[g];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;d=g="only"===t&&!d&&"nextSibling"}return!0}if(d=[s?m.firstChild:m.lastChild],s&&y){for(b=(p=(c=(l=(f=(h=m)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===x&&c[1])&&c[2],h=p&&m.childNodes[p];h=++p&&h&&h[g]||(b=p=0)||d.pop();)if(1===h.nodeType&&++b&&h===e){l[t]=[x,p,b];break}}else if(y&&(b=p=(c=(l=(f=(h=e)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===x&&c[1]),!1===b)for(;(h=++p&&h&&h[g]||(b=p=0)||d.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++b||(y&&((l=(f=h[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]=[x,b]),h!==e)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(t,e){var n,o=r.pseudos[t]||r.setFilters[t.toLowerCase()]||it.error("unsupported pseudo: "+t);return o[w]?o(e):o.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,n){for(var r,i=o(t,e),s=i.length;s--;)t[r=j(t,i[s])]=!(n[r]=i[s])}):function(t){return o(t,0,n)}):o}},pseudos:{not:at(function(t){var e=[],n=[],r=a(t.replace(H,"$1"));return r[w]?at(function(t,e,n,o){for(var i,s=r(t,null,o,[]),a=t.length;a--;)(i=s[a])&&(t[a]=!(e[a]=i))}):function(t,o,i){return e[0]=t,r(e,null,i,n),e[0]=null,!n.pop()}}),has:at(function(t){return function(e){return it(t,e).length>0}}),contains:at(function(t){return t=t.replace(Z,tt),function(e){return(e.textContent||e.innerText||o(e)).indexOf(t)>-1}}),lang:at(function(t){return J.test(t||"")||it.error("unsupported lang: "+t),t=t.replace(Z,tt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===d},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:pt(!1),disabled:pt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return Q.test(t.nodeName)},input:function(t){return X.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:dt(function(){return[0]}),last:dt(function(t,e){return[e-1]}),eq:dt(function(t,e,n){return[n<0?n+e:n]}),even:dt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:dt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:dt(function(t,e,n){for(var r=n<0?n+e:n;--r>=0;)t.push(r);return t}),gt:dt(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=ft(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=ht(e);function mt(){}function vt(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function yt(t,e,n){var r=e.dir,o=e.next,i=o||r,s=n&&"parentNode"===i,a=E++;return e.first?function(e,n,o){for(;e=e[r];)if(1===e.nodeType||s)return t(e,n,o);return!1}:function(e,n,u){var c,l,f,h=[x,a];if(u){for(;e=e[r];)if((1===e.nodeType||s)&&t(e,n,u))return!0}else for(;e=e[r];)if(1===e.nodeType||s)if(l=(f=e[w]||(e[w]={}))[e.uniqueID]||(f[e.uniqueID]={}),o&&o===e.nodeName.toLowerCase())e=e[r]||e;else{if((c=l[i])&&c[0]===x&&c[1]===a)return h[2]=c[2];if(l[i]=h,h[2]=t(e,n,u))return!0}return!1}}function bt(t){return t.length>1?function(e,n,r){for(var o=t.length;o--;)if(!t[o](e,n,r))return!1;return!0}:t[0]}function wt(t,e,n,r,o){for(var i,s=[],a=0,u=t.length,c=null!=e;a<u;a++)(i=t[a])&&(n&&!n(i,r,o)||(s.push(i),c&&e.push(a)));return s}function Ct(t,e,n,r,o,i){return r&&!r[w]&&(r=Ct(r)),o&&!o[w]&&(o=Ct(o,i)),at(function(i,s,a,u){var c,l,f,h=[],p=[],d=s.length,g=i||function(t,e,n){for(var r=0,o=e.length;r<o;r++)it(t,e[r],n);return n}(e||"*",a.nodeType?[a]:a,[]),m=!t||!i&&e?g:wt(g,h,t,a,u),v=n?o||(i?t:d||r)?[]:s:m;if(n&&n(m,v,a,u),r)for(c=wt(v,p),r(c,[],a,u),l=c.length;l--;)(f=c[l])&&(v[p[l]]=!(m[p[l]]=f));if(i){if(o||t){if(o){for(c=[],l=v.length;l--;)(f=v[l])&&c.push(m[l]=f);o(null,v=[],c,u)}for(l=v.length;l--;)(f=v[l])&&(c=o?j(i,f):h[l])>-1&&(i[c]=!(s[c]=f))}}else v=wt(v===s?v.splice(d,v.length):v),o?o(null,s,v,u):N.apply(s,v)})}function xt(t){for(var e,n,o,i=t.length,s=r.relative[t[0].type],a=s||r.relative[" "],u=s?1:0,l=yt(function(t){return t===e},a,!0),f=yt(function(t){return j(e,t)>-1},a,!0),h=[function(t,n,r){var o=!s&&(r||n!==c)||((e=n).nodeType?l(t,n,r):f(t,n,r));return e=null,o}];u<i;u++)if(n=r.relative[t[u].type])h=[yt(bt(h),n)];else{if((n=r.filter[t[u].type].apply(null,t[u].matches))[w]){for(o=++u;o<i&&!r.relative[t[o].type];o++);return Ct(u>1&&bt(h),u>1&&vt(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(H,"$1"),n,u<o&&xt(t.slice(u,o)),o<i&&xt(t=t.slice(o)),o<i&&vt(t))}h.push(n)}return bt(h)}return mt.prototype=r.filters=r.pseudos,r.setFilters=new mt,s=it.tokenize=function(t,e){var n,o,i,s,a,u,c,l=T[t+" "];if(l)return e?0:l.slice(0);for(a=t,u=[],c=r.preFilter;a;){for(s in n&&!(o=q.exec(a))||(o&&(a=a.slice(o[0].length)||a),u.push(i=[])),n=!1,(o=$.exec(a))&&(n=o.shift(),i.push({value:n,type:o[0].replace(H," ")}),a=a.slice(n.length)),r.filter)!(o=V[s].exec(a))||c[s]&&!(o=c[s](o))||(n=o.shift(),i.push({value:n,type:s,matches:o}),a=a.slice(n.length));if(!n)break}return e?a.length:a?it.error(t):T(t,u).slice(0)},a=it.compile=function(t,e){var n,o=[],i=[],a=D[t+" "];if(!a){for(e||(e=s(t)),n=e.length;n--;)(a=xt(e[n]))[w]?o.push(a):i.push(a);(a=D(t,function(t,e){var n=e.length>0,o=t.length>0,i=function(i,s,a,u,l){var f,d,m,v=0,y="0",b=i&&[],w=[],C=c,E=i||o&&r.find.TAG("*",l),k=x+=null==C?1:Math.random()||.1,T=E.length;for(l&&(c=s===p||s||l);y!==T&&null!=(f=E[y]);y++){if(o&&f){for(d=0,s||f.ownerDocument===p||(h(f),a=!g);m=t[d++];)if(m(f,s||p,a)){u.push(f);break}l&&(x=k)}n&&((f=!m&&f)&&v--,i&&b.push(f))}if(v+=y,n&&y!==v){for(d=0;m=e[d++];)m(b,w,s,a);if(i){if(v>0)for(;y--;)b[y]||w[y]||(w[y]=_.call(u));w=wt(w)}N.apply(u,w),l&&!i&&w.length>0&&v+e.length>1&&it.uniqueSort(u)}return l&&(x=k,c=C),b};return n?at(i):i}(i,o))).selector=t}return a},u=it.select=function(t,e,n,o){var i,u,c,l,f,h="function"==typeof t&&t,p=!o&&s(t=h.selector||t);if(n=n||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===e.nodeType&&g&&r.relative[u[1].type]){if(!(e=(r.find.ID(c.matches[0].replace(Z,tt),e)||[])[0]))return n;h&&(e=e.parentNode),t=t.slice(u.shift().value.length)}for(i=V.needsContext.test(t)?0:u.length;i--&&(c=u[i],!r.relative[l=c.type]);)if((f=r.find[l])&&(o=f(c.matches[0].replace(Z,tt),K.test(u[0].type)&&gt(e.parentNode)||e))){if(u.splice(i,1),!(t=o.length&&vt(u)))return N.apply(n,o),n;break}}return(h||a(t,p))(o,e,!g,n,!e||K.test(t)&&gt(e.parentNode)||e),n},n.sortStable=w.split("").sort(A).join("")===w,n.detectDuplicates=!!f,h(),n.sortDetached=ut(function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))}),ut(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ct("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),n.attributes&&ut(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ct("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),ut(function(t){return null==t.getAttribute("disabled")})||ct(R,function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),it}(n);E.find=D,E.expr=D.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=D.uniqueSort,E.text=D.getText,E.isXMLDoc=D.isXML,E.contains=D.contains,E.escapeSelector=D.escape;var A=function(t,e,n){for(var r=[],o=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&E(t).is(n))break;r.push(t)}return r},O=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},S=E.expr.match.needsContext;function _(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var F=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(t,e,n){return y(e)?E.grep(t,function(t,r){return!!e.call(t,r,t)!==n}):e.nodeType?E.grep(t,function(t){return t===e!==n}):"string"!=typeof e?E.grep(t,function(t){return f.call(e,t)>-1!==n}):E.filter(e,t,n)}E.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?E.find.matchesSelector(r,t)?[r]:[]:E.find.matches(t,E.grep(e,function(t){return 1===t.nodeType}))},E.fn.extend({find:function(t){var e,n,r=this.length,o=this;if("string"!=typeof t)return this.pushStack(E(t).filter(function(){for(e=0;e<r;e++)if(E.contains(o[e],this))return!0}));for(n=this.pushStack([]),e=0;e<r;e++)E.find(t,o[e],n);return r>1?E.uniqueSort(n):n},filter:function(t){return this.pushStack(N(this,t||[],!1))},not:function(t){return this.pushStack(N(this,t||[],!0))},is:function(t){return!!N(this,"string"==typeof t&&S.test(t)?E(t):t||[],!1).length}});var P,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(t,e,n){var r,o;if(!t)return this;if(n=n||P,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:j.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof E?e[0]:e,E.merge(this,E.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:s,!0)),F.test(r[1])&&E.isPlainObject(e))for(r in e)y(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(o=s.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):y(t)?void 0!==n.ready?n.ready(t):t(E):E.makeArray(t,this)}).prototype=E.fn,P=E(s);var R=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function M(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}E.fn.extend({has:function(t){var e=E(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(E.contains(this,e[t]))return!0})},closest:function(t,e){var n,r=0,o=this.length,i=[],s="string"!=typeof t&&E(t);if(!S.test(t))for(;r<o;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,t))){i.push(n);break}return this.pushStack(i.length>1?E.uniqueSort(i):i)},index:function(t){return t?"string"==typeof t?f.call(E(t),this[0]):f.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),E.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return A(t,"parentNode")},parentsUntil:function(t,e,n){return A(t,"parentNode",n)},next:function(t){return M(t,"nextSibling")},prev:function(t){return M(t,"previousSibling")},nextAll:function(t){return A(t,"nextSibling")},prevAll:function(t){return A(t,"previousSibling")},nextUntil:function(t,e,n){return A(t,"nextSibling",n)},prevUntil:function(t,e,n){return A(t,"previousSibling",n)},siblings:function(t){return O((t.parentNode||{}).firstChild,t)},children:function(t){return O(t.firstChild)},contents:function(t){return _(t,"iframe")?t.contentDocument:(_(t,"template")&&(t=t.content||t),E.merge([],t.childNodes))}},function(t,e){E.fn[t]=function(n,r){var o=E.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=E.filter(r,o)),this.length>1&&(L[t]||E.uniqueSort(o),R.test(t)&&o.reverse()),this.pushStack(o)}});var B=/[^\x20\t\r\n\f]+/g;function I(t){return t}function U(t){throw t}function H(t,e,n,r){var o;try{t&&y(o=t.promise)?o.call(t).done(e).fail(n):t&&y(o=t.then)?o.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}E.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return E.each(t.match(B)||[],function(t,n){e[n]=!0}),e}(t):E.extend({},t);var e,n,r,o,i=[],s=[],a=-1,u=function(){for(o=o||t.once,r=e=!0;s.length;a=-1)for(n=s.shift();++a<i.length;)!1===i[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=i.length,n=!1);t.memory||(n=!1),e=!1,o&&(i=n?[]:"")},c={add:function(){return i&&(n&&!e&&(a=i.length-1,s.push(n)),function e(n){E.each(n,function(n,r){y(r)?t.unique&&c.has(r)||i.push(r):r&&r.length&&"string"!==x(r)&&e(r)})}(arguments),n&&!e&&u()),this},remove:function(){return E.each(arguments,function(t,e){for(var n;(n=E.inArray(e,i,n))>-1;)i.splice(n,1),n<=a&&a--}),this},has:function(t){return t?E.inArray(t,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=s=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=s=[],n||e||(i=n=""),this},locked:function(){return!!o},fireWith:function(t,n){return o||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},E.extend({Deferred:function(t){var e=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(t){return o.then(null,t)},pipe:function(){var t=arguments;return E.Deferred(function(n){E.each(e,function(e,r){var o=y(t[r[4]])&&t[r[4]];i[r[1]](function(){var t=o&&o.apply(this,arguments);t&&y(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[t]:arguments)})}),t=null}).promise()},then:function(t,r,o){var i=0;function s(t,e,r,o){return function(){var a=this,u=arguments,c=function(){var n,c;if(!(t<i)){if((n=r.apply(a,u))===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(c)?o?c.call(n,s(i,e,I,o),s(i,e,U,o)):(i++,c.call(n,s(i,e,I,o),s(i,e,U,o),s(i,e,I,e.notifyWith))):(r!==I&&(a=void 0,u=[n]),(o||e.resolveWith)(a,u))}},l=o?c:function(){try{c()}catch(n){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(n,l.stackTrace),t+1>=i&&(r!==U&&(a=void 0,u=[n]),e.rejectWith(a,u))}};t?l():(E.Deferred.getStackHook&&(l.stackTrace=E.Deferred.getStackHook()),n.setTimeout(l))}}return E.Deferred(function(n){e[0][3].add(s(0,n,y(o)?o:I,n.notifyWith)),e[1][3].add(s(0,n,y(t)?t:I)),e[2][3].add(s(0,n,y(r)?r:U))}).promise()},promise:function(t){return null!=t?E.extend(t,o):o}},i={};return E.each(e,function(t,n){var s=n[2],a=n[5];o[n[1]]=s.add,a&&s.add(function(){r=a},e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),s.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=s.fireWith}),o.promise(i),t&&t.call(i,i),i},when:function(t){var e=arguments.length,n=e,r=Array(n),o=u.call(arguments),i=E.Deferred(),s=function(t){return function(n){r[t]=this,o[t]=arguments.length>1?u.call(arguments):n,--e||i.resolveWith(r,o)}};if(e<=1&&(H(t,i.done(s(n)).resolve,i.reject,!e),"pending"===i.state()||y(o[n]&&o[n].then)))return i.then();for(;n--;)H(o[n],s(n),i.reject);return i.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&q.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},E.readyException=function(t){n.setTimeout(function(){throw t})};var $=E.Deferred();function W(){s.removeEventListener("DOMContentLoaded",W),n.removeEventListener("load",W),E.ready()}E.fn.ready=function(t){return $.then(t).catch(function(t){E.readyException(t)}),this},E.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==t&&--E.readyWait>0||$.resolveWith(s,[E]))}}),E.ready.then=$.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(E.ready):(s.addEventListener("DOMContentLoaded",W),n.addEventListener("load",W));var Y=function(t,e,n,r,o,i,s){var a=0,u=t.length,c=null==n;if("object"===x(n))for(a in o=!0,n)Y(t,e,a,n[a],!0,i,s);else if(void 0!==r&&(o=!0,y(r)||(s=!0),c&&(s?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(E(t),n)})),e))for(;a<u;a++)e(t[a],n,s?r:r.call(t[a],a,e(t[a],n)));return o?t:c?e.call(t):u?e(t[0],n):i},J=/^-ms-/,V=/-([a-z])/g;function X(t,e){return e.toUpperCase()}function Q(t){return t.replace(J,"ms-").replace(V,X)}var z=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function G(){this.expando=E.expando+G.uid++}G.uid=1,G.prototype={cache:function(t){var e=t[this.expando];return e||(e={},z(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,o=this.cache(t);if("string"==typeof e)o[Q(e)]=n;else for(r in e)o[Q(r)]=e[r];return o},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][Q(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(Q):(e=Q(e))in r?[e]:e.match(B)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||E.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!E.isEmptyObject(e)}};var K=new G,Z=new G,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Z.set(t,e,n)}else n=void 0;return n}E.extend({hasData:function(t){return Z.hasData(t)||K.hasData(t)},data:function(t,e,n){return Z.access(t,e,n)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,n){return K.access(t,e,n)},_removeData:function(t,e){K.remove(t,e)}}),E.fn.extend({data:function(t,e){var n,r,o,i=this[0],s=i&&i.attributes;if(void 0===t){if(this.length&&(o=Z.get(i),1===i.nodeType&&!K.get(i,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=Q(r.slice(5)),nt(i,r,o[r]));K.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each(function(){Z.set(this,t)}):Y(this,function(e){var n;if(i&&void 0===e)return void 0!==(n=Z.get(i,t))?n:void 0!==(n=nt(i,t))?n:void 0;this.each(function(){Z.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Z.remove(this,t)})}}),E.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=K.get(t,e),n&&(!r||Array.isArray(n)?r=K.access(t,e,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=E.queue(t,e),r=n.length,o=n.shift(),i=E._queueHooks(t,e);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===e&&n.unshift("inprogress"),delete i.stop,o.call(t,function(){E.dequeue(t,e)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return K.get(t,n)||K.access(t,n,{empty:E.Callbacks("once memory").add(function(){K.remove(t,[e+"queue",n])})})}}),E.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?E.queue(this[0],t):void 0===e?this:this.each(function(){var n=E.queue(this,t,e);E._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&E.dequeue(this,t)})},dequeue:function(t){return this.each(function(){E.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,o=E.Deferred(),i=this,s=this.length,a=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=K.get(i[s],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),o.promise(e)}});var rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ot=new RegExp("^(?:([+-])=|)("+rt+")([a-z%]*)$","i"),it=["Top","Right","Bottom","Left"],st=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&E.contains(t.ownerDocument,t)&&"none"===E.css(t,"display")},at=function(t,e,n,r){var o,i,s={};for(i in e)s[i]=t.style[i],t.style[i]=e[i];for(i in o=n.apply(t,r||[]),e)t.style[i]=s[i];return o};function ut(t,e,n,r){var o,i,s=20,a=r?function(){return r.cur()}:function(){return E.css(t,e,"")},u=a(),c=n&&n[3]||(E.cssNumber[e]?"":"px"),l=(E.cssNumber[e]||"px"!==c&&+u)&&ot.exec(E.css(t,e));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;s--;)E.style(t,e,l+c),(1-i)*(1-(i=a()/u||.5))<=0&&(s=0),l/=i;l*=2,E.style(t,e,l+c),n=n||[]}return n&&(l=+l||+u||0,o=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=o)),o}var ct={};function lt(t){var e,n=t.ownerDocument,r=t.nodeName,o=ct[r];return o||(e=n.body.appendChild(n.createElement(r)),o=E.css(e,"display"),e.parentNode.removeChild(e),"none"===o&&(o="block"),ct[r]=o,o)}function ft(t,e){for(var n,r,o=[],i=0,s=t.length;i<s;i++)(r=t[i]).style&&(n=r.style.display,e?("none"===n&&(o[i]=K.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&st(r)&&(o[i]=lt(r))):"none"!==n&&(o[i]="none",K.set(r,"display",n)));for(i=0;i<s;i++)null!=o[i]&&(t[i].style.display=o[i]);return t}E.fn.extend({show:function(){return ft(this,!0)},hide:function(){return ft(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){st(this)?E(this).show():E(this).hide()})}});var ht=/^(?:checkbox|radio)$/i,pt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,dt=/^$|^module$|\/(?:java|ecma)script/i,gt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function mt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&_(t,e)?E.merge([t],n):n}function vt(t,e){for(var n=0,r=t.length;n<r;n++)K.set(t[n],"globalEval",!e||K.get(e[n],"globalEval"))}gt.optgroup=gt.option,gt.tbody=gt.tfoot=gt.colgroup=gt.caption=gt.thead,gt.th=gt.td;var yt,bt,wt=/<|&#?\w+;/;function Ct(t,e,n,r,o){for(var i,s,a,u,c,l,f=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if((i=t[p])||0===i)if("object"===x(i))E.merge(h,i.nodeType?[i]:i);else if(wt.test(i)){for(s=s||f.appendChild(e.createElement("div")),a=(pt.exec(i)||["",""])[1].toLowerCase(),u=gt[a]||gt._default,s.innerHTML=u[1]+E.htmlPrefilter(i)+u[2],l=u[0];l--;)s=s.lastChild;E.merge(h,s.childNodes),(s=f.firstChild).textContent=""}else h.push(e.createTextNode(i));for(f.textContent="",p=0;i=h[p++];)if(r&&E.inArray(i,r)>-1)o&&o.push(i);else if(c=E.contains(i.ownerDocument,i),s=mt(f.appendChild(i),"script"),c&&vt(s),n)for(l=0;i=s[l++];)dt.test(i.type||"")&&n.push(i);return f}yt=s.createDocumentFragment().appendChild(s.createElement("div")),(bt=s.createElement("input")).setAttribute("type","radio"),bt.setAttribute("checked","checked"),bt.setAttribute("name","t"),yt.appendChild(bt),v.checkClone=yt.cloneNode(!0).cloneNode(!0).lastChild.checked,yt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!yt.cloneNode(!0).lastChild.defaultValue;var xt=s.documentElement,Et=/^key/,kt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Tt=/^([^.]*)(?:\.(.+)|)/;function Dt(){return!0}function At(){return!1}function Ot(){try{return s.activeElement}catch(t){}}function St(t,e,n,r,o,i){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(r=r||n,n=void 0),e)St(t,a,n,r,e[a],i);return t}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=At;else if(!o)return t;return 1===i&&(s=o,(o=function(t){return E().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=E.guid++)),t.each(function(){E.event.add(this,e,o,r,n)})}E.event={global:{},add:function(t,e,n,r,o){var i,s,a,u,c,l,f,h,p,d,g,m=K.get(t);if(m)for(n.handler&&(n=(i=n).handler,o=i.selector),o&&E.find.matchesSelector(xt,o),n.guid||(n.guid=E.guid++),(u=m.events)||(u=m.events={}),(s=m.handle)||(s=m.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(B)||[""]).length;c--;)p=g=(a=Tt.exec(e[c])||[])[1],d=(a[2]||"").split(".").sort(),p&&(f=E.event.special[p]||{},p=(o?f.delegateType:f.bindType)||p,f=E.event.special[p]||{},l=E.extend({type:p,origType:g,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&E.expr.match.needsContext.test(o),namespace:d.join(".")},i),(h=u[p])||((h=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,d,s)||t.addEventListener&&t.addEventListener(p,s)),f.add&&(f.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),o?h.splice(h.delegateCount++,0,l):h.push(l),E.event.global[p]=!0)},remove:function(t,e,n,r,o){var i,s,a,u,c,l,f,h,p,d,g,m=K.hasData(t)&&K.get(t);if(m&&(u=m.events)){for(c=(e=(e||"").match(B)||[""]).length;c--;)if(p=g=(a=Tt.exec(e[c])||[])[1],d=(a[2]||"").split(".").sort(),p){for(f=E.event.special[p]||{},h=u[p=(r?f.delegateType:f.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=i=h.length;i--;)l=h[i],!o&&g!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(h.splice(i,1),l.selector&&h.delegateCount--,f.remove&&f.remove.call(t,l));s&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,d,m.handle)||E.removeEvent(t,p,m.handle),delete u[p])}else for(p in u)E.event.remove(t,p+e[c],n,r,!0);E.isEmptyObject(u)&&K.remove(t,"handle events")}},dispatch:function(t){var e,n,r,o,i,s,a=E.event.fix(t),u=new Array(arguments.length),c=(K.get(this,"events")||{})[a.type]||[],l=E.event.special[a.type]||{};for(u[0]=a,e=1;e<arguments.length;e++)u[e]=arguments[e];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(s=E.event.handlers.call(this,a,c),e=0;(o=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(i.namespace)||(a.handleObj=i,a.data=i.data,void 0!==(r=((E.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,u))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,r,o,i,s,a=[],u=e.delegateCount,c=t.target;if(u&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(i=[],s={},n=0;n<u;n++)void 0===s[o=(r=e[n]).selector+" "]&&(s[o]=r.needsContext?E(o,this).index(c)>-1:E.find(o,this,null,[c]).length),s[o]&&i.push(r);i.length&&a.push({elem:c,handlers:i})}return c=this,u<e.length&&a.push({elem:c,handlers:e.slice(u)}),a},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:y(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[E.expando]?t:new E.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Ot()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Ot()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&_(this,"input"))return this.click(),!1},_default:function(t){return _(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},E.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},E.Event=function(t,e){if(!(this instanceof E.Event))return new E.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Dt:At,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&E.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:At,isPropagationStopped:At,isImmediatePropagationStopped:At,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Dt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Dt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Dt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Et.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&kt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},E.event.addProp),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){E.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=t.relatedTarget,o=t.handleObj;return r&&(r===this||E.contains(this,r))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),E.fn.extend({on:function(t,e,n,r){return St(this,t,e,n,r)},one:function(t,e,n,r){return St(this,t,e,n,r,1)},off:function(t,e,n){var r,o;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,E(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(o in t)this.off(o,e,t[o]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=At),this.each(function(){E.event.remove(this,t,n,e)})}});var _t=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ft=/<script|<style|<link/i,Nt=/checked\s*(?:[^=]|=\s*.checked.)/i,Pt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function jt(t,e){return _(t,"table")&&_(11!==e.nodeType?e:e.firstChild,"tr")&&E(t).children("tbody")[0]||t}function Rt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Lt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Mt(t,e){var n,r,o,i,s,a,u,c;if(1===e.nodeType){if(K.hasData(t)&&(i=K.access(t),s=K.set(e,i),c=i.events))for(o in delete s.handle,s.events={},c)for(n=0,r=c[o].length;n<r;n++)E.event.add(e,o,c[o][n]);Z.hasData(t)&&(a=Z.access(t),u=E.extend({},a),Z.set(e,u))}}function Bt(t,e,n,r){e=c.apply([],e);var o,i,s,a,u,l,f=0,h=t.length,p=h-1,d=e[0],g=y(d);if(g||h>1&&"string"==typeof d&&!v.checkClone&&Nt.test(d))return t.each(function(o){var i=t.eq(o);g&&(e[0]=d.call(this,o,i.html())),Bt(i,e,n,r)});if(h&&(i=(o=Ct(e,t[0].ownerDocument,!1,t,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(a=(s=E.map(mt(o,"script"),Rt)).length;f<h;f++)u=o,f!==p&&(u=E.clone(u,!0,!0),a&&E.merge(s,mt(u,"script"))),n.call(t[f],u,f);if(a)for(l=s[s.length-1].ownerDocument,E.map(s,Lt),f=0;f<a;f++)u=s[f],dt.test(u.type||"")&&!K.access(u,"globalEval")&&E.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?E._evalUrl&&E._evalUrl(u.src):C(u.textContent.replace(Pt,""),l,u))}return t}function It(t,e,n){for(var r,o=e?E.filter(e,t):t,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||E.cleanData(mt(r)),r.parentNode&&(n&&E.contains(r.ownerDocument,r)&&vt(mt(r,"script")),r.parentNode.removeChild(r));return t}E.extend({htmlPrefilter:function(t){return t.replace(_t,"<$1></$2>")},clone:function(t,e,n){var r,o,i,s,a,u,c,l=t.cloneNode(!0),f=E.contains(t.ownerDocument,t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||E.isXMLDoc(t)))for(s=mt(l),r=0,o=(i=mt(t)).length;r<o;r++)a=i[r],u=s[r],c=void 0,"input"===(c=u.nodeName.toLowerCase())&&ht.test(a.type)?u.checked=a.checked:"input"!==c&&"textarea"!==c||(u.defaultValue=a.defaultValue);if(e)if(n)for(i=i||mt(t),s=s||mt(l),r=0,o=i.length;r<o;r++)Mt(i[r],s[r]);else Mt(t,l);return(s=mt(l,"script")).length>0&&vt(s,!f&&mt(t,"script")),l},cleanData:function(t){for(var e,n,r,o=E.event.special,i=0;void 0!==(n=t[i]);i++)if(z(n)){if(e=n[K.expando]){if(e.events)for(r in e.events)o[r]?E.event.remove(n,r):E.removeEvent(n,r,e.handle);n[K.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(t){return It(this,t,!0)},remove:function(t){return It(this,t)},text:function(t){return Y(this,function(t){return void 0===t?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Bt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||jt(this,t).appendChild(t)})},prepend:function(){return Bt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=jt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Bt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Bt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(E.cleanData(mt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return E.clone(this,t,e)})},html:function(t){return Y(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Ft.test(t)&&!gt[(pt.exec(t)||["",""])[1].toLowerCase()]){t=E.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(E.cleanData(mt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return Bt(this,arguments,function(e){var n=this.parentNode;E.inArray(this,t)<0&&(E.cleanData(mt(this)),n&&n.replaceChild(e,this))},t)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){E.fn[t]=function(t){for(var n,r=[],o=E(t),i=o.length-1,s=0;s<=i;s++)n=s===i?this:this.clone(!0),E(o[s])[e](n),l.apply(r,n.get());return this.pushStack(r)}});var Ut=new RegExp("^("+rt+")(?!px)[a-z%]+$","i"),Ht=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},qt=new RegExp(it.join("|"),"i");function $t(t,e,n){var r,o,i,s,a=t.style;return(n=n||Ht(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||E.contains(t.ownerDocument,t)||(s=E.style(t,e)),!v.pixelBoxStyles()&&Ut.test(s)&&qt.test(e)&&(r=a.width,o=a.minWidth,i=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=o,a.maxWidth=i)),void 0!==s?s+"":s}function Wt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",xt.appendChild(c).appendChild(l);var t=n.getComputedStyle(l);r="1%"!==t.top,u=12===e(t.marginLeft),l.style.right="60%",a=36===e(t.right),o=36===e(t.width),l.style.position="absolute",i=36===l.offsetWidth||"absolute",xt.removeChild(c),l=null}}function e(t){return Math.round(parseFloat(t))}var r,o,i,a,u,c=s.createElement("div"),l=s.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===l.style.backgroundClip,E.extend(v,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),i}}))}();var Yt=/^(none|table(?!-c[ea]).+)/,Jt=/^--/,Vt={position:"absolute",visibility:"hidden",display:"block"},Xt={letterSpacing:"0",fontWeight:"400"},Qt=["Webkit","Moz","ms"],zt=s.createElement("div").style;function Gt(t){var e=E.cssProps[t];return e||(e=E.cssProps[t]=function(t){if(t in zt)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Qt.length;n--;)if((t=Qt[n]+e)in zt)return t}(t)||t),e}function Kt(t,e,n){var r=ot.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function Zt(t,e,n,r,o,i){var s="width"===e?1:0,a=0,u=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(u+=E.css(t,n+it[s],!0,o)),r?("content"===n&&(u-=E.css(t,"padding"+it[s],!0,o)),"margin"!==n&&(u-=E.css(t,"border"+it[s]+"Width",!0,o))):(u+=E.css(t,"padding"+it[s],!0,o),"padding"!==n?u+=E.css(t,"border"+it[s]+"Width",!0,o):a+=E.css(t,"border"+it[s]+"Width",!0,o));return!r&&i>=0&&(u+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-i-u-a-.5))),u}function te(t,e,n){var r=Ht(t),o=$t(t,e,r),i="border-box"===E.css(t,"boxSizing",!1,r),s=i;if(Ut.test(o)){if(!n)return o;o="auto"}return s=s&&(v.boxSizingReliable()||o===t.style[e]),("auto"===o||!parseFloat(o)&&"inline"===E.css(t,"display",!1,r))&&(o=t["offset"+e[0].toUpperCase()+e.slice(1)],s=!0),(o=parseFloat(o)||0)+Zt(t,e,n||(i?"border":"content"),s,r,o)+"px"}function ee(t,e,n,r,o){return new ee.prototype.init(t,e,n,r,o)}E.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=$t(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,i,s,a=Q(e),u=Jt.test(e),c=t.style;if(u||(e=Gt(a)),s=E.cssHooks[e]||E.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(o=s.get(t,!1,r))?o:c[e];"string"===(i=typeof n)&&(o=ot.exec(n))&&o[1]&&(n=ut(t,e,o),i="number"),null!=n&&n==n&&("number"===i&&(n+=o&&o[3]||(E.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,r))||(u?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,r){var o,i,s,a=Q(e);return Jt.test(e)||(e=Gt(a)),(s=E.cssHooks[e]||E.cssHooks[a])&&"get"in s&&(o=s.get(t,!0,n)),void 0===o&&(o=$t(t,e,r)),"normal"===o&&e in Xt&&(o=Xt[e]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),E.each(["height","width"],function(t,e){E.cssHooks[e]={get:function(t,n,r){if(n)return!Yt.test(E.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?te(t,e,r):at(t,Vt,function(){return te(t,e,r)})},set:function(t,n,r){var o,i=Ht(t),s="border-box"===E.css(t,"boxSizing",!1,i),a=r&&Zt(t,e,r,s,i);return s&&v.scrollboxSize()===i.position&&(a-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(i[e])-Zt(t,e,"border",!1,i)-.5)),a&&(o=ot.exec(n))&&"px"!==(o[3]||"px")&&(t.style[e]=n,n=E.css(t,e)),Kt(0,n,a)}}}),E.cssHooks.marginLeft=Wt(v.reliableMarginLeft,function(t,e){if(e)return(parseFloat($t(t,"marginLeft"))||t.getBoundingClientRect().left-at(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(t,e){E.cssHooks[t+e]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[t+it[r]+e]=i[r]||i[r-2]||i[0];return o}},"margin"!==t&&(E.cssHooks[t+e].set=Kt)}),E.fn.extend({css:function(t,e){return Y(this,function(t,e,n){var r,o,i={},s=0;if(Array.isArray(e)){for(r=Ht(t),o=e.length;s<o;s++)i[e[s]]=E.css(t,e[s],!1,r);return i}return void 0!==n?E.style(t,e,n):E.css(t,e)},t,e,arguments.length>1)}}),E.Tween=ee,ee.prototype={constructor:ee,init:function(t,e,n,r,o,i){this.elem=t,this.prop=n,this.easing=o||E.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=i||(E.cssNumber[n]?"":"px")},cur:function(){var t=ee.propHooks[this.prop];return t&&t.get?t.get(this):ee.propHooks._default.get(this)},run:function(t){var e,n=ee.propHooks[this.prop];return this.options.duration?this.pos=e=E.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ee.propHooks._default.set(this),this}},ee.prototype.init.prototype=ee.prototype,ee.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=E.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){E.fx.step[t.prop]?E.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[E.cssProps[t.prop]]&&!E.cssHooks[t.prop]?t.elem[t.prop]=t.now:E.style(t.elem,t.prop,t.now+t.unit)}}},ee.propHooks.scrollTop=ee.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},E.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},E.fx=ee.prototype.init,E.fx.step={};var ne,re,oe=/^(?:toggle|show|hide)$/,ie=/queueHooks$/;function se(){re&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(se):n.setTimeout(se,E.fx.interval),E.fx.tick())}function ae(){return n.setTimeout(function(){ne=void 0}),ne=Date.now()}function ue(t,e){var n,r=0,o={height:t};for(e=e?1:0;r<4;r+=2-e)o["margin"+(n=it[r])]=o["padding"+n]=t;return e&&(o.opacity=o.width=t),o}function ce(t,e,n){for(var r,o=(le.tweeners[e]||[]).concat(le.tweeners["*"]),i=0,s=o.length;i<s;i++)if(r=o[i].call(n,e,t))return r}function le(t,e,n){var r,o,i=0,s=le.prefilters.length,a=E.Deferred().always(function(){delete u.elem}),u=function(){if(o)return!1;for(var e=ne||ae(),n=Math.max(0,c.startTime+c.duration-e),r=1-(n/c.duration||0),i=0,s=c.tweens.length;i<s;i++)c.tweens[i].run(r);return a.notifyWith(t,[c,r,n]),r<1&&s?n:(s||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:e,originalOptions:n,startTime:ne||ae(),duration:n.duration,tweens:[],createTween:function(e,n){var r=E.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(r),r},stop:function(e){var n=0,r=e?c.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),l=c.props;for(!function(t,e){var n,r,o,i,s;for(n in t)if(o=e[r=Q(n)],i=t[n],Array.isArray(i)&&(o=i[1],i=t[n]=i[0]),n!==r&&(t[r]=i,delete t[n]),(s=E.cssHooks[r])&&"expand"in s)for(n in i=s.expand(i),delete t[r],i)n in t||(t[n]=i[n],e[n]=o);else e[r]=o}(l,c.opts.specialEasing);i<s;i++)if(r=le.prefilters[i].call(c,t,l,c.opts))return y(r.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return E.map(l,ce,c),y(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(u,{elem:t,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(le,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ut(n.elem,t,ot.exec(e),n),n}]},tweener:function(t,e){y(t)?(e=t,t=["*"]):t=t.match(B);for(var n,r=0,o=t.length;r<o;r++)n=t[r],le.tweeners[n]=le.tweeners[n]||[],le.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,o,i,s,a,u,c,l,f="width"in e||"height"in e,h=this,p={},d=t.style,g=t.nodeType&&st(t),m=K.get(t,"fxshow");for(r in n.queue||(null==(s=E._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,h.always(function(){h.always(function(){s.unqueued--,E.queue(t,"fx").length||s.empty.fire()})})),e)if(o=e[r],oe.test(o)){if(delete e[r],i=i||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[r])continue;g=!0}p[r]=m&&m[r]||E.style(t,r)}if((u=!E.isEmptyObject(e))||!E.isEmptyObject(p))for(r in f&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(c=m&&m.display)&&(c=K.get(t,"display")),"none"===(l=E.css(t,"display"))&&(c?l=c:(ft([t],!0),c=t.style.display||c,l=E.css(t,"display"),ft([t]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===E.css(t,"float")&&(u||(h.done(function(){d.display=c}),null==c&&(l=d.display,c="none"===l?"":l)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),u=!1,p)u||(m?"hidden"in m&&(g=m.hidden):m=K.access(t,"fxshow",{display:c}),i&&(m.hidden=!g),g&&ft([t],!0),h.done(function(){for(r in g||ft([t]),K.remove(t,"fxshow"),p)E.style(t,r,p[r])})),u=ce(g?m[r]:0,r,h),r in m||(m[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(t,e){e?le.prefilters.unshift(t):le.prefilters.push(t)}}),E.speed=function(t,e,n){var r=t&&"object"==typeof t?E.extend({},t):{complete:n||!n&&e||y(t)&&t,duration:t,easing:n&&e||e&&!y(e)&&e};return E.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in E.fx.speeds?r.duration=E.fx.speeds[r.duration]:r.duration=E.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&E.dequeue(this,r.queue)},r},E.fn.extend({fadeTo:function(t,e,n,r){return this.filter(st).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var o=E.isEmptyObject(t),i=E.speed(e,n,r),s=function(){var e=le(this,E.extend({},t),i);(o||K.get(this,"finish"))&&e.stop(!0)};return s.finish=s,o||!1===i.queue?this.each(s):this.queue(i.queue,s)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,o=null!=t&&t+"queueHooks",i=E.timers,s=K.get(this);if(o)s[o]&&s[o].stop&&r(s[o]);else for(o in s)s[o]&&s[o].stop&&ie.test(o)&&r(s[o]);for(o=i.length;o--;)i[o].elem!==this||null!=t&&i[o].queue!==t||(i[o].anim.stop(n),e=!1,i.splice(o,1));!e&&n||E.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=K.get(this),r=n[t+"queue"],o=n[t+"queueHooks"],i=E.timers,s=r?r.length:0;for(n.finish=!0,E.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),e=i.length;e--;)i[e].elem===this&&i[e].queue===t&&(i[e].anim.stop(!0),i.splice(e,1));for(e=0;e<s;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),E.each(["toggle","show","hide"],function(t,e){var n=E.fn[e];E.fn[e]=function(t,r,o){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(ue(e,!0),t,r,o)}}),E.each({slideDown:ue("show"),slideUp:ue("hide"),slideToggle:ue("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){E.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),E.timers=[],E.fx.tick=function(){var t,e=0,n=E.timers;for(ne=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||E.fx.stop(),ne=void 0},E.fx.timer=function(t){E.timers.push(t),E.fx.start()},E.fx.interval=13,E.fx.start=function(){re||(re=!0,se())},E.fx.stop=function(){re=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(t,e){return t=E.fx&&E.fx.speeds[t]||t,e=e||"fx",this.queue(e,function(e,r){var o=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(o)}})},function(){var t=s.createElement("input"),e=s.createElement("select").appendChild(s.createElement("option"));t.type="checkbox",v.checkOn=""!==t.value,v.optSelected=e.selected,(t=s.createElement("input")).value="t",t.type="radio",v.radioValue="t"===t.value}();var fe,he=E.expr.attrHandle;E.fn.extend({attr:function(t,e){return Y(this,E.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){E.removeAttr(this,t)})}}),E.extend({attr:function(t,e,n){var r,o,i=t.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===t.getAttribute?E.prop(t,e,n):(1===i&&E.isXMLDoc(t)||(o=E.attrHooks[e.toLowerCase()]||(E.expr.match.bool.test(e)?fe:void 0)),void 0!==n?null===n?void E.removeAttr(t,e):o&&"set"in o&&void 0!==(r=o.set(t,n,e))?r:(t.setAttribute(e,n+""),n):o&&"get"in o&&null!==(r=o.get(t,e))?r:null==(r=E.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&_(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,o=e&&e.match(B);if(o&&1===t.nodeType)for(;n=o[r++];)t.removeAttribute(n)}}),fe={set:function(t,e,n){return!1===e?E.removeAttr(t,n):t.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(t,e){var n=he[e]||E.find.attr;he[e]=function(t,e,r){var o,i,s=e.toLowerCase();return r||(i=he[s],he[s]=o,o=null!=n(t,e,r)?s:null,he[s]=i),o}});var pe=/^(?:input|select|textarea|button)$/i,de=/^(?:a|area)$/i;function ge(t){return(t.match(B)||[]).join(" ")}function me(t){return t.getAttribute&&t.getAttribute("class")||""}function ve(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(B)||[]}E.fn.extend({prop:function(t,e){return Y(this,E.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[E.propFix[t]||t]})}}),E.extend({prop:function(t,e,n){var r,o,i=t.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&E.isXMLDoc(t)||(e=E.propFix[e]||e,o=E.propHooks[e]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(t,n,e))?r:t[e]=n:o&&"get"in o&&null!==(r=o.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=E.find.attr(t,"tabindex");return e?parseInt(e,10):pe.test(t.nodeName)||de.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(E.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,r,o,i,s,a,u=0;if(y(t))return this.each(function(e){E(this).addClass(t.call(this,e,me(this)))});if((e=ve(t)).length)for(;n=this[u++];)if(o=me(n),r=1===n.nodeType&&" "+ge(o)+" "){for(s=0;i=e[s++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(a=ge(r))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,r,o,i,s,a,u=0;if(y(t))return this.each(function(e){E(this).removeClass(t.call(this,e,me(this)))});if(!arguments.length)return this.attr("class","");if((e=ve(t)).length)for(;n=this[u++];)if(o=me(n),r=1===n.nodeType&&" "+ge(o)+" "){for(s=0;i=e[s++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(a=ge(r))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t,r="string"===n||Array.isArray(t);return"boolean"==typeof e&&r?e?this.addClass(t):this.removeClass(t):y(t)?this.each(function(n){E(this).toggleClass(t.call(this,n,me(this),e),e)}):this.each(function(){var e,o,i,s;if(r)for(o=0,i=E(this),s=ve(t);e=s[o++];)i.hasClass(e)?i.removeClass(e):i.addClass(e);else void 0!==t&&"boolean"!==n||((e=me(this))&&K.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":K.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+ge(me(n))+" ").indexOf(e)>-1)return!0;return!1}});var ye=/\r/g;E.fn.extend({val:function(t){var e,n,r,o=this[0];return arguments.length?(r=y(t),this.each(function(n){var o;1===this.nodeType&&(null==(o=r?t.call(this,n,E(this).val()):t)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=E.map(o,function(t){return null==t?"":t+""})),(e=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,o,"value")||(this.value=o))})):o?(e=E.valHooks[o.type]||E.valHooks[o.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(ye,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(t){var e=E.find.attr(t,"value");return null!=e?e:ge(E.text(t))}},select:{get:function(t){var e,n,r,o=t.options,i=t.selectedIndex,s="select-one"===t.type,a=s?null:[],u=s?i+1:o.length;for(r=i<0?u:s?i:0;r<u;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!_(n.parentNode,"optgroup"))){if(e=E(n).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var n,r,o=t.options,i=E.makeArray(e),s=o.length;s--;)((r=o[s]).selected=E.inArray(E.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(t.selectedIndex=-1),i}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=E.inArray(E(t).val(),e)>-1}},v.checkOn||(E.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),v.focusin="onfocusin"in n;var be=/^(?:focusinfocus|focusoutblur)$/,we=function(t){t.stopPropagation()};E.extend(E.event,{trigger:function(t,e,r,o){var i,a,u,c,l,f,h,p,g=[r||s],m=d.call(t,"type")?t.type:t,v=d.call(t,"namespace")?t.namespace.split("."):[];if(a=p=u=r=r||s,3!==r.nodeType&&8!==r.nodeType&&!be.test(m+E.event.triggered)&&(m.indexOf(".")>-1&&(v=m.split("."),m=v.shift(),v.sort()),l=m.indexOf(":")<0&&"on"+m,(t=t[E.expando]?t:new E.Event(m,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=v.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),e=null==e?[t]:E.makeArray(e,[t]),h=E.event.special[m]||{},o||!h.trigger||!1!==h.trigger.apply(r,e))){if(!o&&!h.noBubble&&!b(r)){for(c=h.delegateType||m,be.test(c+m)||(a=a.parentNode);a;a=a.parentNode)g.push(a),u=a;u===(r.ownerDocument||s)&&g.push(u.defaultView||u.parentWindow||n)}for(i=0;(a=g[i++])&&!t.isPropagationStopped();)p=a,t.type=i>1?c:h.bindType||m,(f=(K.get(a,"events")||{})[t.type]&&K.get(a,"handle"))&&f.apply(a,e),(f=l&&a[l])&&f.apply&&z(a)&&(t.result=f.apply(a,e),!1===t.result&&t.preventDefault());return t.type=m,o||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(g.pop(),e)||!z(r)||l&&y(r[m])&&!b(r)&&((u=r[l])&&(r[l]=null),E.event.triggered=m,t.isPropagationStopped()&&p.addEventListener(m,we),r[m](),t.isPropagationStopped()&&p.removeEventListener(m,we),E.event.triggered=void 0,u&&(r[l]=u)),t.result}},simulate:function(t,e,n){var r=E.extend(new E.Event,n,{type:t,isSimulated:!0});E.event.trigger(r,null,e)}}),E.fn.extend({trigger:function(t,e){return this.each(function(){E.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return E.event.trigger(t,e,n,!0)}}),v.focusin||E.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){E.event.simulate(e,t.target,E.event.fix(t))};E.event.special[e]={setup:function(){var r=this.ownerDocument||this,o=K.access(r,e);o||r.addEventListener(t,n,!0),K.access(r,e,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=K.access(r,e)-1;o?K.access(r,e,o):(r.removeEventListener(t,n,!0),K.remove(r,e))}}});var Ce=n.location,xe=Date.now(),Ee=/\?/;E.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+t),e};var ke=/\[\]$/,Te=/\r?\n/g,De=/^(?:submit|button|image|reset|file)$/i,Ae=/^(?:input|select|textarea|keygen)/i;function Oe(t,e,n,r){var o;if(Array.isArray(e))E.each(e,function(e,o){n||ke.test(t)?r(t,o):Oe(t+"["+("object"==typeof o&&null!=o?e:"")+"]",o,n,r)});else if(n||"object"!==x(e))r(t,e);else for(o in e)Oe(t+"["+o+"]",e[o],n,r)}E.param=function(t,e){var n,r=[],o=function(t,e){var n=y(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!E.isPlainObject(t))E.each(t,function(){o(this.name,this.value)});else for(n in t)Oe(n,t[n],e,o);return r.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=E.prop(this,"elements");return t?E.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!E(this).is(":disabled")&&Ae.test(this.nodeName)&&!De.test(t)&&(this.checked||!ht.test(t))}).map(function(t,e){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(t){return{name:e.name,value:t.replace(Te,"\r\n")}}):{name:e.name,value:n.replace(Te,"\r\n")}}).get()}});var Se=/%20/g,_e=/#.*$/,Fe=/([?&])_=[^&]*/,Ne=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pe=/^(?:GET|HEAD)$/,je=/^\/\//,Re={},Le={},Me="*/".concat("*"),Be=s.createElement("a");function Ie(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,o=0,i=e.toLowerCase().match(B)||[];if(y(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Ue(t,e,n,r){var o={},i=t===Le;function s(a){var u;return o[a]=!0,E.each(t[a]||[],function(t,a){var c=a(e,n,r);return"string"!=typeof c||i||o[c]?i?!(u=c):void 0:(e.dataTypes.unshift(c),s(c),!1)}),u}return s(e.dataTypes[0])||!o["*"]&&s("*")}function He(t,e){var n,r,o=E.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((o[n]?t:r||(r={}))[n]=e[n]);return r&&E.extend(!0,t,r),t}Be.href=Ce.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ce.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ce.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Me,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?He(He(t,E.ajaxSettings),e):He(E.ajaxSettings,t)},ajaxPrefilter:Ie(Re),ajaxTransport:Ie(Le),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,o,i,a,u,c,l,f,h,p,d=E.ajaxSetup({},e),g=d.context||d,m=d.context&&(g.nodeType||g.jquery)?E(g):E.event,v=E.Deferred(),y=E.Callbacks("once memory"),b=d.statusCode||{},w={},C={},x="canceled",k={readyState:0,getResponseHeader:function(t){var e;if(l){if(!a)for(a={};e=Ne.exec(i);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return l?i:null},setRequestHeader:function(t,e){return null==l&&(t=C[t.toLowerCase()]=C[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==l&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)k.always(t[k.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||x;return r&&r.abort(e),T(0,e),this}};if(v.promise(k),d.url=((t||d.url||Ce.href)+"").replace(je,Ce.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(B)||[""],null==d.crossDomain){c=s.createElement("a");try{c.href=d.url,c.href=c.href,d.crossDomain=Be.protocol+"//"+Be.host!=c.protocol+"//"+c.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=E.param(d.data,d.traditional)),Ue(Re,d,e,k),l)return k;for(h in(f=E.event&&d.global)&&0==E.active++&&E.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Pe.test(d.type),o=d.url.replace(_e,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Se,"+")):(p=d.url.slice(o.length),d.data&&(d.processData||"string"==typeof d.data)&&(o+=(Ee.test(o)?"&":"?")+d.data,delete d.data),!1===d.cache&&(o=o.replace(Fe,"$1"),p=(Ee.test(o)?"&":"?")+"_="+xe+++p),d.url=o+p),d.ifModified&&(E.lastModified[o]&&k.setRequestHeader("If-Modified-Since",E.lastModified[o]),E.etag[o]&&k.setRequestHeader("If-None-Match",E.etag[o])),(d.data&&d.hasContent&&!1!==d.contentType||e.contentType)&&k.setRequestHeader("Content-Type",d.contentType),k.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Me+"; q=0.01":""):d.accepts["*"]),d.headers)k.setRequestHeader(h,d.headers[h]);if(d.beforeSend&&(!1===d.beforeSend.call(g,k,d)||l))return k.abort();if(x="abort",y.add(d.complete),k.done(d.success),k.fail(d.error),r=Ue(Le,d,e,k)){if(k.readyState=1,f&&m.trigger("ajaxSend",[k,d]),l)return k;d.async&&d.timeout>0&&(u=n.setTimeout(function(){k.abort("timeout")},d.timeout));try{l=!1,r.send(w,T)}catch(t){if(l)throw t;T(-1,t)}}else T(-1,"No Transport");function T(t,e,s,a){var c,h,p,w,C,x=e;l||(l=!0,u&&n.clearTimeout(u),r=void 0,i=a||"",k.readyState=t>0?4:0,c=t>=200&&t<300||304===t,s&&(w=function(t,e,n){for(var r,o,i,s,a=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(o in a)if(a[o]&&a[o].test(r)){u.unshift(o);break}if(u[0]in n)i=u[0];else{for(o in n){if(!u[0]||t.converters[o+" "+u[0]]){i=o;break}s||(s=o)}i=i||s}if(i)return i!==u[0]&&u.unshift(i),n[i]}(d,k,s)),w=function(t,e,n,r){var o,i,s,a,u,c={},l=t.dataTypes.slice();if(l[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(i=l.shift();i;)if(t.responseFields[i]&&(n[t.responseFields[i]]=e),!u&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=i,i=l.shift())if("*"===i)i=u;else if("*"!==u&&u!==i){if(!(s=c[u+" "+i]||c["* "+i]))for(o in c)if((a=o.split(" "))[1]===i&&(s=c[u+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[o]:!0!==c[o]&&(i=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+u+" to "+i}}}return{state:"success",data:e}}(d,w,k,c),c?(d.ifModified&&((C=k.getResponseHeader("Last-Modified"))&&(E.lastModified[o]=C),(C=k.getResponseHeader("etag"))&&(E.etag[o]=C)),204===t||"HEAD"===d.type?x="nocontent":304===t?x="notmodified":(x=w.state,h=w.data,c=!(p=w.error))):(p=x,!t&&x||(x="error",t<0&&(t=0))),k.status=t,k.statusText=(e||x)+"",c?v.resolveWith(g,[h,x,k]):v.rejectWith(g,[k,x,p]),k.statusCode(b),b=void 0,f&&m.trigger(c?"ajaxSuccess":"ajaxError",[k,d,c?h:p]),y.fireWith(g,[k,x]),f&&(m.trigger("ajaxComplete",[k,d]),--E.active||E.event.trigger("ajaxStop")))}return k},getJSON:function(t,e,n){return E.get(t,e,n,"json")},getScript:function(t,e){return E.get(t,void 0,e,"script")}}),E.each(["get","post"],function(t,e){E[e]=function(t,n,r,o){return y(n)&&(o=o||r,r=n,n=void 0),E.ajax(E.extend({url:t,type:e,dataType:o,data:n,success:r},E.isPlainObject(t)&&t))}}),E._evalUrl=function(t){return E.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},E.fn.extend({wrapAll:function(t){var e;return this[0]&&(y(t)&&(t=t.call(this[0])),e=E(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return y(t)?this.each(function(e){E(this).wrapInner(t.call(this,e))}):this.each(function(){var e=E(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=y(t);return this.each(function(n){E(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(t){return!E.expr.pseudos.visible(t)},E.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var qe={0:200,1223:204},$e=E.ajaxSettings.xhr();v.cors=!!$e&&"withCredentials"in $e,v.ajax=$e=!!$e,E.ajaxTransport(function(t){var e,r;if(v.cors||$e&&!t.crossDomain)return{send:function(o,i){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];for(s in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)a.setRequestHeader(s,o[s]);e=function(t){return function(){e&&(e=r=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?i(0,"error"):i(a.status,a.statusText):i(qe[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),r=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){e&&r()})},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),E.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return E.globalEval(t),t}}}),E.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),E.ajaxTransport("script",function(t){var e,n;if(t.crossDomain)return{send:function(r,o){e=E("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&o("error"===t.type?404:200,t.type)}),s.head.appendChild(e[0])},abort:function(){n&&n()}}});var We,Ye=[],Je=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ye.pop()||E.expando+"_"+xe++;return this[t]=!0,t}}),E.ajaxPrefilter("json jsonp",function(t,e,r){var o,i,s,a=!1!==t.jsonp&&(Je.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Je.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=y(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Je,"$1"+o):!1!==t.jsonp&&(t.url+=(Ee.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return s||E.error(o+" was not called"),s[0]},t.dataTypes[0]="json",i=n[o],n[o]=function(){s=arguments},r.always(function(){void 0===i?E(n).removeProp(o):n[o]=i,t[o]&&(t.jsonpCallback=e.jsonpCallback,Ye.push(o)),s&&y(i)&&i(s[0]),s=i=void 0}),"script"}),v.createHTMLDocument=((We=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===We.childNodes.length),E.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(v.createHTMLDocument?((r=(e=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,e.head.appendChild(r)):e=s),i=!n&&[],(o=F.exec(t))?[e.createElement(o[1])]:(o=Ct([t],e,i),i&&i.length&&E(i).remove(),E.merge([],o.childNodes)));var r,o,i},E.fn.load=function(t,e,n){var r,o,i,s=this,a=t.indexOf(" ");return a>-1&&(r=ge(t.slice(a)),t=t.slice(0,a)),y(e)?(n=e,e=void 0):e&&"object"==typeof e&&(o="POST"),s.length>0&&E.ajax({url:t,type:o||"GET",dataType:"html",data:e}).done(function(t){i=arguments,s.html(r?E("<div>").append(E.parseHTML(t)).find(r):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,i||[t.responseText,e,t])})}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){E.fn[e]=function(t){return this.on(e,t)}}),E.expr.pseudos.animated=function(t){return E.grep(E.timers,function(e){return t===e.elem}).length},E.offset={setOffset:function(t,e,n){var r,o,i,s,a,u,c=E.css(t,"position"),l=E(t),f={};"static"===c&&(t.style.position="relative"),a=l.offset(),i=E.css(t,"top"),u=E.css(t,"left"),("absolute"===c||"fixed"===c)&&(i+u).indexOf("auto")>-1?(s=(r=l.position()).top,o=r.left):(s=parseFloat(i)||0,o=parseFloat(u)||0),y(e)&&(e=e.call(t,n,E.extend({},a))),null!=e.top&&(f.top=e.top-a.top+s),null!=e.left&&(f.left=e.left-a.left+o),"using"in e?e.using.call(t,f):l.css(f)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],o={top:0,left:0};if("fixed"===E.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===E.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((o=E(t).offset()).top+=E.css(t,"borderTopWidth",!0),o.left+=E.css(t,"borderLeftWidth",!0))}return{top:e.top-o.top-E.css(r,"marginTop",!0),left:e.left-o.left-E.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===E.css(t,"position");)t=t.offsetParent;return t||xt})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;E.fn[t]=function(r){return Y(this,function(t,r,o){var i;if(b(t)?i=t:9===t.nodeType&&(i=t.defaultView),void 0===o)return i?i[e]:t[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):t[r]=o},t,r,arguments.length)}}),E.each(["top","left"],function(t,e){E.cssHooks[e]=Wt(v.pixelPosition,function(t,n){if(n)return n=$t(t,e),Ut.test(n)?E(t).position()[e]+"px":n})}),E.each({Height:"height",Width:"width"},function(t,e){E.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){E.fn[r]=function(o,i){var s=arguments.length&&(n||"boolean"!=typeof o),a=n||(!0===o||!0===i?"margin":"border");return Y(this,function(e,n,o){var i;return b(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+t],i["scroll"+t],e.body["offset"+t],i["offset"+t],i["client"+t])):void 0===o?E.css(e,n,a):E.style(e,n,o,a)},e,s?o:void 0,s)}})}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){E.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),E.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),E.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),E.proxy=function(t,e){var n,r,o;if("string"==typeof e&&(n=t[e],e=t,t=n),y(t))return r=u.call(arguments,2),(o=function(){return t.apply(e||this,r.concat(u.call(arguments)))}).guid=t.guid=t.guid||E.guid++,o},E.holdReady=function(t){t?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=_,E.isFunction=y,E.isWindow=b,E.camelCase=Q,E.type=x,E.now=Date.now,E.isNumeric=function(t){var e=E.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(r=function(){return E}.apply(e,[]))||(t.exports=r);var Ve=n.jQuery,Xe=n.$;return E.noConflict=function(t){return n.$===E&&(n.$=Xe),t&&n.jQuery===E&&(n.jQuery=Ve),E},o||(n.jQuery=n.$=E),E})},function(t,e,n){t.exports=n(224)},function(t,e,n){t.exports=n(240)},function(t,e,n){t.exports=n(243)},function(t,e,n){"use strict";n.d(e,"routerModule",function(){return i});var r=n(69),o=(n(131),n(19));const i={binders:r.a,services:o}},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,o=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(o=r))}),e.splice(o,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(244)(e);const{formatters:o}=t.exports;o.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(42))},function(t,e,n){var r=n(245),o=n(89),i=n(136),s=n(56)("socket.io-client");t.exports=e=u;var a=e.managers={};function u(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,o=r(t),u=o.source,c=o.id,l=o.path,f=a[c]&&l in a[c].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||f?(s("ignoring socket cache for %s",u),n=i(u,e)):(a[c]||(s("new io instance for %s",u),a[c]=i(u,e)),n=a[c]),o.query&&!e.query&&(e.query=o.query),n.socket(o.path,e)}e.protocol=o.protocol,e.connect=u,e.Manager=n(136),e.Socket=n(142)},function(t,e,n){"use strict";var r,o="object"==typeof Reflect?Reflect:null,i=o&&"function"==typeof o.apply?o.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)};r=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};var s=Number.isNaN||function(t){return t!=t};function a(){a.init.call(this)}t.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var u=10;function c(t){return void 0===t._maxListeners?a.defaultMaxListeners:t._maxListeners}function l(t,e,n,r){var o,i,s,a;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(i=t._events)?(i=t._events=Object.create(null),t._eventsCount=0):(void 0!==i.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),i=t._events),s=i[e]),void 0===s)s=i[e]=n,++t._eventsCount;else if("function"==typeof s?s=i[e]=r?[n,s]:[s,n]:r?s.unshift(n):s.push(n),(o=c(t))>0&&s.length>o&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=s.length,a=u,console&&console.warn&&console.warn(a)}return t}function f(t,e,n){var r={fired:!1,wrapFn:void 0,target:t,type:e,listener:n},o=function(){for(var t=[],e=0;e<arguments.length;e++)t.push(arguments[e]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,i(this.listener,this.target,t))}.bind(r);return o.listener=n,r.wrapFn=o,o}function h(t,e,n){var r=t._events;if(void 0===r)return[];var o=r[e];return void 0===o?[]:"function"==typeof o?n?[o.listener||o]:[o]:n?function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(o):d(o,o.length)}function p(t){var e=this._events;if(void 0!==e){var n=e[t];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function d(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t[r];return n}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return u},set:function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");u=t}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||s(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},a.prototype.getMaxListeners=function(){return c(this)},a.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var r="error"===t,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var s;if(e.length>0&&(s=e[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var u=o[t];if(void 0===u)return!1;if("function"==typeof u)i(u,this,e);else{var c=u.length,l=d(u,c);for(n=0;n<c;++n)i(l[n],this,e)}return!0},a.prototype.addListener=function(t,e){return l(this,t,e,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(t,e){return l(this,t,e,!0)},a.prototype.once=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.on(t,f(this,t,e)),this},a.prototype.prependOnceListener=function(t,e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);return this.prependListener(t,f(this,t,e)),this},a.prototype.removeListener=function(t,e){var n,r,o,i,s;if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e);if(void 0===(r=this._events))return this;if(void 0===(n=r[t]))return this;if(n===e||n.listener===e)0==--this._eventsCount?this._events=Object.create(null):(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(o=-1,i=n.length-1;i>=0;i--)if(n[i]===e||n[i].listener===e){s=n[i].listener,o=i;break}if(o<0)return this;0===o?n.shift():function(t,e){for(;e+1<t.length;e++)t[e]=t[e+1];t.pop()}(n,o),1===n.length&&(r[t]=n[0]),void 0!==r.removeListener&&this.emit("removeListener",t,s||e)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(t){var e,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[t]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[t]),this;if(0===arguments.length){var o,i=Object.keys(n);for(r=0;r<i.length;++r)"removeListener"!==(o=i[r])&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(void 0!==e)for(r=e.length-1;r>=0;r--)this.removeListener(t,e[r]);return this},a.prototype.listeners=function(t){return h(this,t,!0)},a.prototype.rawListeners=function(t){return h(this,t,!1)},a.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):p.call(t,e)},a.prototype.listenerCount=p,a.prototype.eventNames=function(){return this._eventsCount>0?r(this._events):[]}},function(t,e,n){n(276);t.exports=function(t){var e="";return e+='<p>hello {message}</p><div class="input-group mb-3"><input class="form-control" type="text" placeholder="Recipient\'s username" aria-label="Recipient\'s username" aria-describedby="button-send" rv-value="message"><div class="input-group-append"><button class="btn btn-outline-secondary" id="button-send" type="button" rv-on-click="send">Button</button></div></div>'}},function(t,e,n){n(156);var r=n(8).Object;t.exports=function(t,e,n){return r.defineProperty(t,e,n)}},function(t,e,n){var r=n(15);r(r.S+r.F*!n(26),"Object",{defineProperty:n(25).f})},function(t,e,n){n(158);var r=n(8).Object;t.exports=function(t,e){return r.getOwnPropertyDescriptor(t,e)}},function(t,e,n){var r=n(32),o=n(49).f;n(76)("getOwnPropertyDescriptor",function(){return function(t,e){return o(r(t),e)}})},function(t,e,n){var r=n(40);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){t.exports=n(161)},function(t,e,n){n(97),t.exports=n(8).Object.getOwnPropertySymbols},function(t,e,n){var r=n(50)("meta"),o=n(22),i=n(27),s=n(25).f,a=0,u=Object.isExtensible||function(){return!0},c=!n(31)(function(){return u(Object.preventExtensions({}))}),l=function(t){s(t,r,{value:{i:"O"+ ++a,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!u(t))return"F";if(!e)return"E";l(t)}return t[r].i},getWeak:function(t,e){if(!i(t,r)){if(!u(t))return!0;if(!e)return!1;l(t)}return t[r].w},onFreeze:function(t){return c&&f.NEED&&u(t)&&!i(t,r)&&l(t),t}}},function(t,e,n){var r=n(52),o=n(101),i=n(75);t.exports=function(t){var e=r(t),n=o.f;if(n)for(var s,a=n(t),u=i.f,c=0;a.length>c;)u.call(t,s=a[c++])&&e.push(s);return e}},function(t,e,n){var r=n(32),o=n(100),i=n(165);t.exports=function(t){return function(e,n,s){var a,u=r(e),c=o(u.length),l=i(s,c);if(t&&n!=n){for(;c>l;)if((a=u[l++])!=a)return!0}else for(;c>l;l++)if((t||l in u)&&u[l]===n)return t||l||0;return!t&&-1}}},function(t,e,n){var r=n(80),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=r(t))<0?o(t+e,0):i(t,e)}},function(t,e,n){var r=n(25),o=n(21),i=n(52);t.exports=n(26)?Object.defineProperties:function(t,e){o(t);for(var n,s=i(e),a=s.length,u=0;a>u;)r.f(t,n=s[u++],e[n]);return t}},function(t,e,n){var r=n(32),o=n(104).f,i={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return s&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return s.slice()}}(t):o(r(t))}},function(t,e,n){n(169),t.exports=n(8).Object.keys},function(t,e,n){var r=n(83),o=n(52);n(76)("keys",function(){return function(t){return o(r(t))}})},function(t,e,n){"use strict";t.exports=function(t){function e(t){for(var e=0,n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){var n;function s(){if(s.enabled){for(var t=arguments.length,e=new Array(t),o=0;o<t;o++)e[o]=arguments[o];var i=s,a=Number(new Date),u=a-(n||a);i.diff=u,i.prev=n,i.curr=a,n=a,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");var c=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,function(t,n){if("%%"===t)return t;c++;var o=r.formatters[n];if("function"==typeof o){var s=e[c];t=o.call(i,s),e.splice(c,1),c--}return t}),r.formatArgs.call(i,e),(i.log||r.log).apply(i,e)}}return s.namespace=t,s.enabled=r.enabled(t),s.useColors=r.useColors(),s.color=e(t),s.destroy=o,s.extend=i,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function o(){var t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function i(t,e){return r(this.namespace+(void 0===e?":":e)+t)}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){r.enable("")},r.enable=function(t){var e;r.save(t),r.names=[],r.skips=[];var n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(e=0;e<o;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){var i=r.instances[e];i.enabled=r.enabled(i.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;var e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(115),Object.keys(t).forEach(function(e){r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e,n){n(172),t.exports=n(8).parseInt},function(t,e,n){var r=n(15),o=n(173);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,e,n){var r=n(16).parseInt,o=n(116).trim,i=n(84),s=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,e){var n=o(String(t),3);return r(n,e>>>0||(s.test(n)?16:10))}:r},function(t,e,n){n(175),t.exports=n(8).Date.now},function(t,e,n){var r=n(15);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){n(177),t.exports=n(54).String.startsWith},function(t,e,n){"use strict";var r=n(178),o=n(189),i=n(191),s="".startsWith;r(r.P+r.F*n(197)("startsWith"),"String",{startsWith:function(t){var e=i(this,t,"startsWith"),n=o(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return s?s.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){var r=n(43),o=n(54),i=n(117),s=n(185),a=n(187),u=function(t,e,n){var c,l,f,h,p=t&u.F,d=t&u.G,g=t&u.S,m=t&u.P,v=t&u.B,y=d?r:g?r[e]||(r[e]={}):(r[e]||{}).prototype,b=d?o:o[e]||(o[e]={}),w=b.prototype||(b.prototype={});for(c in d&&(n=e),n)f=((l=!p&&y&&void 0!==y[c])?y:n)[c],h=v&&l?a(f,r):m&&"function"==typeof f?a(Function.call,f):f,y&&s(y,c,f,t&u.U),b[c]!=f&&i(b,c,h),m&&w[c]!=f&&(w[c]=f)};r.core=o,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e,n){var r=n(180),o=n(181),i=n(183),s=Object.defineProperty;e.f=n(85)?Object.defineProperty:function(t,e,n){if(r(t),e=i(e,!0),r(n),o)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(55);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e,n){t.exports=!n(85)&&!n(118)(function(){return 7!=Object.defineProperty(n(182)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(55),o=n(43).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,n){var r=n(55);t.exports=function(t,e){if(!r(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!r(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!r(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(43),o=n(117),i=n(186),s=n(119)("src"),a=Function.toString,u=(""+a).split("toString");n(54).inspectSource=function(t){return a.call(t)},(t.exports=function(t,e,n,a){var c="function"==typeof n;c&&(i(n,"name")||o(n,"name",e)),t[e]!==n&&(c&&(i(n,s)||o(n,s,t[e]?""+t[e]:u.join(String(e)))),t===r?t[e]=n:a?t[e]?t[e]=n:o(t,e,n):(delete t[e],o(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[s]||a.call(this)})},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(188);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(190),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(192),o=n(196);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(o(t))}},function(t,e,n){var r=n(55),o=n(193),i=n(120)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(54),o=n(43),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(195)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports=!1},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(120)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){n(121),n(122),n(124),n(204),n(215),n(216),t.exports=n(8).Promise},function(t,e,n){var r=n(80),o=n(48);t.exports=function(t){return function(e,n){var i,s,a=String(o(e)),u=r(n),c=a.length;return u<0||u>=c?t?"":void 0:(i=a.charCodeAt(u))<55296||i>56319||u+1===c||(s=a.charCodeAt(u+1))<56320||s>57343?t?a.charAt(u):i:t?a.slice(u,u+2):s-56320+(i-55296<<10)+65536}}},function(t,e,n){"use strict";var r=n(53),o=n(47),i=n(51),s={};n(30)(s,n(20)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(s,{next:o(1,n)}),i(t,e+" Iterator")}},function(t,e,n){"use strict";var r=n(202),o=n(203),i=n(44),s=n(32);t.exports=n(123)(Array,"Array",function(t,e){this._t=s(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){"use strict";var r,o,i,s,a=n(41),u=n(16),c=n(39),l=n(125),f=n(15),h=n(22),p=n(33),d=n(205),g=n(206),m=n(126),v=n(127).set,y=n(210)(),b=n(87),w=n(129),C=n(211),x=n(130),E=u.TypeError,k=u.process,T=k&&k.versions,D=T&&T.v8||"",A=u.Promise,O="process"==l(k),S=function(){},_=o=b.f,F=!!function(){try{var t=A.resolve(1),e=(t.constructor={})[n(20)("species")]=function(t){t(S,S)};return(O||"function"==typeof PromiseRejectionEvent)&&t.then(S)instanceof e&&0!==D.indexOf("6.6")&&-1===C.indexOf("Chrome/66")}catch(t){}}(),N=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},P=function(t,e){if(!t._n){t._n=!0;var n=t._c;y(function(){for(var r=t._v,o=1==t._s,i=0,s=function(e){var n,i,s,a=o?e.ok:e.fail,u=e.resolve,c=e.reject,l=e.domain;try{a?(o||(2==t._h&&L(t),t._h=1),!0===a?n=r:(l&&l.enter(),n=a(r),l&&(l.exit(),s=!0)),n===e.promise?c(E("Promise-chain cycle")):(i=N(n))?i.call(n,u,c):u(n)):c(r)}catch(t){l&&!s&&l.exit(),c(t)}};n.length>i;)s(n[i++]);t._c=[],t._n=!1,e&&!t._h&&j(t)})}},j=function(t){v.call(u,function(){var e,n,r,o=t._v,i=R(t);if(i&&(e=w(function(){O?k.emit("unhandledRejection",o,t):(n=u.onunhandledrejection)?n({promise:t,reason:o}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=O||R(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},R=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){v.call(u,function(){var e;O?k.emit("rejectionHandled",t):(e=u.onrejectionhandled)&&e({promise:t,reason:t._v})})},M=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),P(e,!0))},B=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw E("Promise can't be resolved itself");(e=N(t))?y(function(){var r={_w:n,_d:!1};try{e.call(t,c(B,r,1),c(M,r,1))}catch(t){M.call(r,t)}}):(n._v=t,n._s=1,P(n,!1))}catch(t){M.call({_w:n,_d:!1},t)}}};F||(A=function(t){d(this,A,"Promise","_h"),p(t),r.call(this);try{t(c(B,this,1),c(M,this,1))}catch(t){M.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(212)(A.prototype,{then:function(t,e){var n=_(m(this,A));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=O?k.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&P(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=c(B,t,1),this.reject=c(M,t,1)},b.f=_=function(t){return t===A||t===s?new i(t):o(t)}),f(f.G+f.W+f.F*!F,{Promise:A}),n(51)(A,"Promise"),n(213)("Promise"),s=n(8).Promise,f(f.S+f.F*!F,"Promise",{reject:function(t){var e=_(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(a||!F),"Promise",{resolve:function(t){return x(a&&this===s?A:this,t)}}),f(f.S+f.F*!(F&&n(214)(function(t){A.all(t).catch(S)})),"Promise",{all:function(t){var e=this,n=_(e),r=n.resolve,o=n.reject,i=w(function(){var n=[],i=0,s=1;g(t,!1,function(t){var a=i++,u=!1;n.push(void 0),s++,e.resolve(t).then(function(t){u||(u=!0,n[a]=t,--s||r(n))},o)}),--s||r(n)});return i.e&&o(i.v),n.promise},race:function(t){var e=this,n=_(e),r=n.reject,o=w(function(){g(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){var r=n(39),o=n(207),i=n(208),s=n(21),a=n(100),u=n(209),c={},l={};(e=t.exports=function(t,e,n,f,h){var p,d,g,m,v=h?function(){return t}:u(t),y=r(n,f,e?2:1),b=0;if("function"!=typeof v)throw TypeError(t+" is not iterable!");if(i(v)){for(p=a(t.length);p>b;b++)if((m=e?y(s(d=t[b])[0],d[1]):y(t[b]))===c||m===l)return m}else for(g=v.call(t);!(d=g.next()).done;)if((m=o(g,y,d.value,e))===c||m===l)return m}).BREAK=c,e.RETURN=l},function(t,e,n){var r=n(21);t.exports=function(t,e,n,o){try{return o?e(r(n)[0],n[1]):e(n)}catch(e){var i=t.return;throw void 0!==i&&r(i.call(t)),e}}},function(t,e,n){var r=n(44),o=n(20)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,e,n){var r=n(125),o=n(20)("iterator"),i=n(44);t.exports=n(8).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,e,n){var r=n(16),o=n(127).set,i=r.MutationObserver||r.WebKitMutationObserver,s=r.process,a=r.Promise,u="process"==n(40)(s);t.exports=function(){var t,e,n,c=function(){var r,o;for(u&&(r=s.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(u)n=function(){s.nextTick(c)};else if(!i||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var l=a.resolve(void 0);n=function(){l.then(c)}}else n=function(){o.call(r,c)};else{var f=!0,h=document.createTextNode("");new i(c).observe(h,{characterData:!0}),n=function(){h.data=f=!f}}return function(r){var o={fn:r,next:void 0};e&&(e.next=o),t||(t=o,n()),e=o}}},function(t,e,n){var r=n(16).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){var r=n(30);t.exports=function(t,e,n){for(var o in e)n&&t[o]?t[o]=e[o]:r(t,o,e[o]);return t}},function(t,e,n){"use strict";var r=n(16),o=n(8),i=n(25),s=n(26),a=n(20)("species");t.exports=function(t){var e="function"==typeof o[t]?o[t]:r[t];s&&e&&!e[a]&&i.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r=n(20)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var n=!1;try{var i=[7],s=i[r]();s.next=function(){return{done:n=!0}},i[r]=function(){return s},t(i)}catch(t){}return n}},function(t,e,n){"use strict";var r=n(15),o=n(8),i=n(16),s=n(126),a=n(130);r(r.P+r.R,"Promise",{finally:function(t){var e=s(this,o.Promise||i.Promise),n="function"==typeof t;return this.then(n?function(n){return a(e,t()).then(function(){return n})}:t,n?function(n){return a(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){"use strict";var r=n(15),o=n(87),i=n(129);r(r.S,"Promise",{try:function(t){var e=o.f(this),n=i(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},function(t,e,n){n(218),t.exports=n(8).parseFloat},function(t,e,n){var r=n(15),o=n(219);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,e,n){var r=n(16).parseFloat,o=n(116).trim;t.exports=1/r(n(84)+"-0")!=-1/0?function(t){var e=o(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){n(221),t.exports=n(8).Array.isArray},function(t,e,n){var r=n(15);r(r.S,"Array",{isArray:n(102)})},function(t,e,n){n(223);var r=n(8).Object;t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){var r=n(15);r(r.S,"Object",{create:n(53)})},function(t,e,n){n(225),t.exports=9007199254740991},function(t,e,n){var r=n(15);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(227),o=n(229);function i(t){return(i="function"==typeof o&&"symbol"==typeof r?function(t){return typeof t}:function(t){return t&&"function"==typeof o&&t.constructor===o&&t!==o.prototype?"symbol":typeof t})(t)}function s(e){return"function"==typeof o&&"symbol"===i(r)?t.exports=s=function(t){return i(t)}:t.exports=s=function(t){return t&&"function"==typeof o&&t.constructor===o&&t!==o.prototype?"symbol":i(t)},s(e)}t.exports=s},function(t,e,n){t.exports=n(228)},function(t,e,n){n(122),n(124),t.exports=n(78).f("iterator")},function(t,e,n){t.exports=n(230)},function(t,e,n){n(97),n(121),n(231),n(232),t.exports=n(8).Symbol},function(t,e,n){n(79)("asyncIterator")},function(t,e,n){n(79)("observable")},function(t,e,n){t.exports=n(234)},function(t,e,n){n(235),t.exports=n(8).Object.getPrototypeOf},function(t,e,n){var r=n(83),o=n(86);n(76)("getPrototypeOf",function(){return function(t){return o(r(t))}})},function(t,e,n){n(237),t.exports=n(8).Object.setPrototypeOf},function(t,e,n){var r=n(15);r(r.S,"Object",{setPrototypeOf:n(238).set})},function(t,e,n){var r=n(22),o=n(21),i=function(t,e){if(o(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(39)(Function.call,n(49).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return i(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:i}},function(t,e,n){var r=n(67);function o(e,n){return t.exports=o=r||function(t,e){return t.__proto__=e,t},o(e,n)}t.exports=o},function(t,e,n){n(241),t.exports=n(8).Reflect.construct},function(t,e,n){var r=n(15),o=n(53),i=n(33),s=n(21),a=n(22),u=n(31),c=n(242),l=(n(16).Reflect||{}).construct,f=u(function(){function t(){}return!(l(function(){},[],t)instanceof t)}),h=!u(function(){l(function(){})});r(r.S+r.F*(f||h),"Reflect",{construct:function(t,e){i(t),s(e);var n=arguments.length<3?t:i(arguments[2]);if(h&&!f)return l(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(t,r))}var u=n.prototype,p=o(a(u)?u:Object.prototype),d=Function.apply.call(t,p,e);return a(d)?d:p}})},function(t,e,n){"use strict";var r=n(33),o=n(22),i=n(128),s=[].slice,a={};t.exports=Function.bind||function(t){var e=r(this),n=s.call(arguments,1),u=function(){var r=n.concat(s.call(arguments));return this instanceof u?function(t,e,n){if(!(e in a)){for(var r=[],o=0;o<e;o++)r[o]="a["+o+"]";a[e]=Function("F,a","return new F("+r.join(",")+")")}return a[e](t,n)}(e,r.length,r):i(e,r,t)};return o(e.prototype)&&(u.prototype=e.prototype),u}},function(t,e,n){var r=n(8),o=r.JSON||(r.JSON={stringify:JSON.stringify});t.exports=function(t){return o.stringify.apply(o,arguments)}},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function s(...t){if(!s.enabled)return;const e=s,o=Number(new Date),i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,o)=>{if("%%"===n)return n;a++;const i=r.formatters[o];if("function"==typeof i){const r=t[a];n=i.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return s.namespace=t,s.enabled=r.enabled(t),s.useColors=r.useColors(),s.color=e(t),s.destroy=o,s.extend=i,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function o(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function i(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function s(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){const t=[...r.names.map(s),...r.skips.map(s).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(e=0;e<o;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(115),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e,n){var r=n(134),o=n(56)("socket.io-client:url");t.exports=function(t,e){var n=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(o("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),o("parse %s",t),n=r(t));n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443"));n.path=n.path||"/";var i=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+i+":"+n.port,n.href=n.protocol+"://"+i+(e&&e.port===n.port?"":":"+n.port),n}},function(t,e,n){function r(t){var n;function r(){if(r.enabled){var t=r,o=+new Date,i=o-(n||o);t.diff=i,t.prev=n,t.curr=o,n=o;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=e.formatters[r];if("function"==typeof o){var i=s[u];n=o.call(t,i),s.splice(u,1),u--}return n}),e.formatArgs.call(t,s),(r.log||e.log||console.log.bind(console)).apply(t,s)}}return r.namespace=t,r.enabled=e.enabled(t),r.useColors=e.useColors(),r.color=function(t){var n,r=0;for(n in t)r=(r<<5)-r+t.charCodeAt(n),r|=0;return e.colors[Math.abs(r)%e.colors.length]}(t),r.destroy=o,"function"==typeof e.init&&e.init(r),e.instances.push(r),r}function o(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var r=("string"==typeof t?t:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(t=r[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var i=e.instances[n];i.enabled=e.enabled(i.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(247),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){var n=1e3,r=60*n,o=60*r,i=24*o,s=365.25*i;function a(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}t.exports=function(t,e){e=e||{};var u,c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var a=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*i;case"hours":case"hour":case"hrs":case"hr":case"h":return a*o;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(t);if("number"===c&&!1===isNaN(t))return e.long?a(u=t,i,"day")||a(u,o,"hour")||a(u,r,"minute")||a(u,n,"second")||u+" ms":function(t){if(t>=i)return Math.round(t/i)+"d";if(t>=o)return Math.round(t/o)+"h";if(t>=r)return Math.round(t/r)+"m";if(t>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){(function(r){function o(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG),t}(e=t.exports=n(249)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,r)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=o,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(o())}).call(this,n(42))},function(t,e,n){function r(t){var n;function r(){if(r.enabled){var t=r,o=+new Date,i=o-(n||o);t.diff=i,t.prev=n,t.curr=o,n=o;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=e.formatters[r];if("function"==typeof o){var i=s[u];n=o.call(t,i),s.splice(u,1),u--}return n}),e.formatArgs.call(t,s),(r.log||e.log||console.log.bind(console)).apply(t,s)}}return r.namespace=t,r.enabled=e.enabled(t),r.useColors=e.useColors(),r.color=function(t){var n,r=0;for(n in t)r=(r<<5)-r+t.charCodeAt(n),r|=0;return e.colors[Math.abs(r)%e.colors.length]}(t),r.destroy=o,"function"==typeof e.init&&e.init(r),e.instances.push(r),r}function o(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var r=("string"==typeof t?t:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(t=r[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var i=e.instances[n];i.enabled=e.enabled(i.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(250),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){var n=1e3,r=60*n,o=60*r,i=24*o,s=365.25*i;function a(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}t.exports=function(t,e){e=e||{};var u,c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var a=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*i;case"hours":case"hour":case"hrs":case"hr":case"h":return a*o;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(t);if("number"===c&&!1===isNaN(t))return e.long?a(u=t,i,"day")||a(u,o,"hour")||a(u,r,"minute")||a(u,n,"second")||u+" ms":function(t){if(t>=i)return Math.round(t/i)+"d";if(t>=o)return Math.round(t/o)+"h";if(t>=r)return Math.round(t/r)+"m";if(t>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){var r=n(90),o=n(135),i=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);e.deconstructPacket=function(t){var e=[],n=t.data,i=t;return i.data=function t(e,n){if(!e)return e;if(o(e)){var i={_placeholder:!0,num:n.length};return n.push(e),i}if(r(e)){for(var s=new Array(e.length),a=0;a<e.length;a++)s[a]=t(e[a],n);return s}if("object"==typeof e&&!(e instanceof Date)){var s={};for(var u in e)s[u]=t(e[u],n);return s}return e}(n,e),i.attachments=e.length,{packet:i,buffers:e}},e.reconstructPacket=function(t,e){return t.data=function t(e,n){if(!e)return e;if(e&&e._placeholder)return n[e.num];if(r(e))for(var o=0;o<e.length;o++)e[o]=t(e[o],n);else if("object"==typeof e)for(var i in e)e[i]=t(e[i],n);return e}(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){var n=0,i=t;!function t(u,c,l){if(!u)return u;if(s&&u instanceof Blob||a&&u instanceof File){n++;var f=new FileReader;f.onload=function(){l?l[c]=this.result:i=this.result,--n||e(i)},f.readAsArrayBuffer(u)}else if(r(u))for(var h=0;h<u.length;h++)t(u[h],h,u);else if("object"==typeof u&&!o(u))for(var p in u)t(u[p],p,u)}(i),n||e(i)}},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=c(t),r=n[0],s=n[1],a=new i(function(t,e,n){return 3*(e+n)/4-n}(0,r,s)),u=0,l=s>0?r-4:r,f=0;f<l;f+=4)e=o[t.charCodeAt(f)]<<18|o[t.charCodeAt(f+1)]<<12|o[t.charCodeAt(f+2)]<<6|o[t.charCodeAt(f+3)],a[u++]=e>>16&255,a[u++]=e>>8&255,a[u++]=255&e;2===s&&(e=o[t.charCodeAt(f)]<<2|o[t.charCodeAt(f+1)]>>4,a[u++]=255&e);1===s&&(e=o[t.charCodeAt(f)]<<10|o[t.charCodeAt(f+1)]<<4|o[t.charCodeAt(f+2)]>>2,a[u++]=e>>8&255,a[u++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,i=[],s=0,a=n-o;s<a;s+=16383)i.push(l(t,s,s+16383>a?a:s+16383));1===o?(e=t[n-1],i.push(r[e>>2]+r[e<<4&63]+"==")):2===o&&(e=(t[n-2]<<8)+t[n-1],i.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)r[a]=s[a],o[s.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var o,i,s=[],a=e;a<n;a+=3)o=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,o){var i,s,a=8*o-r-1,u=(1<<a)-1,c=u>>1,l=-7,f=n?o-1:0,h=n?-1:1,p=t[e+f];for(f+=h,i=p&(1<<-l)-1,p>>=-l,l+=a;l>0;i=256*i+t[e+f],f+=h,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=r;l>0;s=256*s+t[e+f],f+=h,l-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,r),i-=c}return(p?-1:1)*s*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var s,a,u,c=8*i-o-1,l=(1<<c)-1,f=l>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:i-1,d=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+f>=1?h/u:h*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=l?(a=0,s=l):s+f>=1?(a=(e*u-1)*Math.pow(2,o),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,o),s=0));o>=8;t[n+p]=255&a,p+=d,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;t[n+p]=255&s,p+=d,s/=256,c-=8);t[n+p-d]|=128*g}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){t.exports=n(256),t.exports.parser=n(35)},function(t,e,n){var r=n(137),o=n(34),i=n(59)("engine.io-client:socket"),s=n(141),a=n(35),u=n(134),c=n(57);function l(t,e){if(!(this instanceof l))return new l(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=u(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=u(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}t.exports=l,l.priorWebsocketSuccess=!1,o(l.prototype),l.protocol=a.protocol,l.Socket=l,l.Transport=n(93),l.transports=n(137),l.parser=n(35),l.prototype.createTransport=function(t){i('creating transport "%s"',t);var e=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.query);e.EIO=a.protocol,e.transport=t;var n=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new r[t]({query:e,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0,isReactNative:this.isReactNative})},l.prototype.open=function(){var t;if(this.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout(function(){e.emit("error","No transports available")},0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},l.prototype.setTransport=function(t){i("setting transport %s",t.name);var e=this;this.transport&&(i("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",function(){e.onDrain()}).on("packet",function(t){e.onPacket(t)}).on("error",function(t){e.onError(t)}).on("close",function(){e.onClose("transport close")})},l.prototype.probe=function(t){i('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var o=!this.supportsBinary&&r.transport.supportsBinary;n=n||o}n||(i('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(i('probe transport "%s" pong',t),r.upgrading=!0,r.emit("upgrading",e),!e)return;l.priorWebsocketSuccess="websocket"===e.name,i('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(i("changing transport and sending upgrade packet"),h(),r.setTransport(e),e.send([{type:"upgrade"}]),r.emit("upgrade",e),e=null,r.upgrading=!1,r.flush())})}else{i('probe transport "%s" failed',t);var s=new Error("probe error");s.transport=e.name,r.emit("upgradeError",s)}}))}function s(){n||(n=!0,h(),e.close(),e=null)}function a(n){var o=new Error("probe error: "+n);o.transport=e.name,s(),i('probe transport "%s" failed because of error: %s',t,n),r.emit("upgradeError",o)}function u(){a("transport closed")}function c(){a("socket closed")}function f(t){e&&t.name!==e.name&&(i('"%s" works - aborting "%s"',t.name,e.name),s())}function h(){e.removeListener("open",o),e.removeListener("error",a),e.removeListener("close",u),r.removeListener("close",c),r.removeListener("upgrading",f)}l.priorWebsocketSuccess=!1,e.once("open",o),e.once("error",a),e.once("close",u),this.once("close",c),this.once("upgrading",f),e.open()},l.prototype.onOpen=function(){if(i("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){i("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},l.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(i('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else i('packet received with socket readyState "%s"',this.readyState)},l.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},l.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){"closed"!==e.readyState&&e.onClose("ping timeout")},t||e.pingInterval+e.pingTimeout)},l.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){i("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)},t.pingInterval)},l.prototype.ping=function(){var t=this;this.sendPacket("ping",function(){t.emit("ping")})},l.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},l.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(i("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},l.prototype.write=l.prototype.send=function(t,e,n){return this.sendPacket("message",t,e,n),this},l.prototype.sendPacket=function(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:t,data:e,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},l.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():e()}):this.upgrading?r():e()}function e(){t.onClose("forced close"),i("socket closing - telling transport to close"),t.transport.close()}function n(){t.removeListener("upgrade",n),t.removeListener("upgradeError",n),e()}function r(){t.once("upgrade",n),t.once("upgradeError",n)}return this},l.prototype.onError=function(t){i("socket error %j",t),l.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},l.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){i('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},l.prototype.filterUpgrades=function(t){for(var e=[],n=0,r=t.length;n<r;n++)~s(this.transports,t[n])&&e.push(t[n]);return e}},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,n){var r=n(92),o=n(138),i=n(34),s=n(58),a=n(59)("engine.io-client:polling-xhr");function u(){}function c(t){if(o.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,n=location.port;n||(n=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||n!==t.port,this.xs=t.secure!==e}}function l(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(t.exports=c,t.exports.Request=l,s(c,o),c.prototype.supportsBinary=!0,c.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new l(t)},c.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:n}),o=this;r.on("success",e),r.on("error",function(t){o.onError("xhr post error",t)}),this.sendXhr=r},c.prototype.doPoll=function(){a("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t)}),t.on("error",function(t){e.onError("xhr poll error",t)}),this.pollXhr=t},i(l.prototype),l.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new r(t),n=this;try{a("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var o in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&e.setRequestHeader(o,this.extraHeaders[o])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=!0),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){n.onLoad()},e.onerror=function(){n.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");n.supportsBinary&&"application/octet-stream"===t&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?n.onLoad():setTimeout(function(){n.onError(e.status)},0))},a("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout(function(){n.onError(t)},0)}"undefined"!=typeof document&&(this.index=l.requestsCount++,l.requests[this.index]=this)},l.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},l.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},l.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},l.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete l.requests[this.index],this.xhr=null}},l.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t="application/octet-stream"===e&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},l.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},l.prototype.abort=function(){this.cleanup()},l.requestsCount=0,l.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",h);else if("function"==typeof addEventListener){var f="onpagehide"in self?"pagehide":"unload";addEventListener(f,h,!1)}function h(){for(var t in l.requests)l.requests.hasOwnProperty(t)&&l.requests[t].abort()}},function(t,e){t.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&e.push(r);return e}},function(t,e){t.exports=function(t,e,n){var r=t.byteLength;if(e=e||0,n=n||r,t.slice)return t.slice(e,n);if(e<0&&(e+=r),n<0&&(n+=r),n>r&&(n=r),e>=r||e>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(n-e),s=e,a=0;s<n;s++,a++)i[a]=o[s];return i.buffer}},function(t,e){function n(){}t.exports=function(t,e,r){var o=!1;return r=r||n,i.count=t,0===t?e():i;function i(t,n){if(i.count<=0)throw new Error("after called too many times");--i.count,t?(o=!0,e(t),e=r):0!==i.count||o||e(null,n)}}},function(t,e){var n,r,o,i=String.fromCharCode;function s(t){for(var e,n,r=[],o=0,i=t.length;o<i;)(e=t.charCodeAt(o++))>=55296&&e<=56319&&o<i?56320==(64512&(n=t.charCodeAt(o++)))?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),o--):r.push(e);return r}function a(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function u(t,e){return i(t>>e&63|128)}function c(t,e){if(0==(4294967168&t))return i(t);var n="";return 0==(4294965248&t)?n=i(t>>6&31|192):0==(4294901760&t)?(a(t,e)||(t=65533),n=i(t>>12&15|224),n+=u(t,6)):0==(4292870144&t)&&(n=i(t>>18&7|240),n+=u(t,12),n+=u(t,6)),n+=i(63&t|128)}function l(){if(o>=r)throw Error("Invalid byte index");var t=255&n[o];if(o++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function f(t){var e,i;if(o>r)throw Error("Invalid byte index");if(o==r)return!1;if(e=255&n[o],o++,0==(128&e))return e;if(192==(224&e)){if((i=(31&e)<<6|l())>=128)return i;throw Error("Invalid continuation byte")}if(224==(240&e)){if((i=(15&e)<<12|l()<<6|l())>=2048)return a(i,t)?i:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(i=(7&e)<<18|l()<<12|l()<<6|l())>=65536&&i<=1114111)return i;throw Error("Invalid UTF-8 detected")}t.exports={version:"2.1.2",encode:function(t,e){for(var n=!1!==(e=e||{}).strict,r=s(t),o=r.length,i=-1,a="";++i<o;)a+=c(r[i],n);return a},decode:function(t,e){var a=!1!==(e=e||{}).strict;n=s(t),r=n.length,o=0;for(var u,c=[];!1!==(u=f(a));)c.push(u);return function(t){for(var e,n=t.length,r=-1,o="";++r<n;)(e=t[r])>65535&&(o+=i((e-=65536)>>>10&1023|55296),e=56320|1023&e),o+=i(e);return o}(c)}}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<t.length;r++)n[t.charCodeAt(r)]=r;e.encode=function(e){var n,r=new Uint8Array(e),o=r.length,i="";for(n=0;n<o;n+=3)i+=t[r[n]>>2],i+=t[(3&r[n])<<4|r[n+1]>>4],i+=t[(15&r[n+1])<<2|r[n+2]>>6],i+=t[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},e.decode=function(t){var e,r,o,i,s,a=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var l=new ArrayBuffer(a),f=new Uint8Array(l);for(e=0;e<u;e+=4)r=n[t.charCodeAt(e)],o=n[t.charCodeAt(e+1)],i=n[t.charCodeAt(e+2)],s=n[t.charCodeAt(e+3)],f[c++]=r<<2|o>>4,f[c++]=(15&o)<<4|i>>2,f[c++]=(3&i)<<6|63&s;return l}}()},function(t,e){var n=void 0!==n?n:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),o=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),i=n&&n.prototype.append&&n.prototype.getBlob;function s(t){return t.map(function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var n=new Uint8Array(t.byteLength);n.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=n.buffer}return e}return t})}function a(t,e){e=e||{};var r=new n;return s(t).forEach(function(t){r.append(t)}),e.type?r.getBlob(e.type):r.getBlob()}function u(t,e){return new Blob(s(t),e||{})}"undefined"!=typeof Blob&&(a.prototype=Blob.prototype,u.prototype=Blob.prototype),t.exports=r?o?Blob:u:i?a:void 0},function(t,e,n){function r(t){var n;function r(){if(r.enabled){var t=r,o=+new Date,i=o-(n||o);t.diff=i,t.prev=n,t.curr=o,n=o;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=e.formatters[r];if("function"==typeof o){var i=s[u];n=o.call(t,i),s.splice(u,1),u--}return n}),e.formatArgs.call(t,s),(r.log||e.log||console.log.bind(console)).apply(t,s)}}return r.namespace=t,r.enabled=e.enabled(t),r.useColors=e.useColors(),r.color=function(t){var n,r=0;for(n in t)r=(r<<5)-r+t.charCodeAt(n),r|=0;return e.colors[Math.abs(r)%e.colors.length]}(t),r.destroy=o,"function"==typeof e.init&&e.init(r),e.instances.push(r),r}function o(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var r=("string"==typeof t?t:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(t=r[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var i=e.instances[n];i.enabled=e.enabled(i.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(266),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){var n=1e3,r=60*n,o=60*r,i=24*o,s=365.25*i;function a(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}t.exports=function(t,e){e=e||{};var u,c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var a=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*i;case"hours":case"hour":case"hrs":case"hr":case"h":return a*o;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(t);if("number"===c&&!1===isNaN(t))return e.long?a(u=t,i,"day")||a(u,o,"hour")||a(u,r,"minute")||a(u,n,"second")||u+" ms":function(t){if(t>=i)return Math.round(t/i)+"d";if(t>=o)return Math.round(t/o)+"h";if(t>=r)return Math.round(t/r)+"m";if(t>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){(function(e){var r=n(138),o=n(58);t.exports=l;var i,s=/\n/g,a=/\\n/g;function u(){}function c(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:{}}function l(t){if(r.call(this,t),this.query=this.query||{},!i){var e=c();i=e.___eio=e.___eio||[]}this.index=i.length;var n=this;i.push(function(t){n.onData(t)}),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",function(){n.script&&(n.script.onerror=u)},!1)}o(l,r),l.prototype.supportsBinary=!1,l.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},l.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)},100)},l.prototype.doWrite=function(t,e){var n=this;if(!this.form){var r,o=document.createElement("form"),i=document.createElement("textarea"),u=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=u,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function c(){l(),e()}function l(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(t){n.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(t)}catch(t){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),l(),t=t.replace(a,"\\\n"),this.area.value=t.replace(s,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&c()}:this.iframe.onload=c}}).call(this,n(88))},function(t,e,n){(function(e){var r,o,i=n(93),s=n(35),a=n(57),u=n(58),c=n(140),l=n(59)("engine.io-client:websocket");if("undefined"!=typeof WebSocket)r=WebSocket;else if("undefined"!=typeof self)r=self.WebSocket||self.MozWebSocket;else try{o=n(269)}catch(t){}var f=r||o;function h(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=r&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(f=o),i.call(this,t)}t.exports=h,u(h,i),h.prototype.name="websocket",h.prototype.supportsBinary=!0,h.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new f(t,e):new f(t):new f(t,e,n)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},h.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},h.prototype.write=function(t){var n=this;this.writable=!1;for(var r=t.length,o=0,i=r;o<i;o++)!function(t){s.encodePacket(t,n.supportsBinary,function(o){if(!n.usingBrowserWebSocket){var i={};if(t.options&&(i.compress=t.options.compress),n.perMessageDeflate)("string"==typeof o?e.byteLength(o):o.length)<n.perMessageDeflate.threshold&&(i.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(o):n.ws.send(o,i)}catch(t){l("websocket closed before onclose event")}--r||a()})}(t[o]);function a(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},h.prototype.onClose=function(){i.prototype.onClose.call(this)},h.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},h.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||(t.b64=1),(t=a.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t},h.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===h.prototype.name)}}).call(this,n(91).Buffer)},function(t,e){},function(t,e){t.exports=function(t,e){for(var n=[],r=(e=e||0)||0;r<t.length;r++)n[r-e]=t[r];return n}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}},function(t,e,n){t.exports=n(273)},function(t,e,n){n(274),t.exports=n(8).Reflect.get},function(t,e,n){var r=n(49),o=n(86),i=n(27),s=n(15),a=n(22),u=n(21);s(s.S,"Reflect",{get:function t(e,n){var s,c,l=arguments.length<3?e:arguments[2];return u(e)===l?e[n]:(s=r.f(e,n))?i(s,"value")?s.value:void 0!==s.get?s.get.call(l):void 0:a(c=o(e))?t(c,n,l):void 0}})},function(t,e,n){var r=n(9);t.exports=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=r(t)););return t}},function(t,e,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(t,e){return Array.isArray(t)?function(t,e){for(var n,r="",i="",s=Array.isArray(e),a=0;a<t.length;a++)(n=o(t[a]))&&(s&&e[a]&&(n=u(n)),r=r+i+n,i=" ");return r}(t,e):t&&"object"==typeof t?function(t){var e="",n="";for(var o in t)o&&t[o]&&r.call(t,o)&&(e=e+n+o,n=" ");return e}(t):t||""}function i(t){if(!t)return"";if("object"==typeof t){var e="";for(var n in t)r.call(t,n)&&(e=e+n+":"+t[n]+";");return e}return t+""}function s(t,e,n,r){return!1!==e&&null!=e&&(e||"class"!==t&&"style"!==t)?!0===e?" "+(r?t:t+'="'+t+'"'):("function"==typeof e.toJSON&&(e=e.toJSON()),"string"==typeof e||(e=JSON.stringify(e),n||-1===e.indexOf('"'))?(n&&(e=u(e))," "+t+'="'+e+'"'):" "+t+"='"+e.replace(/'/g,"&#39;")+"'"):""}e.merge=function t(e,n){if(1===arguments.length){for(var r=e[0],o=1;o<e.length;o++)r=t(r,e[o]);return r}for(var s in n)if("class"===s){var a=e[s]||[];e[s]=(Array.isArray(a)?a:[a]).concat(n[s]||[])}else if("style"===s){var a=i(e[s]);a=a&&";"!==a[a.length-1]?a+";":a;var u=i(n[s]);u=u&&";"!==u[u.length-1]?u+";":u,e[s]=a+u}else e[s]=n[s];return e},e.classes=o,e.style=i,e.attr=s,e.attrs=function(t,e){var n="";for(var a in t)if(r.call(t,a)){var u=t[a];if("class"===a){u=o(u),n=s(a,u,!1,e)+n;continue}"style"===a&&(u=i(u)),n+=s(a,u,!1,e)}return n};var a=/["&<>]/;function u(t){var e=""+t,n=a.exec(e);if(!n)return t;var r,o,i,s="";for(r=n.index,o=0;r<e.length;r++){switch(e.charCodeAt(r)){case 34:i="&quot;";break;case 38:i="&amp;";break;case 60:i="&lt;";break;case 62:i="&gt;";break;default:continue}o!==r&&(s+=e.substring(o,r)),o=r+1,s+=i}return o!==r?s+e.substring(o,r):s}e.escape=u,e.rethrow=function t(e,r,o,i){if(!(e instanceof Error))throw e;if(!("undefined"==typeof window&&r||i))throw e.message+=" on line "+o,e;try{i=i||n(277).readFileSync(r,"utf8")}catch(n){t(e,null,o)}var s=3,a=i.split("\n"),u=Math.max(o-s,0),c=Math.min(a.length,o+s);var s=a.slice(u,c).map(function(t,e){var n=e+u+1;return(n==o?"  > ":"    ")+n+"| "+t}).join("\n");e.path=r;e.message=(r||"Pug")+":"+o+"\n"+s+"\n\n"+e.message;throw e}},function(t,e){},function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"NAME",function(){return k}),n.d(r,"VERSION",function(){return T}),n.d(r,"DATA_KEY",function(){return D}),n.d(r,"EVENT_KEY",function(){return A}),n.d(r,"DATA_API_KEY",function(){return O}),n.d(r,"ESCAPE_KEYCODE",function(){return S}),n.d(r,"SPACE_KEYCODE",function(){return _}),n.d(r,"TAB_KEYCODE",function(){return F}),n.d(r,"ARROW_UP_KEYCODE",function(){return N}),n.d(r,"ARROW_DOWN_KEYCODE",function(){return P}),n.d(r,"RIGHT_MOUSE_BUTTON_WHICH",function(){return j}),n.d(r,"REGEXP_KEYDOWN",function(){return R}),n.d(r,"EVENT",function(){return L}),n.d(r,"CLASSNAME",function(){return M}),n.d(r,"SELECTOR",function(){return B}),n.d(r,"ATTACHMENTMAP",function(){return I}),n.d(r,"DEFAULT",function(){return U}),n.d(r,"DEFAULTTYPE",function(){return H}),n.d(r,"DropdownService",function(){return q}),n.d(r,"Utils",function(){return E});var o={};n.r(o),n.d(o,"TabsComponent",function(){return et}),n.d(o,"DropdownComponent",function(){return nt}),n.d(o,"NavbarComponent",function(){return rt});var i={};n.r(i),n.d(i,"AlertComponent",function(){return ht});var s=n(5),a=n.n(s),u=n(0),c=n.n(u),l=n(1),f=n(150),h=n(45),p=n.n(h),d=n(4),g=n.n(d),m=n(46),v=n(11),y=n.n(v),b=n(9),w=n.n(b),C=n(13),x=n.n(C);let E=function(t){function e(){return a()(this,e),y()(this,w()(e).apply(this,arguments))}return x()(e,t),g()(e,null,[{key:"toType",value:function(t){const e={}.toString.call(t).match(/\s([a-z]+)/i);return e?e[1].toLowerCase():null}},{key:"isElement",value:function(t){return(t[0]||t).nodeType}},{key:"typeCheckConfig",value:function(t,n,r){for(const o in r)if(Object.prototype.hasOwnProperty.call(r,o)){const i=r[o],s=n[o],a=s&&e.isElement(s)?"element":e.toType(s);if(!a||!new RegExp(i).test(a))throw new Error(`${t.toUpperCase()}: `+`Option "${o}" provided type "${a}" `+`but expected type "${i}".`)}}}]),e}(l.Utils);const k="dropdown",T="4.1.3",D="bs.dropdown",A=`.${D}`,O=".data-api",S=27,_=32,F=9,N=38,P=40,j=3,R=new RegExp(`${N}|${P}|${S}`),L={HIDE:`hide${A}`,HIDDEN:`hidden${A}`,SHOW:`show${A}`,SHOWN:`shown${A}`,CLICK:`click${A}`,CLICK_DATA_API:`click${A}${O}`,KEYDOWN_DATA_API:`keydown${A}${O}`,KEYUP_DATA_API:`keyup${A}${O}`},M={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},B={DATA_TOGGLE:"bs4-dropdown .dropdown-toggle",FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"},I={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},U={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},H={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"};let q=function(){function t(e,n){a()(this,t),c()(this,"_element",void 0),c()(this,"_popper",void 0),c()(this,"_config",void 0),c()(this,"_menu",void 0),c()(this,"_inNavbar",void 0),c()(this,"debug",Object(l.Debug)("service:DropdownService")),this._element=e,this._popper=null,this._config=this._getConfig(n),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),Object(l.JQuery)(this._element).data(D,this._config),this.clouseOnClickOutsite(t._getParentFromElement(this._element))}return g()(t,null,[{key:"closeAll",value:function(){Object(l.JQuery)(".dropdown-menu.show").each((t,e)=>{const n=Object(l.JQuery)(e),r=n.closest("dropdown-menu.show");this.close(n[0],n,r)})}},{key:"close",value:function(e,n,r){const o={relatedTarget:e},i=t._getParentFromElement(e);n&&n.hasClass(M.SHOW)&&n.removeClass(M.SHOW),r&&r.hasClass(M.SHOW)&&r.removeClass(M.SHOW).removeClass(M.SHOW).trigger(l.JQuery.Event(L.HIDDEN,o)),i.hasClass(M.SHOW)&&i.removeClass(M.SHOW).trigger(l.JQuery.Event(L.HIDDEN,o))}},{key:"_clearMenus",value:function(e){if(e&&(e.which===j||"keyup"===e.type&&e.which!==F))return;const n=[].slice.call(Object(l.JQuery)(B.DATA_TOGGLE).get());Object(l.JQuery)(B.DATA_TOGGLE).each((r,o)=>{const i=t._getParentFromElement(o),s=Object(l.JQuery)(n[r]).data(D),a={relatedTarget:n[r]};if(e&&"click"===e.type&&(a.clickEvent=e),!s)return;const u=i.find(B.MENU);if(!Object(l.JQuery)(i).hasClass(M.SHOW))return;if(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&e.which===F)&&l.JQuery.contains(i.get(0),e.target))return;const c=l.JQuery.Event(L.HIDE,a);Object(l.JQuery)(i).trigger(c),c.isDefaultPrevented()||(document.documentElement&&"ontouchstart"in document.documentElement&&Object(l.JQuery)(document.body).children().off("mouseover","null",l.JQuery.noop),n[r].setAttribute("aria-expanded","false"),u.removeClass(M.SHOW),i.removeClass(M.SHOW).trigger(l.JQuery.Event(L.HIDDEN,a)))})}},{key:"_getParentFromElement",value:function(t){return Object(l.JQuery)(t).parent()}},{key:"VERSION",get:function(){return T}},{key:"Default",get:function(){return U}},{key:"DefaultType",get:function(){return H}}]),g()(t,[{key:"close",value:function(){return this.debug("close"),t.close(this._element,Object(l.JQuery)(this._menu))}},{key:"show",value:function(){this.debug("show");const e={relatedTarget:this._element},n=t._getParentFromElement(this._element);Object(l.JQuery)(this._menu).hasClass(M.SHOW)||Object(l.JQuery)(this._menu).addClass(M.SHOW),n.hasClass(M.SHOW)||n.addClass(M.SHOW).trigger(l.JQuery.Event(L.SHOWN,e))}},{key:"toggle",value:function(){if(this._element.disabled||Object(l.JQuery)(this._element).hasClass(M.DISABLED))return;this.debug("toggle");const e=t._getParentFromElement(this._element),n=Object(l.JQuery)(this._menu).hasClass(M.SHOW);if(t._clearMenus(),n)return void this.close();const r={relatedTarget:this._element},o=l.JQuery.Event(L.SHOW,r);if(Object(l.JQuery)(e).trigger(o),!o.isDefaultPrevented()){if(this.clouseOnClickOutsite(t._getParentFromElement(this._element)),!this._inNavbar){if(void 0===m.a)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");let t=this._element;"parent"===this._config.reference?t=e.get(0):E.isElement(this._config.reference)&&(t=this._config.reference,void 0!==this._config.reference.jquery&&(t=this._config.reference[0])),"scrollParent"!==this._config.boundary&&Object(l.JQuery)(e).addClass(M.POSITION_STATIC),this._popper=new m.a(t,this._menu,this._getPopperConfig())}document.documentElement&&"ontouchstart"in document.documentElement&&0===Object(l.JQuery)(e).closest(B.NAVBAR_NAV).length&&Object(l.JQuery)(document.body).children().on("mouseover",null,l.JQuery.noop),this.clouseOnClickOutsite(t._getParentFromElement(this._element)),this._element.focus(),this._element.setAttribute("aria-expanded","true"),Object(l.JQuery)(this._menu).toggleClass(M.SHOW),Object(l.JQuery)(e).toggleClass(M.SHOW).trigger(l.JQuery.Event(L.SHOWN,r))}}},{key:"dispose",value:function(){l.JQuery.removeData(this._element,D),Object(l.JQuery)(this._element).off(A),delete this._element,delete this._menu,null!==this._popper&&(this._popper.destroy(),this._popper=null)}},{key:"update",value:function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()}},{key:"clouseOnClickOutsite",value:function(t){const e=e=>{Object(l.JQuery)(e.target).closest(t.get(0)).length||(this.close(),n())},n=()=>{document.removeEventListener("click",e)};document.addEventListener("click",e)}},{key:"_getConfig",value:function(e){return e=p()({},t.Default,Object(l.JQuery)(this._element).data(),e),E.typeCheckConfig(k,e,t.DefaultType),e}},{key:"_getMenuElement",value:function(){if(!this._menu){const e=t._getParentFromElement(this._element);e&&(this._menu=e.find(B.MENU).get(0))}return this._menu}},{key:"_getPlacement",value:function(){const t=Object(l.JQuery)(this._element.parentNode);let e=I.BOTTOM;return t.hasClass(M.DROPUP)?(e=I.TOP,Object(l.JQuery)(this._menu).hasClass(M.MENURIGHT)&&(e=I.TOPEND)):t.hasClass(M.DROPRIGHT)?e=I.RIGHT:t.hasClass(M.DROPLEFT)?e=I.LEFT:Object(l.JQuery)(this._menu).hasClass(M.MENURIGHT)&&(e=I.BOTTOMEND),e}},{key:"_detectNavbar",value:function(){return Object(l.JQuery)(this._element).closest(".navbar").length>0}},{key:"_getPopperConfig",value:function(){const t={};"function"==typeof this._config.offset?t.fn=(t=>(t.offsets=p()({},t.offsets,this._config.offset(t.offsets)||{}),t)):t.offset=this._config.offset;const e={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),e}}]),t}(),$=function(){function t(e){a()(this,t),c()(this,"$target",void 0),this.$target=e}return g()(t,[{key:"show",value:function(){this.$target.removeClass(t.CLASSNAME.COLLAPSE).addClass(t.CLASSNAME.SHOW).trigger(t.EVENT.SHOWN)}},{key:"hide",value:function(){this.$target.removeClass(t.CLASSNAME.SHOW).addClass(t.CLASSNAME.COLLAPSE).trigger(t.EVENT.HIDDEN)}},{key:"isExpanded",value:function(){return this.$target.hasClass(t.CLASSNAME.SHOW)}},{key:"isCollapsed",value:function(){return!this.isExpanded()}},{key:"toggle",value:function(){this.isCollapsed()?this.show():this.hide()}}]),t}();c()($,"DATA_KEY","bs.collapse"),c()($,"EVENT_KEY",`.${$.DATA_KEY}`),c()($,"DATA_API_KEY",".data-api"),c()($,"EVENT",{SHOW:`show${$.EVENT_KEY}`,SHOWN:`shown${$.EVENT_KEY}`,HIDE:`hide${$.EVENT_KEY}`,HIDDEN:`hidden${$.EVENT_KEY}`,CLICK_DATA_API:`click${$.EVENT_KEY}${$.DATA_API_KEY}`}),c()($,"CLASSNAME",{SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"});var W=n(151);const Y=n.n(W)()("binder:rv-bs4-tooltip"),J={},V={binder:(t,e)=>{const n=Object(l.JQuery)(t),r=new $(n),o=new l.EventDispatcher("main");o.on("newPageReady",()=>(t=>!(!t||!E.onRoute(t)||(r.hide(),0)))(e))},name:"bs4-collapse-on-url"},X={binder:(t,e)=>{const n=Object(l.JQuery)(t),r=Object(l.JQuery)(e),o=new $(r),i=()=>{o.isCollapsed()?n.addClass($.CLASSNAME.COLLAPSED).attr("aria-expanded","false"):n.removeClass($.CLASSNAME.COLLAPSED).attr("aria-expanded","true")};r.on($.EVENT.SHOWN,i),r.on($.EVENT.HIDDEN,i),n.on("click",t=>{t.preventDefault(),o.toggle()}),i()},name:"bs4-collapse"},Q={binder:(t,e)=>{const n=Object(l.JQuery)(t);let r;(r=n.hasClass("dropdown-toggle")?n:n.find(".dropdown-toggle"))||(r=n);const o=new q(r[0]);r.on("click",t=>{o.toggle()})},name:"bs4-dropdown"},z={binder:(t,e)=>{const n=Object(l.JQuery)(t),r=new $(n),o=new l.EventDispatcher("main"),i=t=>t&&E.onRoute(t)?(r.show(),!0):(r.hide(),!1);o.on("newPageReady",()=>i(e)),i(e)},name:"bs4-expan-on-url"},G={binder:function(t,e){const n=Object(l.JQuery)(t),r=e.replace("#","");let o=document.getElementById(r),i=null;o&&(i=Object(l.JQuery)(o));const s=this.args[0],a=()=>{(o=document.getElementById(r))&&(i=Object(l.JQuery)(r),(t=>{if(!t)return!1;const e=t.getBoundingClientRect();return e.top+e.height>=0&&e.bottom-e.height<=0})(o)?(n.addClass(s),n.is(":radio")&&n.prop("checked",!0)):(n.removeClass(s),n.is(":radio")&&n.prop("checked",!1)))};Object(l.JQuery)(window).off("scroll",a).on("scroll",a),a()},name:"bs4-scrollspy-*"},K={binder:{block:!1,bind(t){this.customData.$tip=Object(l.JQuery)('<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>'),this.customData.show=(()=>{this.customData.popper=new m.a(t,this.customData.$tip[0],{placement:"top",modifiers:{offset:{offset:0},flip:{behavior:"flip"},arrow:{element:".arrow"},preventOverflow:{boundariesElement:"scrollParent"}},onCreate:t=>{Y("onCreate")},onUpdate:t=>{Y("onUpdate")}}),this.customData.$tip.appendTo(document.body),this.customData.$tip.addClass("show"),this.customData.$tip.addClass("bs-tooltip-top")}),this.customData.hide=(()=>{this.customData.$tip.removeClass("show"),this.customData.popper&&this.customData.popper.destroy()}),t.addEventListener("mouseenter",this.customData.show),t.addEventListener("mouseleave",this.customData.hide)},routine(t,e){Y("TODO routine"),this.customData.$tip.find(".tooltip-inner").html(e)},unbind(){this.customData.hide(),this.el.removeEventListener("mouseenter",this.customData.show),this.el.removeEventListener("mouseleave",this.customData.hide)}},name:"bs4-tooltip"};J[V.name]=V.binder,J[X.name]=X.binder,J[Q.name]=Q.binder,J[z.name]=z.binder,J[G.name]=G.binder,J[K.name]=K.binder;var Z=n(3),tt=n.n(Z);let et=function(t){function e(t){var n;a()(this,e),n=y()(this,w()(e).call(this,t)),c()(tt()(tt()(n)),"debug",Object(l.Debug)("component:bs4-tabs")),c()(tt()(tt()(n)),"scope",{}),c()(tt()(tt()(n)),"$el",void 0),c()(tt()(tt()(n)),"$tabs",void 0),c()(tt()(tt()(n)),"$tabPanes",void 0),c()(tt()(tt()(n)),"$scrollable",void 0),c()(tt()(tt()(n)),"tabsSameHeight",!0);const r=tt()(tt()(n));return n.$el=Object(l.JQuery)(n.el),n.$tabs=n.$el.find(".nav-link"),n.$tabPanes=n.$el.find(".tab-pane"),n.$scrollable=n.$el.find("[scrollable]"),n.debug("constructor",n.$el,n.$tabs,n.$tabPanes),n.$tabs.on("click",function(t){t.preventDefault();const e=Object(l.JQuery)(this);r.activate(e)}),n.$tabs.off("shown.bs.tab").on("shown.bs.tab",t=>{const e=Object(l.JQuery)(t.target);if(n.$scrollable.length){const t=e[0].getBoundingClientRect(),r=n.$scrollable.scrollLeft()||0+t.left;n.$scrollable.animate({scrollLeft:r},"slow")}}),n.activate(n.$tabs.first()),n.tabsSameHeight&&Object(l.JQuery)(window).on("resize",()=>{n.setHeight()}),n.init(e.observedAttributes),n}return x()(e,t),g()(e,null,[{key:"observedAttributes",get:function(){return[]}}]),g()(e,[{key:"setHeight",value:function(){let t=0;this.$tabPanes.each(function(){const e=Object(l.JQuery)(this);e.css("height","auto");const n=e.height()||0;n>t&&(t=n)}),this.$tabPanes.each(function(){Object(l.JQuery)(this).css("height",t+"px")})}},{key:"deactivateAll",value:function(){this.$tabs.each(function(){Object(l.JQuery)(this).removeClass("active")}),this.$tabPanes.each(function(){Object(l.JQuery)(this).removeClass("active show")})}},{key:"activate",value:function(t){const e=t.attr("href");if(this.debug("activate",e,this.$el.find(e||"")),e){const n=this.$el.find(e);this.deactivateAll(),n.addClass("active"),setTimeout(()=>{n.addClass("show"),t.addClass("active"),n.trigger("shown.bs.tab"),t.trigger("shown.bs.tab")},0)}}},{key:"afterBind",value:async function(){this.setHeight()}},{key:"template",value:function(){return null}}]),e}(l.RibaComponent);c()(et,"tagName","bs4-tabs");let nt=function(t){function e(t){var n;a()(this,e),n=y()(this,w()(e).call(this,t)),c()(tt()(tt()(n)),"debug",Object(l.Debug)("component:bs4-dropdown")),c()(tt()(tt()(n)),"scope",{toggle:n.toggle}),c()(tt()(tt()(n)),"dropdownService",void 0);tt()(tt()(n));const r=Object(l.JQuery)(n.el);return n.dropdownService=new q(r.find(".dropdown-toggle")[0]),n.init(e.observedAttributes),n}return x()(e,t),g()(e,null,[{key:"observedAttributes",get:function(){return[]}}]),g()(e,[{key:"toggle",value:function(t,e){return this.debug("toggle"),e.preventDefault(),e.stopPropagation(),this.dropdownService.toggle()}},{key:"template",value:function(){return null}}]),e}(l.RibaComponent);c()(nt,"tagName","bs4-dropdown");let rt=function(t){function e(t){var n;a()(this,e),n=y()(this,w()(e).call(this,t)),c()(tt()(tt()(n)),"debug",Object(l.Debug)("component:bs4-navbar")),c()(tt()(tt()(n)),"scope",{toggle:n.toggle,isCollapsed:!0}),c()(tt()(tt()(n)),"collapseService",void 0);tt()(tt()(n));const r=Object(l.JQuery)(n.el),o=r.find(".navbar-collapse"),i=new l.EventDispatcher("main");n.collapseService=new $(o);const s=()=>{n.collapseService.isCollapsed()?r.addClass($.CLASSNAME.COLLAPSED).attr("aria-expanded","false"):r.removeClass($.CLASSNAME.COLLAPSED).attr("aria-expanded","true"),n.scope.isCollapsed=n.collapseService.isCollapsed()};return o.on($.EVENT.SHOWN,s),o.on($.EVENT.HIDDEN,s),i.on("newPageReady",()=>{n.collapseService.hide()}),s(),n.init(e.observedAttributes),n}return x()(e,t),g()(e,null,[{key:"observedAttributes",get:function(){return[]}}]),g()(e,[{key:"toggle",value:function(t,e){this.debug("toggle"),this.collapseService.toggle(),e.preventDefault(),e.stopPropagation()}},{key:"template",value:function(){return null}}]),e}(l.RibaComponent);c()(rt,"tagName","bs4-navbar");const ot={binders:J,services:r,components:o};var it=n(152),st=n.n(it);let at=function(t){function e(){var t;return a()(this,e),t=y()(this,w()(e).call(this)),c()(tt()(tt()(t)),"moduleSocket",void 0),c()(tt()(tt()(t)),"debug",Object(l.Debug)("services:SocketService")),t.debug("constructor"),e.instance?y()(t,e.instance):(t.init(),e.instance=tt()(tt()(t)),t)}return x()(e,t),g()(e,[{key:"sendSocketNotification",value:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.debug("sendSocketNotification",t,e),this.moduleSocket&&this.moduleSocket.emit(t,e)}},{key:"getModuleSocket",value:function(t){return st()("/"+t)}},{key:"init",value:async function(){this.debug("init"),this.moduleSocket=this.getModuleSocket("mmm-public-signage-display"),this.moduleSocket.on("connect",()=>{this.debug("module connect"),this.sendSocketNotification("thank you module!")}),this.moduleSocket.on("exception",t=>{console.error("module exception",t)}),this.moduleSocket.on("disconnect",t=>{this.debug("module disconnect",t)}),this.moduleSocket.onevent=function(t){const e=t.data||[];this.moduleSocket.onevent.call(this,t),t.data=["*"].concat(e),this.moduleSocket.onevent.call(this,t)},this.moduleSocket.on("*",(t,e)=>{"*"!==t&&(this.debug("module notification",t,e),this.emit(t,e,this.moduleSocket))}),this.moduleSocket.on("SHOW_ALERT",t=>{this.debug("SHOW_ALERT",t)}),this.moduleSocket.on("message",t=>{this.debug("message",t)})}}]),e}(n(153).EventEmitter);c()(at,"instance",void 0);var ut=n(72),ct=n.n(ut),lt=n(154),ft=n.n(lt);let ht=function(t){function e(t){var n;return a()(this,e),n=y()(this,w()(e).call(this,t)),c()(tt()(tt()(n)),"socket",new at),c()(tt()(tt()(n)),"autobind",!0),c()(tt()(tt()(n)),"$el",void 0),c()(tt()(tt()(n)),"debug",Object(l.Debug)("component:"+e.tagName)),c()(tt()(tt()(n)),"scope",{message:"",send:n.send}),n.$el=Object(l.JQuery)(n.el),n.debug("constructor",tt()(tt()(n))),n.init(e.observedAttributes),n}return x()(e,t),g()(e,null,[{key:"observedAttributes",get:function(){return[]}}]),g()(e,[{key:"send",value:function(){this.socket.sendSocketNotification("SHOW_ALERT",{title:this.scope.message,message:this.scope.message,global:!0})}},{key:"init",value:async function(t){return ct()(w()(e.prototype),"init",this).call(this,t).then(t=>t)}},{key:"beforeBind",value:async function(){this.debug("beforeBind")}},{key:"afterBind",value:async function(){this.debug("afterBind",this.scope)}},{key:"requiredAttributes",value:function(){return[]}},{key:"attributeChangedCallback",value:function(t,n,r,o){ct()(w()(e.prototype),"attributeChangedCallback",this).call(this,t,n,r,o)}},{key:"disconnectedCallback",value:function(){ct()(w()(e.prototype),"disconnectedCallback",this).call(this)}},{key:"template",value:function(){let t=null;return this.el.hasChildNodes()?(this.debug("Do not template, because element has child nodes"),t):(t=ft()(this.scope),this.debug("Use template",t),t)}}]),e}(l.RibaComponent);c()(ht,"tagName","rv-alert"),n.d(e,"Main",function(){return pt});let pt=function t(){a()(this,t),c()(this,"view",void 0),c()(this,"debug",Object(l.Debug)("app:main")),c()(this,"riba",new l.Riba),c()(this,"model",{}),c()(this,"dispatcher",new l.EventDispatcher),c()(this,"socket",new at),this.debug("init the main application"),this.riba.module.regist({components:i}),this.riba.module.regist(l.coreModule),this.riba.module.regist(f.routerModule),this.riba.module.regist(ot),Object(l.JQuery)(t=>{const e=Object(l.JQuery)("body")[0];this.debug("bind to",e),this.view=this.riba.bind(e,this.model)})};new pt}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,