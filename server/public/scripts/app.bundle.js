!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/scripts/",n(n.s=219)}([function(t,e,n){var r=n(52);t.exports=function(t,e,n){return e in t?r(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},function(t,e,n){"use strict";n.d(e,"coreModule",function(){return p});var r=n(42),i=n.n(r),o=n(90);n.o(o,"Debug")&&n.d(e,"Debug",function(){return o.Debug}),n.o(o,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return o.EventDispatcher}),n.o(o,"JQuery")&&n.d(e,"JQuery",function(){return o.JQuery}),n.o(o,"Riba")&&n.d(e,"Riba",function(){return o.Riba}),n.o(o,"RibaComponent")&&n.d(e,"RibaComponent",function(){return o.RibaComponent}),n.o(o,"Utils")&&n.d(e,"Utils",function(){return o.Utils}),n.o(o,"View")&&n.d(e,"View",function(){return o.View});var s=n(6);n.d(e,"Debug",function(){return s.a}),n.d(e,"JQuery",function(){return s.b});var a=n(61);n.d(e,"EventDispatcher",function(){return a.EventDispatcher}),n.d(e,"Utils",function(){return a.Utils});n(55);var u=n(59),c=n(121);n.d(e,"RibaComponent",function(){return c.a});var l=n(28),f=(n(56),n(9),n(35));n.d(e,"Riba",function(){return f.a});var h=n(14);n.d(e,"View",function(){return h.a});const p={formatters:i()({},l.d,l.a,l.b,l.e,l.c),binders:Object(u.a)(s.b),services:a}},function(t,e,n){"use strict";n.d(e,"a",function(){return d});var r=n(80),i=n.n(r),o=n(11),s=n.n(o),a=n(5),u=n.n(a),c=n(4),l=n.n(c),f=n(0),h=n.n(f),p=n(6);let d=function(){function t(){u()(this,t)}return l()(t,null,[{key:"getJSON",value:function(t,e){return new s.a((n,r)=>{p.b.getJSON(t,e).done(n).fail((t,e,n)=>{r(t)})})}},{key:"post",value:function(t,e,n){return new s.a((r,i)=>{p.b.post(t,e,null,n).done(r).fail((t,e,n)=>{i(t)})})}},{key:"delete",value:function(t,e,n){return new s.a((r,i)=>p.b.ajax({url:t,type:"DELETE",data:e,dataType:n}).done(r).fail((t,e,n)=>{i(t)}))}},{key:"put",value:function(t,e,n){return new s.a((r,i)=>p.b.ajax({url:t,type:"PUT",data:e,dataType:n}).done(r).fail((t,e,n)=>{i(t)}))}},{key:"get",value:function(t,e,n){return new s.a((r,i)=>{p.b.get(t,e,null,n).done(r).fail((t,e,n)=>{i(t)})})}},{key:"isJson",value:function(t){if(!t)return!1;try{const e=JSON.parse(t);return e instanceof Array||e instanceof Object}catch(t){return!1}}},{key:"isUndefined",value:function(t){return void 0===t}},{key:"isDefined",value:function(e){return!t.isUndefined(e)}},{key:"isObject",value:function(e){return t.isDefined(e)&&"object"==typeof e&&null!==e}},{key:"getString",value:function(t){return null!=t?t.toString():void 0}},{key:"getNumber",value:function(t){return t?i()(t):void 0}},{key:"times",value:function(t,e){for(let n=0;n<t;n++)e()}},{key:"getInputValue",value:function(t){const e=[];if("checkbox"===t.type)return t.checked;if("select-multiple"===t.type){const n=t.options;for(const t in n)if(n.hasOwnProperty(t)){const r=n[t];r.selected&&e.push(r.value)}return e}return t.getAttribute("contenteditable")?t.innerHTML:t.value}},{key:"isFunction",value:function(t){return"function"==typeof t}},{key:"isArray",value:function(t){return"[object Array]"===Object.prototype.toString.call(t)}},{key:"isNumber",value:function(t){return!isNaN(i()(t))&&!isNaN(t-0)}},{key:"isBoolean",value:function(t){return typeof t==typeof!0}},{key:"isString",value:function(t){return this.isDefined(t)&&"string"==typeof t}},{key:"stringHasNumber",value:function(t){return this.isString(t)&&/\d/.test(t)}},{key:"stringHasOnlyNumbers",value:function(t){return/^\d+$/.test(t)}},{key:"stringIsPhoneNumber",value:function(t){return/^[0-9 ()+-]+$/.test(t)}},{key:"justDigits",value:function(e){const n=e.replace(/[^-\d\.]/g,"");return t.isNumber(n)?Number(n):0}},{key:"extend",value:function(t,e,n,r){let i;return i=t?p.b.extend(!0,e||{},n||{},r):p.b.extend(e||{},n||{},r)}},{key:"concat",value:function(t,e,n){return e=this.extend(t,e||{},e||{},n||{})}},{key:"clone",value:function(e,n){return t.isArray(n)?n.slice():t.extend(e,{},n)}},{key:"setRequestHeaderEachRequest",value:function(t,e){p.b.ajaxSetup({beforeSend:n=>{n.setRequestHeader(t,e)}}),this._requestHeadersEachRequest.push({name:t,value:e})}},{key:"xhr",value:function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5e3;const n=this.deferred(),r=new XMLHttpRequest;r.onreadystatechange=(()=>{if(4===r.readyState)return 200===r.status?n.resolve(r.responseText):n.reject(new Error("xhr: HTTP code is not 200"))}),r.ontimeout=(()=>n.reject(new Error("xhr: Timeout exceeded"))),r.open("GET",t),r.timeout=e;for(const t of this._requestHeadersEachRequest)r.setRequestHeader(t.name,t.value);return r.send(),n.promise}},{key:"deferred",value:function(){const t={},e=new s.a((e,n)=>{t.resolve=e,t.reject=n});return t.promise=e,t}},{key:"getLocation",value:function(t){if(!t)return window.location;return Object(p.b)(`<a href="${t}"></a>`)[0]}},{key:"getUrl",value:function(e){const n=t.getLocation(e);return n.protocol+"//"+n.host+n.pathname+n.search}},{key:"cleanLink",value:function(t){return t.replace(/#.*/,"")}},{key:"getPort",value:function(e,n){const r=t.getLocation(n),i=void 0!==e?e:r.port,o=r.protocol;return""!==i?Number(i):"http:"===o?80:"https:"===o?443:void 0}},{key:"isAbsoluteUrl",value:function(t){return new RegExp("^(?:[a-z]+:)?//","i").test(t)||t.startsWith("mailto:")||t.startsWith("tel:")||t.startsWith("fax:")}},{key:"getUrlParameter",value:function(t,e){e||(e=window.location.href),t=t.replace(/[\[\]]/g,"\\$&");const n=new RegExp("[?&]"+t+"(=([^&#]*)|&|#|$)").exec(e);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}},{key:"getHash",value:function(e){return t.getLocation(e).hash}},{key:"updateHash",value:function(t){return window.location.hash=t}},{key:"removeHash",value:function(){return history.pushState("",document.title,window.location.pathname+window.location.search)}},{key:"getViewportDimensions",value:function(){const t=Math.max(document.documentElement?document.documentElement.clientWidth:0,window.innerWidth||0);return{h:Math.max(document.documentElement?document.documentElement.clientHeight:0,window.innerHeight||0),w:t}}}]),t}();h()(d,"camelCase",t=>t.replace(/-([a-z])/g,t=>t[1].toUpperCase())),h()(d,"onRoute",t=>{if(t){return t===d.getLocation().pathname}return!1}),h()(d,"onParentRoute",t=>{if(t){return d.getLocation().pathname.startsWith(t)}return!1}),h()(d,"isExternalUrl",t=>{if(d.isAbsoluteUrl(t)){const e=d.getLocation(),n=e.protocol+"//"+e.hostname;let r=!0;return t.startsWith(n)&&(r=!1),r}return!1}),h()(d,"isInternalUrl",t=>!d.isExternalUrl(t)),h()(d,"_requestHeadersEachRequest",[{name:"x-barba",value:"yes"}])},function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},function(t,e,n){var r=n(52);function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),r(t,i.key,i)}}t.exports=function(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e,n){"use strict";var r=n(34),i=n(18);n(149),n(11);(()=>{if("function"==typeof window.CustomEvent)return!1;function t(t,e){e=e||{bubbles:!1,cancelable:!1,detail:void 0};const n=document.createEvent("CustomEvent");return n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),n}t.prototype=window.Event.prototype,window.CustomEvent=t})(),n.d(e,"a",function(){return r.a}),n.d(e,"b",function(){return i.a})},function(t,e,n){t.exports=n(141)},function(t,e){var n=t.exports={version:"2.6.3"};"number"==typeof __e&&(__e=n)},function(t,e,n){"use strict";n.d(e,"b",function(){return o}),n.d(e,"a",function(){return s}),n.d(e,"f",function(){return f}),n.d(e,"e",function(){return h}),n.d(e,"d",function(){return p}),n.d(e,"c",function(){return d});var r=n(2),i=n(14);const o=0,s=1,a=0,u=1,c=/^'.*'$|^".*"$/,l=/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g;function f(t){let e=o,n=t;return void 0===t?{type:e,value:void 0}:(c.test(t)?n=t.slice(1,-1):"true"===t?n=!0:"false"===t?n=!1:"null"===t?n=null:"undefined"===t?n=void 0:""===t?n=void 0:isNaN(Number(t))?r.a.isJson(t)?n=JSON.parse(t):e=s:n=Number(t),{type:e,value:n})}function h(t,e){let n=null;const r=t.length;let i=0,o=0;const s=e[0],c=e[1];for(;o<r;){if((i=t.indexOf(s,o))<0){n&&n.push({type:a,value:t.slice(o)});break}{if(n=n||[],i>0&&o<i&&n.push({type:a,value:t.slice(o,i)}),o=i+s.length,(i=t.indexOf(c,o))<0){const e=t.slice(o-c.length),r=n[n.length-1];r&&r.type===a?r.value+=e:n.push({type:a,value:e});break}const e=t.slice(o,i).trim();n.push({type:u,value:e}),o=i+c.length}}return n}function p(t,e,n){let r=!1;if(3===(e=e).nodeType){let o=null;if(e.data&&(o=h(e.data,n)),o&&o.length){for(let n=0;n<o.length;n++){const r=o[n],s=document.createTextNode(r.value);e.parentNode&&e.parentNode.insertBefore(s,e),1===r.type&&t.buildBinding(s,null,r.value,i.a.textBinder,null)}e.parentNode&&e.parentNode.removeChild(e)}r=!0}else 1===e.nodeType&&(r=t.traverse(e));if(!r&&e.childNodes)for(let r=0;r<e.childNodes.length;r++)p(t,e.childNodes[r],n)}function d(t){const e=t.match(l);if(null===e)throw new Error("[View] No matches");const n=e.map(t=>t.trim());return{keypath:n.shift()||void 0,pipes:n}}},function(t,e,n){t.exports=n(147)},function(t,e,n){t.exports=n(171)},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e,n){var r=n(12),i=n(8),o=n(37),s=n(29),a=n(31),u=function(t,e,n){var c,l,f,h=t&u.F,p=t&u.G,d=t&u.S,m=t&u.P,v=t&u.B,g=t&u.W,b=p?i:i[e]||(i[e]={}),y=b.prototype,w=p?r:d?r[e]:(r[e]||{}).prototype;for(c in p&&(n=e),n)(l=!h&&w&&void 0!==w[c])&&a(b,c)||(f=l?w[c]:n[c],b[c]=p&&"function"!=typeof w[c]?n[c]:v&&l?o(f,r):g&&w[c]==f?function(t){var e=function(e,n,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,r)}return t.apply(this,arguments)};return e.prototype=t.prototype,e}(f):m&&"function"==typeof f?o(Function.call,f):f,m&&((b.virtual||(b.virtual={}))[c]=f,t&u.R&&y&&!y[c]&&s(y,c,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e,n){"use strict";n.d(e,"a",function(){return y});var r=n(7),i=n.n(r),o=n(62),s=n.n(o),a=n(5),u=n.n(a),c=n(4),l=n.n(c),f=n(0),h=n.n(f),p=n(35),d=n(56),m=n(27),v=n(57),g=n(9),b=n(34);let y=function(){function t(e,n,r){u()(this,t),h()(this,"els",void 0),h()(this,"models",void 0),h()(this,"options",void 0),h()(this,"bindings",[]),h()(this,"webComponents",[]),e instanceof Array?this.els=e:this.els=[e],this.models=n,this.options=r,this.build()}return l()(t,null,[{key:"create",value:function(e,n,r){const i=e.el.cloneNode(!0),o=new t(i,n,e.view.options);return o.bind(),e&&e.marker&&null!==e.marker.parentNode?e.marker.parentNode.insertBefore(i,r):this.debug("[View] Warn: No parent node for binding!"),o}}]),l()(t,[{key:"buildBinding",value:function(t,e,n,r,i){const o=Object(g.c)(n),s=o.keypath,a=o.pipes;this.bindings.push(new d.a(this,t,e,s,r,a,i))}},{key:"build",value:function(){this.bindings=[];const e=this.els;let n,r;for(n=0,r=e.length;n<r;n++){if(!this.options.templateDelimiters)throw new Error("templateDelimiters required");Object(g.d)(this,e[n],this.options.templateDelimiters)}this.bindings.sort(t.bindingComparator)}},{key:"traverse",value:function(e){let n;if(!(n=this.options.fullPrefix?this.options.fullPrefix:this.options.prefix+"-"))throw new Error("prefix is required");let r="SCRIPT"===e.nodeName||"STYLE"===e.nodeName||"TEMPLATE"===e.nodeName;const i=e.attributes,o=[],s=this.options.starBinders;if(this.options.binders){for(let t=0,r=i.length;t<r;t++){let r=null,a=null,u=null;const c=i[t];if(0===c.name.indexOf(n)){if(r=c.name.slice(n.length),this.options.binders.hasOwnProperty(r)&&(a=this.options.binders[r]),null===a)for(let t=0;t<s.length;t++){if(u=s[t],new RegExp(`^${u.replace(/\*/g,".+")}$`).test(r)){a=this.options.binders[u];break}}if(null===a&&(this.options.binders.hasOwnProperty("*")?(a=this.options.binders["*"],u="*"):a=p.a.fallbackBinder),a.block)return this.buildBinding(e,r,c.value,a,u),this.options.removeBinderAttributes&&e.removeAttribute(c.name),!0;o.push({attr:c,binder:a,nodeName:r,identifier:u})}}for(let t=0;t<o.length;t++){const n=o[t];this.buildBinding(e,n.nodeName,n.attr.value,n.binder,n.identifier),this.options.removeBinderAttributes&&e.removeAttribute(n.attr.name)}}if(!r){const n=e.nodeName.toLowerCase();if(this.options.components&&this.options.components[n]&&!e._bound){const i=m.a.type(this.options.components[n]);if("classic"===i&&(this.bindings.push(new v.a(this,e,n)),t.debug(`Stop parsing on (deprecated) component ${n}`)),"webcomponent"===i){const r=this.options.components[n];if(window.customElements)if(t.debug(`Define Webcomponent ${n} with customElements.define`),customElements.get(n)||e.constructor!==HTMLElement&&e.constructor!==HTMLUnknownElement)t.debug("Web component already defined",e.constructor);else try{customElements.define(n,r),customElements.get(n).context={fallback:!1,view:this}}catch(t){console.error(t);const n=new r(e,{fallback:!0,view:this});this.webComponents.push(n)}else{t.debug(`Fallback for Webcomponent ${n}`);const i=new r(e,{fallback:!0,view:this});this.webComponents.push(i)}}r=!0}}return r}},{key:"bind",value:function(){this.bindings.forEach(t=>{t.bind()})}},{key:"unbind",value:function(){s()(this.bindings)&&(this.bindings.forEach(t=>{t.unbind()}),this.webComponents.forEach(t=>{t.disconnectedFallbackCallback()}))}},{key:"sync",value:function(){this.bindings.forEach(t=>{t.sync&&t.sync()})}},{key:"publish",value:function(){this.bindings.forEach(t=>{t.binder&&t.publish&&t.binder.publishes&&t.publish()})}},{key:"update",value:function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};i()(t).forEach(e=>{this.models[e]=t[e]}),this.bindings.forEach(e=>{e.update&&e.update(t)})}}]),t}();h()(y,"debug",Object(b.a)("riba:view")),h()(y,"DECLARATION_SPLIT",/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g),h()(y,"textBinder",{routine:(t,e)=>{t.data=null!=e?e:""}}),h()(y,"bindingComparator",(t,e)=>{const n=t.binder&&t.binder.priority||0;return(e.binder&&e.binder.priority||0)-n})},function(t,e,n){var r=n(199),i=n(3);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?i(t):e}},function(t,e,n){var r=n(206),i=n(58);function o(e){return t.exports=o=i?r:function(t){return t.__proto__||r(t)},o(e)}t.exports=o},function(t,e,n){var r=n(24),i=n(212);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=r(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&i(t,e)}},function(t,e,n){"use strict";var r=n(122),i=n.n(r),o=n(21),s=n.n(o),a=n(10),u=n.n(a);n.d(e,"a",function(){return c});const c=(t=>{t.attrFn=t.attrFn||{};let e="ontouchstart"in window,n={tap_pixel_range:5,swipe_h_threshold:50,swipe_v_threshold:50,taphold_threshold:750,doubletap_int:500,shake_threshold:15,touch_capable:e,orientation_support:"orientation"in window&&"onorientationchange"in window,startevent:e?"touchstart":"mousedown",endevent:e?"touchend":"mouseup",moveevent:e?"touchmove":"mousemove",tapevent:e?"tap":"click",scrollevent:e?"touchmove":"scroll",hold_timer:void 0,tap_timer:void 0};t.touch={},t.isTouchCapable=function(){return n.touch_capable},t.getStartEvent=function(){return n.startevent},t.getEndEvent=function(){return n.endevent},t.getMoveEvent=function(){return n.moveevent},t.getTapEvent=function(){return n.tapevent},t.getScrollEvent=function(){return n.scrollevent},t.touch.setSwipeThresholdX=function(t){if("number"!=typeof t)throw new Error("Threshold parameter must be a type of number");n.swipe_h_threshold=t},t.touch.setSwipeThresholdY=function(t){if("number"!=typeof t)throw new Error("Threshold parameter must be a type of number");n.swipe_v_threshold=t},t.touch.setDoubleTapInt=function(t){if("number"!=typeof t)throw new Error("Interval parameter must be a type of number");n.doubletap_int=t},t.touch.setTapHoldThreshold=function(t){if("number"!=typeof t)throw new Error("Threshold parameter must be a type of number");n.taphold_threshold=t},t.touch.setTapRange=function(t){if("number"!=typeof t)throw new Error("Ranger parameter must be a type of number");n.tap_pixel_range=t},t.each(["tapstart","tapend","tapmove","tap","singletap","doubletap","taphold","swipe","swipeup","swiperight","swipedown","swipeleft","swipeend","scrollstart","scrollend","orientationchange","tap2","taphold2"],function(e,n){t.fn[n]=function(t){return t?this.on(n,t):this.trigger(n)},t.attrFn[n]=!0}),t.event.special.tapstart={setup:function(){var e=this,r=t(e);r.on(n.startevent,function t(i){if(r.data("callee",t),i.which&&1!==i.which)return!1;var o=i.originalEvent,s={position:{x:n.touch_capable?o.touches[0].pageX:i.pageX,y:n.touch_capable?o.touches[0].pageY:i.pageY},offset:{x:n.touch_capable?Math.round(o.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(i.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(o.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(i.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:i.target};return y(e,"tapstart",i,s),!0})},remove:function(){t(this).off(n.startevent,t(this).data.callee)}},t.event.special.tapmove={setup:function(){var e=this,r=t(e);r.on(n.moveevent,function t(i){r.data("callee",t);var o=i.originalEvent,s={position:{x:n.touch_capable?o.touches[0].pageX:i.pageX,y:n.touch_capable?o.touches[0].pageY:i.pageY},offset:{x:n.touch_capable?Math.round(o.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(i.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(o.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(i.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:i.target};return y(e,"tapmove",i,s),!0})},remove:function(){t(this).off(n.moveevent,t(this).data.callee)}},t.event.special.tapend={setup:function(){var e=this,r=t(e);r.on(n.endevent,function t(i){r.data("callee",t);var o=i.originalEvent,s={position:{x:n.touch_capable?o.changedTouches[0].pageX:i.pageX,y:n.touch_capable?o.changedTouches[0].pageY:i.pageY},offset:{x:n.touch_capable?Math.round(o.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(i.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(o.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(i.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:i.target};return y(e,"tapend",i,s),!0})},remove:function(){t(this).off(n.endevent,t(this).data.callee)}},t.event.special.taphold={setup:function(){var e,r=this,i=t(r),o={x:0,y:0},a=0,c=0;i.on(n.startevent,function t(l){if(l.which&&1!==l.which)return!1;i.data("tapheld",!1),e=l.target;var f=l.originalEvent,h=u()();n.touch_capable?f.touches[0].pageX:l.pageX,n.touch_capable?f.touches[0].pageY:l.pageY,n.touch_capable?(f.touches[0].pageX,f.touches[0].target.offsetLeft):l.offsetX,n.touch_capable?(f.touches[0].pageY,f.touches[0].target.offsetTop):l.offsetY,o.x=l.originalEvent.targetTouches?l.originalEvent.targetTouches[0].pageX:l.pageX,o.y=l.originalEvent.targetTouches?l.originalEvent.targetTouches[0].pageY:l.pageY,a=o.x,c=o.y;var p=i.parent().data("threshold")?i.parent().data("threshold"):i.data("threshold"),d=void 0!==p&&!1!==p&&s()(p)?s()(p):n.taphold_threshold;return n.hold_timer=window.setTimeout(function(){var s=o.x-a,p=o.y-c;if(l.target==e&&(o.x==a&&o.y==c||s>=-n.tap_pixel_range&&s<=n.tap_pixel_range&&p>=-n.tap_pixel_range&&p<=n.tap_pixel_range)){i.data("tapheld",!0);for(var d=u()()-h,m=l.originalEvent.targetTouches?l.originalEvent.targetTouches:[l],v=[],g=0;g<m.length;g++){var b={position:{x:n.touch_capable?f.changedTouches[g].pageX:l.pageX,y:n.touch_capable?f.changedTouches[g].pageY:l.pageY},offset:{x:n.touch_capable?Math.round(f.changedTouches[g].pageX-(i.offset()?i.offset().left:0)):Math.round(l.pageX-(i.offset()?i.offset().left:0)),y:n.touch_capable?Math.round(f.changedTouches[g].pageY-(i.offset()?i.offset().top:0)):Math.round(l.pageY-(i.offset()?i.offset().top:0))},time:u()(),target:l.target,duration:d};v.push(b)}var w=2==m.length?"taphold2":"taphold";i.data("callee1",t),y(r,w,l,v)}},d),!0}).on(n.endevent,function t(){i.data("callee2",t),i.data("tapheld",!1),window.clearTimeout(n.hold_timer)}).on(n.moveevent,function t(e){i.data("callee3",t),a=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageX:e.pageX,c=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageY:e.pageY})},remove:function(){t(this).off(n.startevent,t(this).data.callee1).off(n.endevent,t(this).data.callee2).off(n.moveevent,t(this).data.callee3)}},t.event.special.doubletap={setup:function(){var e,r,i=this,o=t(i),s=null,a=!1;o.on(n.startevent,function e(i){return!(i.which&&1!==i.which||(o.data("doubletapped",!1),i.target,o.data("callee1",e),r=i.originalEvent,s||(s={position:{x:n.touch_capable?r.touches[0].pageX:i.pageX,y:n.touch_capable?r.touches[0].pageY:i.pageY},offset:{x:n.touch_capable?Math.round(r.changedTouches[0].pageX-(o.offset()?o.offset().left:0)):Math.round(i.pageX-(o.offset()?o.offset().left:0)),y:n.touch_capable?Math.round(r.changedTouches[0].pageY-(o.offset()?o.offset().top:0)):Math.round(i.pageY-(o.offset()?o.offset().top:0))},time:u()(),target:i.target,element:i.originalEvent.srcElement,index:t(i.target).index()}),0))}).on(n.endevent,function c(l){var f=u()(),h=f-(o.data("lastTouch")||f+1);if(window.clearTimeout(e),o.data("callee2",c),h<n.doubletap_int&&t(l.target).index()==s.index&&h>100){o.data("doubletapped",!0),window.clearTimeout(n.tap_timer);var p={position:{x:n.touch_capable?l.originalEvent.changedTouches[0].pageX:l.pageX,y:n.touch_capable?l.originalEvent.changedTouches[0].pageY:l.pageY},offset:{x:n.touch_capable?Math.round(r.changedTouches[0].pageX-(o.offset()?o.offset().left:0)):Math.round(l.pageX-(o.offset()?o.offset().left:0)),y:n.touch_capable?Math.round(r.changedTouches[0].pageY-(o.offset()?o.offset().top:0)):Math.round(l.pageY-(o.offset()?o.offset().top:0))},time:u()(),target:l.target,element:l.originalEvent.srcElement,index:t(l.target).index()},d={firstTap:s,secondTap:p,interval:p.time-s.time};a||(y(i,"doubletap",l,d),s=null),a=!0,window.setTimeout(function(){a=!1},n.doubletap_int)}else o.data("lastTouch",f),e=window.setTimeout(function(){s=null,window.clearTimeout(e)},n.doubletap_int,[l]);o.data("lastTouch",f)})},remove:function(){t(this).off(n.startevent,t(this).data.callee1).off(n.endevent,t(this).data.callee2)}},t.event.special.singletap={setup:function(){var e=this,r=t(e),i=null,o=null,s={x:0,y:0};r.on(n.startevent,function t(e){return!(e.which&&1!==e.which||(o=u()(),i=e.target,r.data("callee1",t),s.x=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageX:e.pageX,s.y=e.originalEvent.targetTouches?e.originalEvent.targetTouches[0].pageY:e.pageY,0))}).on(n.endevent,function t(a){if(r.data("callee2",t),a.target==i){var c=a.originalEvent.changedTouches?a.originalEvent.changedTouches[0].pageX:a.pageX,l=a.originalEvent.changedTouches?a.originalEvent.changedTouches[0].pageY:a.pageY;n.tap_timer=window.setTimeout(function(){var t=s.x-c,i=s.y-l;if(!r.data("doubletapped")&&!r.data("tapheld")&&(s.x==c&&s.y==l||t>=-n.tap_pixel_range&&t<=n.tap_pixel_range&&i>=-n.tap_pixel_range&&i<=n.tap_pixel_range)){var f=a.originalEvent,h={position:{x:n.touch_capable?f.changedTouches[0].pageX:a.pageX,y:n.touch_capable?f.changedTouches[0].pageY:a.pageY},offset:{x:n.touch_capable?Math.round(f.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(a.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(f.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(a.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:a.target};h.time-o<n.taphold_threshold&&y(e,"singletap",a,h)}},n.doubletap_int)}})},remove:function(){t(this).off(n.startevent,t(this).data.callee1).off(n.endevent,t(this).data.callee2)}},t.event.special.tap={setup:function(){var e,r,i=this,o=t(i),s=!1,a=null,c={x:0,y:0};o.on(n.startevent,function t(n){return o.data("callee1",t),!(n.which&&1!==n.which||(s=!0,c.x=n.originalEvent.targetTouches?n.originalEvent.targetTouches[0].pageX:n.pageX,c.y=n.originalEvent.targetTouches?n.originalEvent.targetTouches[0].pageY:n.pageY,e=u()(),a=n.target,r=n.originalEvent.targetTouches?n.originalEvent.targetTouches:[n],0))}).on(n.endevent,function t(l){o.data("callee2",t);var f=l.originalEvent.targetTouches?l.originalEvent.changedTouches[0].pageX:l.pageX,h=l.originalEvent.targetTouches?l.originalEvent.changedTouches[0].pageY:l.pageY,p=c.x-f,d=c.y-h;if(a==l.target&&s&&u()()-e<n.taphold_threshold&&(c.x==f&&c.y==h||p>=-n.tap_pixel_range&&p<=n.tap_pixel_range&&d>=-n.tap_pixel_range&&d<=n.tap_pixel_range)){for(var m=l.originalEvent,v=[],g=0;g<r.length;g++){var b={position:{x:n.touch_capable?m.changedTouches[g].pageX:l.pageX,y:n.touch_capable?m.changedTouches[g].pageY:l.pageY},offset:{x:n.touch_capable?Math.round(m.changedTouches[g].pageX-(o.offset()?o.offset().left:0)):Math.round(l.pageX-(o.offset()?o.offset().left:0)),y:n.touch_capable?Math.round(m.changedTouches[g].pageY-(o.offset()?o.offset().top:0)):Math.round(l.pageY-(o.offset()?o.offset().top:0))},time:u()(),target:l.target};v.push(b)}var w=2==r.length?"tap2":"tap";y(i,w,l,v)}})},remove:function(){t(this).off(n.startevent,t(this).data.callee1).off(n.endevent,t(this).data.callee2)}},t.event.special.swipe={setup:function(){var e,r=t(this),i=!1,o=!1,a={x:0,y:0},c={x:0,y:0};r.on(n.startevent,function o(s){(r=t(s.currentTarget)).data("callee1",o),a.x=s.originalEvent.targetTouches?s.originalEvent.targetTouches[0].pageX:s.pageX,a.y=s.originalEvent.targetTouches?s.originalEvent.targetTouches[0].pageY:s.pageY,c.x=a.x,c.y=a.y,i=!0;var l=s.originalEvent;e={position:{x:n.touch_capable?l.touches[0].pageX:s.pageX,y:n.touch_capable?l.touches[0].pageY:s.pageY},offset:{x:n.touch_capable?Math.round(l.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(s.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(l.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(s.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:s.target}}),r.on(n.moveevent,function l(f){var h;(r=t(f.currentTarget)).data("callee2",l),c.x=f.originalEvent.targetTouches?f.originalEvent.targetTouches[0].pageX:f.pageX,c.y=f.originalEvent.targetTouches?f.originalEvent.targetTouches[0].pageY:f.pageY;var p=r.parent().data("xthreshold")?r.parent().data("xthreshold"):r.data("xthreshold"),d=r.parent().data("ythreshold")?r.parent().data("ythreshold"):r.data("ythreshold"),m=void 0!==p&&!1!==p&&s()(p)?s()(p):n.swipe_h_threshold,v=void 0!==d&&!1!==d&&s()(d)?s()(d):n.swipe_v_threshold;if(a.y>c.y&&a.y-c.y>v&&(h="swipeup"),a.x<c.x&&c.x-a.x>m&&(h="swiperight"),a.y<c.y&&c.y-a.y>v&&(h="swipedown"),a.x>c.x&&a.x-c.x>m&&(h="swipeleft"),null!=h&&i){a.x=0,a.y=0,c.x=0,c.y=0,i=!1;var g=f.originalEvent,b={position:{x:n.touch_capable?g.touches[0].pageX:f.pageX,y:n.touch_capable?g.touches[0].pageY:f.pageY},offset:{x:n.touch_capable?Math.round(g.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(f.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(g.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(f.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:f.target},y=Math.abs(e.position.x-b.position.x),w=Math.abs(e.position.y-b.position.y),x={startEvnt:e,endEvnt:b,direction:h.replace("swipe",""),xAmount:y,yAmount:w,duration:b.time-e.time};o=!0,r.trigger("swipe",x).trigger(h,x)}}),r.on(n.endevent,function a(c){var l="";if((r=t(c.currentTarget)).data("callee3",a),o){var f=r.data("xthreshold"),h=r.data("ythreshold"),p=void 0!==f&&!1!==f&&s()(f)?s()(f):n.swipe_h_threshold,d=void 0!==h&&!1!==h&&s()(h)?s()(h):n.swipe_v_threshold,m=c.originalEvent,v={position:{x:n.touch_capable?m.changedTouches[0].pageX:c.pageX,y:n.touch_capable?m.changedTouches[0].pageY:c.pageY},offset:{x:n.touch_capable?Math.round(m.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(c.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(m.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(c.pageY-(r.offset()?r.offset().top:0))},time:u()(),target:c.target};e.position.y>v.position.y&&e.position.y-v.position.y>d&&(l="swipeup"),e.position.x<v.position.x&&v.position.x-e.position.x>p&&(l="swiperight"),e.position.y<v.position.y&&v.position.y-e.position.y>d&&(l="swipedown"),e.position.x>v.position.x&&e.position.x-v.position.x>p&&(l="swipeleft");var g=Math.abs(e.position.x-v.position.x),b=Math.abs(e.position.y-v.position.y),y={startEvnt:e,endEvnt:v,direction:l.replace("swipe",""),xAmount:g,yAmount:b,duration:v.time-e.time};r.trigger("swipeend",y)}i=!1,o=!1})},remove:function(){t(this).off(n.startevent,t(this).data.callee1).off(n.moveevent,t(this).data.callee2).off(n.endevent,t(this).data.callee3)}},t.event.special.scrollstart={setup:function(){var e,r,i=this,o=t(i);function s(t,n){y(i,(e=n)?"scrollstart":"scrollend",t)}o.on(n.scrollevent,function t(n){o.data("callee",t),e||s(n,!0),clearTimeout(r),r=setTimeout(function(){s(n,!1)},50)})},remove:function(){t(this).off(n.scrollevent,t(this).data.callee)}};var r,i,o,a,c=t(window),l={0:!0,180:!0};if(n.orientation_support){var f=window.innerWidth||c.width(),h=window.innerHeight||c.height();o=f>h&&f-h>50,a=l[window.orientation],(o&&a||!o&&!a)&&(l={"-90":!0,90:!0})}function p(){var t=r();t!==i&&(i=t,c.trigger("orientationchange"))}t.event.special.orientationchange={setup:function(){return!n.orientation_support&&(i=r(),c.on("throttledresize",p),!0)},teardown:function(){return!n.orientation_support&&(c.off("throttledresize",p),!0)},add:function(t){var e=t.handler;t.handler=function(t){return t.orientation=r(),e.apply(this,arguments)}}},t.event.special.orientationchange.orientation=r=function(){var t=document.documentElement;return(n.orientation_support?l[window.orientation]:t&&t.clientWidth/t.clientHeight<1.1)?"portrait":"landscape"},t.event.special.throttledresize={setup:function(){t(this).on("resize",g)},teardown:function(){t(this).off("resize",g)}};var d,m,v,g=function(){m=u()(),(v=m-b)>=250?(b=m,t(this).trigger("throttledresize")):(d&&window.clearTimeout(d),d=window.setTimeout(p,250-v))},b=0;function y(e,n,r,i){var o=r.type;r.type=n,t.event.dispatch.call(e,r,i),r.type=o}return t.each({scrollend:"scrollstart",swipeup:"swipe",swiperight:"swipe",swipedown:"swipe",swipeleft:"swipe",swipeend:"swipe",tap2:"tap",taphold2:"taphold"},function(e,n){t.event.special[e]={setup:function(){t(this).on(n,t.noop)}}}),t})(i.a)},function(t,e,n){"use strict";n.r(e);var r=n(5),i=n.n(r),o=n(4),s=n.n(o),a=n(0),u=n.n(a),c=n(1);let l=function(){function t(){i()(this,t),u()(this,"data",void 0),this.data={}}return s()(t,[{key:"set",value:function(t,e){return this.data[t]=e}},{key:"get",value:function(t){return this.data[t]}},{key:"reset",value:function(){this.data={}}},{key:"extend",value:function(t){return c.Utils.extend(!1,this,t)}}]),t}();var f=n(15),h=n.n(f),p=n(16),d=n.n(p),m=n(17),v=n.n(m),g=n(3),b=n.n(g);let y=function(){function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"replace";i()(this,t),u()(this,"$oldContainer",void 0),u()(this,"$newContainer",void 0),u()(this,"newContainerLoading",void 0),u()(this,"deferred",void 0),u()(this,"debug",Object(c.Debug)("barba:BaseTransition")),u()(this,"action",void 0),this.action=e}return s()(t,[{key:"init",value:function(t,e){const n=this;this.$oldContainer=t,this.deferred=c.Utils.deferred();const r=c.Utils.deferred();return this.newContainerLoading=r.promise,this.start(),e.then(t=>{n.$newContainer=t,r.resolve()}),this.deferred.promise}},{key:"done",value:function(){if(this.debug("done"),!this.$oldContainer)throw new Error("Can't remove old container");if("replace"===this.action&&this.$oldContainer.remove(),!this.$newContainer)throw new Error("Can't show new container");this.$newContainer.css("visibility","visible"),this.deferred.resolve()}}]),t}(),w=function(t){function e(){var t;i()(this,e);for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return t=h()(this,d()(e).call(this,...r)),u()(b()(b()(t)),"debug",Object(c.Debug)("rivets:CustomTransition")),t}return v()(e,t),s()(e,[{key:"init",value:function(t,e){const n=this;this.$oldContainer=t,this.debug("init"),this.deferred=c.Utils.deferred();const r=c.Utils.deferred();return this.newContainerLoading=r.promise,this.start(),e.then(t=>{n.$newContainer=t,r.resolve()}),this.deferred.promise}},{key:"start",value:function(){if(this.debug("CustomTransition start"),!this.newContainerLoading)throw new Error("this.newContainerLoading is not set");this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(t){document.body.scrollTop=0,this.debug("CustomTransition finish"),this.done()}}]),e}(y);var x=n(11),C=n.n(x);let E=function(t){function e(){var t;let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"replace",r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return i()(this,e),t=h()(this,d()(e).call(this,n)),u()(b()(b()(t)),"debug",Object(c.Debug)("barba:HideShowTransition")),u()(b()(b()(t)),"action",void 0),u()(b()(b()(t)),"scrollToTop",void 0),t.action=n,t.scrollToTop=r,t.debug("new HideShowTransition",t.action),t}return v()(e,t),s()(e,[{key:"doScrollToTop",value:function(){return this.debug("scrollToTop"),new C.a((t,e)=>{Object(c.JQuery)("html, body").animate({scrollTop:"0px"},{duration:1e3,complete:()=>{this.debug("scrollToTop complete"),t()},fail:()=>{this.debug("scrollToTop fail"),e()}})})}},{key:"start",value:function(){if(this.debug("start"),!this.newContainerLoading)throw new Error("this.newContainerLoading is not set");this.scrollToTop&&this.doScrollToTop().then(()=>{this.debug("scroll then done")}),this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(){this.debug("finish"),this.done()}}]),e}(y),k=function(){function t(){i()(this,t),u()(this,"namespace",void 0),u()(this,"$container",void 0),u()(this,"dispatcher",new c.EventDispatcher)}return s()(t,[{key:"extend",value:function(t){return c.Utils.extend(!1,this,t)}},{key:"init",value:function(){const t=this;this.dispatcher.on("initStateChange",(e,n,r)=>{r&&r.namespace===t.namespace&&t.onLeave()}),this.dispatcher.on("newPageReady",(e,n,r,i,o,s)=>{t.$container=i,n.namespace===t.namespace&&t.onEnter()}),this.dispatcher.on("transitionCompleted",(e,n,r)=>{n.namespace===t.namespace&&t.onEnterCompleted(),r&&r.namespace===t.namespace&&t.onLeaveCompleted()})}}]),t}(),D=function(){function t(){return i()(this,t),u()(this,"history",new Array),t.instance?t.instance:(t.instance=this,t.instance)}return s()(t,[{key:"currentStatus",value:function(){return this.history[this.history.length-1]}},{key:"prevStatus",value:function(){const t=this.history;return t.length<2?null:t[t.length-2]}},{key:"add",value:function(t,e){e||(e=void 0),this.history.push({namespace:e,url:t})}}]),t}();u()(D,"instance",void 0);let T=function(){function t(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"[data-namespace]",r=arguments.length>2?arguments[2]:void 0;i()(this,t),u()(this,"dataNamespace","namespace"),u()(this,"containerSelector",void 0),u()(this,"currentHTML",void 0),u()(this,"_$wrapper",void 0),u()(this,"parseTitle",void 0),u()(this,"debug",Object(c.Debug)("router:Dom")),this._$wrapper=e,this.containerSelector=n,this.parseTitle=r}return s()(t,[{key:"parseResponse",value:function(t){this.currentHTML=t;const e=document.createElement("template");e.innerHTML=t;const n=e.querySelector("title");return n&&n.textContent&&(document.title=n.textContent),this.getContainer(e)}},{key:"getWrapper",value:function(){return this._$wrapper}},{key:"getContainer",value:function(t){if(!t)throw new Error("Barba.js: [getContainer] No element to get container from!");let e;if(!(e=t.jquery?t[0]:t))throw new Error("Barba.js: [getContainer] DOM not ready!");const n=this.parseContainer(e);if(!n)throw new Error("[DOM] No container found");return Object(c.JQuery)(n)}},{key:"getNamespace",value:function(t){if(t&&t.data())return t.data("namespace");throw new Error("[DOM] Missing data-namespace attribute")}},{key:"putContainer",value:function(t){if(this.debug("putContainer",t),t.jquery){(t=t).css("visibility","hidden"),this.getWrapper()[0].appendChild(t[0])}else{(t=t).style.visibility="hidden",this.getWrapper()[0].appendChild(t)}}},{key:"parseContainer",value:function(t){if(!t)throw new Error(`No container with selector "${this.containerSelector}" found!`);let e;if(!(e=t.content?t.content.querySelector(this.containerSelector):t.querySelector(this.containerSelector)))throw new Error(`No container with selector "${this.containerSelector}" found! ${t.tagName}`);return e}}]),t}(),O=function(){function t(){if(i()(this,t),u()(this,"ignoreClassLink","no-barba-prefetch"),u()(this,"debug",Object(c.Debug)("router:Prefetch")),t.instance)return t.instance;t.instance=this}return s()(t,[{key:"init",value:function(){let t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!window.history.pushState)return!1;t&&(document.body.addEventListener("mouseover",this.onLinkEnter.bind(this)),document.body.addEventListener("touchstart",this.onLinkEnter.bind(this)))}},{key:"onLinkEnter",value:function(t,e,n){if(!e){if(!n&&t&&(n=t.target||t.currentTarget),!n)throw new Error("HTML Element not set");for(;n&&!S.getHref(n);)n=n.parentNode;if(!n||n.classList.contains(this.ignoreClassLink))return;e=S.getHref(n)}if(this.debug("onLinkEnter",e),e||console.warn("Url is not defined, you can't cache the link without the url. Please make shure your element has the href attribute or pass the url directly to this function."),e&&S.preventCheck(t,n,e)&&!S.cache.get(e)){const t=c.Utils.xhr(e);S.cache.set(e,t),this.debug("cached",e,t)}else this.debug("not cached",e),e&&(S.cache.get(e)&&this.debug("already cached",S.cache.get(e)),S.preventCheck(t,n,e)||this.debug("preventCheck failed",S.preventCheck(t,n,e)))}}]),t}();u()(O,"instance",void 0);let S=function(){function t(e,n){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"[data-namespace]",o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:new E,l=arguments.length>6&&void 0!==arguments[6]&&arguments[6];i()(this,t),u()(this,"dom",void 0),u()(this,"history",new D),u()(this,"cacheEnabled",!0),u()(this,"transitionProgress",!1),u()(this,"listenAllLinks",void 0),u()(this,"listenPopstate",void 0),u()(this,"parseTitle",!1),u()(this,"dispatcher",void 0),u()(this,"transition",void 0),u()(this,"$wrapper",void 0),u()(this,"viewId",void 0),t.DEBUG("constructor",e),this.viewId=e;let f=this;return this.dispatcher=new c.EventDispatcher(this.viewId),this.listenAllLinks=o,this.listenPopstate=s,t.instances[this.viewId]&&(f=t.instances[this.viewId]),f.transition=f.transition||a,f.$wrapper=f.$wrapper||n,f.listenAllLinks=c.Utils.isBoolean(f.listenAllLinks)?f.listenAllLinks:o,f.listenPopstate=c.Utils.isBoolean(f.listenPopstate)?f.listenPopstate:s,f.parseTitle=f.parseTitle||l,f.$wrapper&&(f.dom=f.dom||new T(f.$wrapper,r,this.parseTitle),f.$wrapper.attr("aria-live","polite")),t.instances[this.viewId]=f,t.instances[this.viewId]}return s()(t,null,[{key:"getInstance",value:function(e){const n=t.instances[e];if(!n)throw new Error(`No Pjax instance with id ${e} found!`);return n}},{key:"preventCheck",value:function(e,n,r){return!!window.history.pushState&&(!r&&n&&(r=this.getHref(n)),r&&!n&&(n=document.createElement("a")).setAttribute("href",r),t.DEBUG("preventCheck",r,n),!!n&&(!!r&&(!(r.indexOf("#")>-1)&&(c.Utils.cleanLink(r)===c.Utils.cleanLink(location.href)?(t.DEBUG("trying to load the same page"),!1):e&&e.which&&e.which>1||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey?(t.DEBUG("Middle click, cmd click or ctrl click"),!1):n.target&&"_blank"===n.target?(t.DEBUG("_blank target"),!1):window.location.protocol!==n.protocol||window.location.hostname!==n.hostname?(t.DEBUG("not the the same domain"),!1):c.Utils.getPort()!==c.Utils.getPort(n.port)?(t.DEBUG("not the the same port"),!1):n.getAttribute&&"string"==typeof n.getAttribute("download")?(t.DEBUG("download link"),!1):!n.classList.contains(this.ignoreClassLink)))))}},{key:"getHref",value:function(t){if(t){if(t.getAttribute&&"string"==typeof t.getAttribute("xlink:href"))return t.getAttribute("xlink:href")||void 0;if("string"==typeof t.href){let e=t.href;if(e&&c.Utils.isAbsoluteUrl(e)){const t=c.Utils.getLocation(),n=t.protocol+"//"+t.hostname;0===e.indexOf(n)&&(e=e.replace(n,""))}return e}}}}]),s()(t,[{key:"start",value:function(){this.$wrapper?this.init(this.$wrapper,this.listenAllLinks,this.listenPopstate):console.error("Can't init pjax without wrapper")}},{key:"getCurrentUrl",value:function(){return c.Utils.cleanLink(c.Utils.getUrl())}},{key:"goTo",value:function(e){let n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(t.DEBUG("goTo",e,n),n){const t=window.open(e,"_blank");return!!t&&t.focus()}if(0!==e.indexOf("http"))return window.history.pushState(null,"",e),this.onStateChange();this.forceGoTo(e)}},{key:"getTransition",value:function(){return this.transition||new E}},{key:"load",value:function(e){const n=c.Utils.deferred(),r=this;let i;return(i=t.cache.get(e))||(i=c.Utils.xhr(e),t.cache.set(e,i)),i.then(e=>{if(!r.dom)throw new Error("[Pjax] you need to call the start method first!");const i=r.dom.parseResponse(e);r.dom.putContainer(i),r.cacheEnabled||t.cache.reset(),n.resolve(i)},()=>{r.forceGoTo(e),n.reject()}),n.promise}},{key:"bindEvents",value:function(t,e){t&&(console.warn("listenAllLinks"),document.addEventListener("click",this.onLinkClick.bind(this))),e&&window.addEventListener("popstate",this.onStateChange.bind(this))}},{key:"forceGoTo",value:function(t){t instanceof Location&&(window.location=t),"string"==typeof t&&(window.location.href=t)}},{key:"onLinkClick",value:function(e){let n=e.target;for(;n&&!t.getHref(n);)n=n.parentNode;const r=t.getHref(n);if(t.preventCheck(e,n,r)){if(e.stopPropagation(),e.preventDefault(),this.dispatcher.trigger("linkClicked",n,e),!r)throw new Error("href is null");this.goTo(r)}}},{key:"onStateChange",value:function(){const t=this.getCurrentUrl();if(this.transitionProgress&&this.forceGoTo(t),this.history.currentStatus().url===t)return!1;this.history.add(t);const e=this.load(t),n=this.getTransition();if(this.transitionProgress=!0,this.dispatcher.trigger("initStateChange",this.viewId,this.history.currentStatus(),this.history.prevStatus()),!this.dom)throw new Error("[Pjax] you need to call the start method first!");const r=n.init(this.dom.getContainer(document.body),e);e.then(this.onNewContainerLoaded.bind(this)),r.then(this.onTransitionEnd.bind(this))}},{key:"onNewContainerLoaded",value:function(t){const e=this.history.currentStatus();if(!this.dom)throw new Error("[Pjax] you need to call the start method first!");e.namespace=this.dom.getNamespace(t),this.dispatcher.trigger("newPageReady",this.viewId,this.history.currentStatus(),this.history.prevStatus(),t,this.dom.currentHTML,t.data(),!1)}},{key:"onTransitionEnd",value:function(){this.transitionProgress=!1,this.dispatcher.trigger("transitionCompleted",this.viewId,this.history.currentStatus(),this.history.prevStatus())}},{key:"init",value:function(t,e,n){if(!this.dom)throw new Error("[Pjax] you need to call the start method first!");const r=this.dom.getContainer(document.body);this.$wrapper=t,this.history.add(this.getCurrentUrl(),this.dom.getNamespace(r)),this.dispatcher.trigger("initStateChange",this.viewId,this.history.currentStatus()),this.dispatcher.trigger("newPageReady",this.viewId,this.history.currentStatus(),{},r,this.dom.currentHTML,r.data(),!0),this.dispatcher.trigger("transitionCompleted",this.viewId,this.history.currentStatus()),this.bindEvents(e,n)}}]),t}();u()(S,"ignoreClassLink","no-barba"),u()(S,"cache",new l),u()(S,"instances",{}),u()(S,"DEBUG",Object(c.Debug)("router:Pjax")),n.d(e,"BaseCache",function(){return l}),n.d(e,"CustomTransition",function(){return w}),n.d(e,"BaseTransition",function(){return y}),n.d(e,"HideShowTransition",function(){return E}),n.d(e,"BaseView",function(){return k}),n.d(e,"Pjax",function(){return S}),n.d(e,"HistoryManager",function(){return D}),n.d(e,"Dom",function(){return T}),n.d(e,"Prefetch",function(){return O})},function(t,e,n){var r=n(68)("wks"),i=n(46),o=n(12).Symbol,s="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=s&&o[t]||(s?o:i)("Symbol."+t))}).store=r},function(t,e,n){t.exports=n(144)},function(t,e,n){var r=n(23);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){t.exports=n(195)},function(t,e,n){var r=n(22),i=n(81),o=n(64),s=Object.defineProperty;e.f=n(26)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){t.exports=!n(30)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){"use strict";n.d(e,"a",function(){return l});var r=n(5),i=n.n(r),o=n(4),s=n.n(o),a=n(0),u=n.n(a),c=n(6);let l=function(){function t(e){i()(this,t),u()(this,"components",void 0),u()(this,"debug",Object(c.a)("components:ComponentService")),this.components=e}return s()(t,null,[{key:"type",value:function(t){return t.hasOwnProperty("initialize")&&t.hasOwnProperty("template")?"classic":t.tagName?"webcomponent":void 0}}]),s()(t,[{key:"registWrapper",value:function(t,e){e||(e=t.name);const n=t;return this.components[e]=n,this.components}},{key:"regist",value:function(t,e){if(e||(t.hasOwnProperty("name")&&(e=t.name),"string"==typeof t.tagName&&(e=t.tagName)),this.debug("name",e,t),!e)throw console.error(t),new Error("[ComponentService] name is required");return this.components[e]=t,this.components}},{key:"regists",value:function(t){for(let e in t)if(t.hasOwnProperty(e)){const n=t[e];"string"==typeof n.tagName&&(e=n.tagName),this.regist(n,e)}return this.components}}]),t}()},function(t,e,n){"use strict";const r={and:(t,e)=>t&&e,between:function(t){return t>=(arguments.length<=1?void 0:arguments[1])&&t<=(arguments.length<=2?void 0:arguments[2])},egt:(t,e)=>t>=e,eq:(t,e)=>t===e,gt:(t,e)=>t>e,ne:(t,e)=>t!==e,lt:(t,e)=>t<e,elt:(t,e)=>t<=e,or:(t,e)=>t||e,not:t=>!t};var i=n(2);const o=(t,e)=>0===e?t:o(e,t%e),s={digits:t=>{if(i.a.isNumber(t))return t;const e=t.replace(/[^-\d\.]/g,"");return isNaN(Number(e))?0:Number(e)},dividedBy:(t,e)=>Number(t)/Number(e),even:t=>t%2==0,gcd:o,minus:(t,e)=>Number(t)-Number(e),number:(t,e)=>{const n=i.a.getNumber(t);return e?n||e:n},modulo:(t,e)=>Number(t)%Number(e),plus:(t,e)=>Number(t)+Number(e),random:t=>{if(i.a.isArray(t))return t[Math.floor(Math.random()*t.length)];return null},times:(t,e)=>Number(t)*Number(e),uneven:t=>t%2!=0},a=(t,e)=>i.a.isObject(t)||i.a.isArray(t)?t[e]:i.a.isString(t)&&i.a.isNumber(e)?t.charAt(e):null,u=t=>t&&t.length?t.length:0,c=t=>u(t)<=0,l={parse:t=>{if(i.a.isString(t))return JSON.parse(t);return null},first:t=>a(t,0),last:t=>a(t,t.length-1),contains:(t,e,n)=>{if(i.a.isString(t))return t.indexOf(e)>-1;if(i.a.isArray(t))for(const r in t)if(i.a.isDefined(t[r])&&i.a.isDefined(t[r][e])){if(i.a.isUndefined(n))return!0;if(t[r][e]===n)return!0}if(i.a.isObject(t))for(const r in t)if(t.hasOwnProperty(r)&&r===e){if(i.a.isUndefined(n))return!0;if(t[r][e]===n)return!0}return!1},get:a,set:(t,e,n)=>(n||(n=e),i.a.isObject(t)||i.a.isArray(t)?t[e]=n:t=n,t),match:(t,e,n)=>t.match(new RegExp(e,n)),size:u,empty:c,isLast:(t,e)=>t.length===e+1,range:(t,e,n)=>(e=Number(i.a.isNumber(e)?e:0),(n=Number(i.a.isNumber(n)?n:t.length-1))>t.length-1&&(n=t.length-1),e>n?[]:t.slice(Number(e||0),1+n))};var f=n(34);const h=Object(f.a)("formatter");var p=n(125),d=n.n(p);const m={args:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return(e,r,i,o)=>(n.push(e),n.push(r),n.push(i),n.push(o),t.apply(this,n))},boolean:t=>"true"===t||!0===t,debug:t=>(h(t),t),default:(t,e)=>i.a.isDefined(t)?i.a.isString(t)?t.length>0?t:e:t:e,call:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return t.apply(this,n)},currency:(t,e)=>{let n=t.toFixed(2).toString().replace(".",",");return e&&(n+=e),n},json:function(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];const n=d()(t);return e&&n?n.replace(/'/g,"&#39;"):n}},v=t=>t.toLowerCase(),g=t=>t.trim(),b={append:(t,e)=>t+e,downcase:v,filled:t=>i.a.isString(t)&&!c(t.replace(/\s/g,"")),isString:t=>i.a.isString(t),handleize:t=>(t=(t=g(t)).replace(/[^\w\s]/gi,""),(t=v(t)).replace(/ /g,"-")),pluralize:(t,e,n)=>(null===n&&(n=e+"s"),i.a.isArray(t)&&(t=t.length),1===t?e:n),prepend:(t,e)=>e+t,upcase:t=>t.toUpperCase(),replace:(t,e,n)=>t.replace(new RegExp(e,"g"),n),replace_first:(t,e,n)=>t.replace(e,n),slice:(t,e,n)=>t.slice(e,n),strip:g,strip_html:t=>{const e=document.createElement("DIV");return e.innerHTML=t,e.textContent||e.innerText||""},string:(t,e)=>{if(i.a.isArray(t))for(const e in t)t[e]&&(t[e]=i.a.getString(t[e]));else if(i.a.isObject(t))for(const e in t)t.hasOwnProperty(e)&&(t[e]=i.a.getString(t[e]));else t=i.a.getString(t);return e?t||e:t}};n.d(e,"a",function(){return r}),n.d(e,"b",function(){return s}),n.d(e,"c",function(){return l}),n.d(e,"d",function(){return m}),n.d(e,"e",function(){return b})},function(t,e,n){var r=n(25),i=n(44);t.exports=n(26)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(132),i=n(45);t.exports=function(t){return r(i(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){"use strict";var r=n(79),i=n.n(r);n.d(e,"a",function(){return i.a});i.a},function(t,e,n){"use strict";var r=n(7),i=n.n(r),o=n(5),s=n.n(o),a=n(4),u=n.n(a),c=n(0),l=n.n(c),f=n(2),h=n(9),p=n(55),d=n(14),m=n(36),v=n(6),g=n(53),b=n(27),y=n(54);let w=function(){function t(e,n,r){s()(this,t),l()(this,"binderService",void 0),l()(this,"componentService",void 0),l()(this,"formatterService",void 0),l()(this,"debug",Object(v.a)("binders:ModulesService")),this.binderService=new g.a(e),this.componentService=new b.a(n),this.formatterService=new y.a(r)}return u()(t,[{key:"regist",value:function(t){t.binders&&this.binderService.regists(t.binders),t.components&&this.componentService.regists(t.components),t.formatters&&this.formatterService.regists(t.formatters)}}]),t}();n.d(e,"a",function(){return E});const x=function(t){const e=t.detail;this.observer.value()!==e.newValue&&this.observer.setValue(e.newValue)},C={bind(t){t.addEventListener("publish-binder-change:"+this.type,x.bind(this))},unbind(t){delete this.customData,this.el.removeEventListener("publish-binder-change",x.bind(this))},routine(t,e){if(!this.type)throw new Error("Can't set attribute of "+this.type);const n=t.getAttribute(this.type);null!=e?n!==e&&t.setAttribute(this.type,e):t.removeAttribute(this.type),n!==e&&t.dispatchEvent(new CustomEvent("binder-changed",{detail:{name:this.type,oldValue:n,newValue:e,namespace:null}}))}};let E=function(){function t(){if(s()(this,t),l()(this,"module",void 0),l()(this,"binders",{}),l()(this,"components",{}),l()(this,"formatters",{}),l()(this,"adapters",{".":p.a}),l()(this,"parseTemplate",h.e),l()(this,"parseType",h.f),l()(this,"templateDelimiters",["{","}"]),l()(this,"rootInterface","."),l()(this,"preloadData",!0),l()(this,"_prefix","rv"),l()(this,"_fullPrefix","rv-"),this.module=new w(this.binders,this.components,this.formatters),t.instance)return t.instance;t.instance=this}return u()(t,[{key:"prefix",set:function(t){this._prefix=t,this._fullPrefix=t+"-"},get:function(){return this._prefix}},{key:"fullPrefix",get:function(){return this._fullPrefix}}],[{key:"handler",value:function(t,e,n,r){this.call(t,e,n.view.models,r)}}]),u()(t,[{key:"configure",value:function(t){t&&i()(t).forEach(e=>{const n=t[e];switch(e){case"binders":this.binders=f.a.concat(!1,this.binders,n);break;case"formatters":this.formatters=f.a.concat(!1,this.formatters,n);break;case"components":this.components=f.a.concat(!1,this.components,n);break;case"adapters":case"adapter":this.adapters=f.a.concat(!1,this.adapters,n);break;case"prefix":this.prefix=n;break;case"parseTemplate":this.parseTemplate=n;break;case"parseType":this.parseType=n;break;case"templateDelimiters":this.templateDelimiters=n;break;case"rootInterface":this.rootInterface=n;break;case"preloadData":this.preloadData=n;break;default:console.warn("Option not supported",e,n)}})}},{key:"init",value:function(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(e||(e=document.createElement("div")),this.components[t].hasOwnProperty("initialize")&&this.components[t].hasOwnProperty("template")){const r=this.components[t],i=r.template.call(this,e);null!==i&&(e.innerHTML=i);const o=r.initialize.call(this,e,n),s=this.bind(e,o);return s.bind(),s}}},{key:"getViewOptions",value:function(e){const n={adapters:{},binders:{},components:{},formatters:{},starBinders:{},rootInterface:{},removeBinderAttributes:!0,executeFunctions:!1};return e&&(n.binders=f.a.concat(!1,n.binders,e.binders),n.formatters=f.a.concat(!1,n.formatters,e.formatters),n.components=f.a.concat(!1,n.components,e.components),n.adapters=f.a.concat(!1,n.adapters,e.adapters)),n.prefix=e&&e.prefix?e.prefix:this.prefix,n.fullPrefix=n.prefix?n.prefix+"-":this.fullPrefix,n.templateDelimiters=e&&e.templateDelimiters?e.templateDelimiters:this.templateDelimiters,n.rootInterface=e&&e.rootInterface?e.rootInterface:this.rootInterface,n.preloadData=e&&e.preloadData?e.preloadData:this.preloadData,n.handler=e&&e.handler?e.handler:t.handler,n.binders=f.a.concat(!1,this.binders,n.binders),n.formatters=f.a.concat(!1,this.formatters,n.formatters),n.components=f.a.concat(!1,this.components,n.components),n.adapters=f.a.concat(!1,this.adapters,n.adapters),n.binders&&(n.starBinders=i()(n.binders).filter(t=>t.indexOf("*")>=1)),n}},{key:"bind",value:function(t,e,n){const r=this.getViewOptions(n);e=e||new Object(null),m.a.updateOptions(r);const i=new d.a(t,e,r);return i.bind(),i}}]),t}();l()(E,"fallbackBinder",C),l()(E,"instance",void 0)},function(t,e,n){"use strict";n.d(e,"a",function(){return h});var r=n(7),i=n.n(r),o=n(5),s=n.n(o),a=n(4),u=n.n(a),c=n(0),l=n.n(c),f=n(2);let h=function(){function t(e,n,r){s()(this,t),l()(this,"keypath",void 0),l()(this,"callback",void 0),l()(this,"objectPath",void 0),l()(this,"obj",void 0),l()(this,"target",void 0),l()(this,"key",void 0),l()(this,"tokens",void 0),this.keypath=n,this.callback=r,this.objectPath=[];const i=this.parse();this.key=i.key,this.tokens=i.tokens,this.obj=this.getRootObject(e),this.target=this.realize(),f.a.isObject(this.target)&&this.set(!0,this.key,this.target,this.callback)}return u()(t,null,[{key:"updateOptions",value:function(e){if(!e.adapters)throw new Error("adapters are required!");if(!e.rootInterface)throw new Error("rootInterface is required!");t.adapters=e.adapters,t.interfaces=i()(t.adapters),t.rootInterface=e.rootInterface}},{key:"tokenize",value:function(e,n){const r=[];let i,o,s={i:n,path:""};for(i=0;i<e.length;i++)o=e.charAt(i),~t.interfaces.indexOf(o)?(r.push(s),s={i:o,path:""}):s.path+=o;return r.push(s),r}}]),u()(t,[{key:"parse",value:function(){let e,n;if(!t.interfaces||!t.interfaces.length)throw new Error("[Observer] Must define at least one adapter interface.");if(~t.interfaces.indexOf(this.keypath[0])?(n=this.keypath[0],e=this.keypath.substr(1)):(n=t.rootInterface,e=this.keypath),this.tokens=t.tokenize(e,n),!this.tokens.length)throw new Error("[Observer] No tokens");return this.key=this.tokens.pop(),{key:this.key,tokens:this.tokens}}},{key:"realize",value:function(){let t,e,n=this.obj,r=-1;for(let i=0;i<this.tokens.length;i++)e=this.tokens[i],f.a.isObject(n)?(void 0!==this.objectPath[i]?n!==(t=this.objectPath[i])&&(this.set(!1,e,t,this),this.set(!0,e,n,this),this.objectPath[i]=n):(this.set(!0,e,n,this),this.objectPath[i]=n),n=this.get(e,n)):(-1===r&&(r=i),(t=this.objectPath[i])&&this.set(!1,e,t,this));return-1!==r&&this.objectPath.splice(r),n}},{key:"sync",value:function(){let t,e,n;(t=this.realize())!==this.target?(f.a.isObject(this.target)&&this.set(!1,this.key,this.target,this.callback),f.a.isObject(t)&&this.set(!0,this.key,t,this.callback),e=this.value(),this.target=t,((n=this.value())!==e||n instanceof Function)&&this.callback.sync()):t instanceof Array&&this.callback.sync()}},{key:"value",value:function(){if(f.a.isObject(this.target))return this.get(this.key,this.target)}},{key:"setValue",value:function(e){f.a.isObject(this.target)&&t.adapters[this.key.i].set(this.target,this.key.path,e)}},{key:"get",value:function(e,n){return t.adapters[e.i].get(n,e.path)}},{key:"set",value:function(e,n,r,i){e?t.adapters[n.i].observe(r,n.path,i):t.adapters[n.i].unobserve(r,n.path,i)}},{key:"unobserve",value:function(){let t,e;for(let n=0;n<this.tokens.length;n++)e=this.tokens[n],(t=this.objectPath[n])&&this.set(!1,e,t,this);f.a.isObject(this.target)&&this.set(!1,this.key,this.target,this.callback)}},{key:"getRootObject",value:function(t){let e,n;if(!t.$parent)return t;for(e=this.tokens.length?this.tokens[0].path:this.key.path,n=t;n.$parent&&void 0===n[e];)n=n.$parent;return n}}]),t}();l()(h,"adapters",void 0),l()(h,"interfaces",void 0),l()(h,"rootInterface",void 0)},function(t,e,n){var r=n(33);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=!0},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){t.exports={}},function(t,e,n){var r=n(78),i=n(133),o=n(7),s=n(0);t.exports=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},a=o(n);"function"==typeof i&&(a=a.concat(i(n).filter(function(t){return r(n,t).enumerable}))),a.forEach(function(e){s(t,e,n[e])})}return t}},function(t,e,n){"use strict";(function(t){for(var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],i=0,o=0;o<r.length;o+=1)if(n&&navigator.userAgent.indexOf(r[o])>=0){i=1;break}var s=n&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},i))}};function a(t){return t&&"[object Function]"==={}.toString.call(t)}function u(t,e){if(1!==t.nodeType)return[];var n=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?n[e]:n}function c(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function l(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=u(t),n=e.overflow,r=e.overflowX,i=e.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?t:l(c(t))}var f=n&&!(!window.MSInputMethodContext||!document.documentMode),h=n&&/MSIE 10/.test(navigator.userAgent);function p(t){return 11===t?f:10===t?h:f||h}function d(t){if(!t)return document.documentElement;for(var e=p(10)?document.body:null,n=t.offsetParent||null;n===e&&t.nextElementSibling;)n=(t=t.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===u(n,"position")?d(n):n:t?t.ownerDocument.documentElement:document.documentElement}function m(t){return null!==t.parentNode?m(t.parentNode):t}function v(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var n=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?t:e,i=n?e:t,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var s,a,u=o.commonAncestorContainer;if(t!==u&&e!==u||r.contains(i))return"BODY"===(a=(s=u).nodeName)||"HTML"!==a&&d(s.firstElementChild)!==s?d(u):u;var c=m(t);return c.host?v(c.host,e):v(t,m(e).host)}function g(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var r=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||r)[e]}return t[e]}function b(t,e){var n="x"===e?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(t["border"+n+"Width"],10)+parseFloat(t["border"+r+"Width"],10)}function y(t,e,n,r){return Math.max(e["offset"+t],e["scroll"+t],n["client"+t],n["offset"+t],n["scroll"+t],p(10)?parseInt(n["offset"+t])+parseInt(r["margin"+("Height"===t?"Top":"Left")])+parseInt(r["margin"+("Height"===t?"Bottom":"Right")]):0)}function w(t){var e=t.body,n=t.documentElement,r=p(10)&&getComputedStyle(n);return{height:y("Height",e,n,r),width:y("Width",e,n,r)}}var x=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},C=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),E=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},k=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function D(t){return k({},t,{right:t.left+t.width,bottom:t.top+t.height})}function T(t){var e={};try{if(p(10)){e=t.getBoundingClientRect();var n=g(t,"top"),r=g(t,"left");e.top+=n,e.left+=r,e.bottom+=n,e.right+=r}else e=t.getBoundingClientRect()}catch(t){}var i={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?w(t.ownerDocument):{},s=o.width||t.clientWidth||i.right-i.left,a=o.height||t.clientHeight||i.bottom-i.top,c=t.offsetWidth-s,l=t.offsetHeight-a;if(c||l){var f=u(t);c-=b(f,"x"),l-=b(f,"y"),i.width-=c,i.height-=l}return D(i)}function O(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=p(10),i="HTML"===e.nodeName,o=T(t),s=T(e),a=l(t),c=u(e),f=parseFloat(c.borderTopWidth,10),h=parseFloat(c.borderLeftWidth,10);n&&i&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var d=D({top:o.top-s.top-f,left:o.left-s.left-h,width:o.width,height:o.height});if(d.marginTop=0,d.marginLeft=0,!r&&i){var m=parseFloat(c.marginTop,10),v=parseFloat(c.marginLeft,10);d.top-=f-m,d.bottom-=f-m,d.left-=h-v,d.right-=h-v,d.marginTop=m,d.marginLeft=v}return(r&&!n?e.contains(a):e===a&&"BODY"!==a.nodeName)&&(d=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=g(e,"top"),i=g(e,"left"),o=n?-1:1;return t.top+=r*o,t.bottom+=r*o,t.left+=i*o,t.right+=i*o,t}(d,e)),d}function S(t){if(!t||!t.parentElement||p())return document.documentElement;for(var e=t.parentElement;e&&"none"===u(e,"transform");)e=e.parentElement;return e||document.documentElement}function _(t,e,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},s=i?S(t):v(t,e);if("viewport"===r)o=function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=t.ownerDocument.documentElement,r=O(t,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),s=e?0:g(n),a=e?0:g(n,"left");return D({top:s-r.top+r.marginTop,left:a-r.left+r.marginLeft,width:i,height:o})}(s,i);else{var a=void 0;"scrollParent"===r?"BODY"===(a=l(c(e))).nodeName&&(a=t.ownerDocument.documentElement):a="window"===r?t.ownerDocument.documentElement:r;var f=O(a,s,i);if("HTML"!==a.nodeName||function t(e){var n=e.nodeName;if("BODY"===n||"HTML"===n)return!1;if("fixed"===u(e,"position"))return!0;var r=c(e);return!!r&&t(r)}(s))o=f;else{var h=w(t.ownerDocument),p=h.height,d=h.width;o.top+=f.top-f.marginTop,o.bottom=p+f.top,o.left+=f.left-f.marginLeft,o.right=d+f.left}}var m="number"==typeof(n=n||0);return o.left+=m?n:n.left||0,o.top+=m?n:n.top||0,o.right-=m?n:n.right||0,o.bottom-=m?n:n.bottom||0,o}function A(t,e,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var s=_(n,r,o,i),a={top:{width:s.width,height:e.top-s.top},right:{width:s.right-e.right,height:s.height},bottom:{width:s.width,height:s.bottom-e.bottom},left:{width:e.left-s.left,height:s.height}},u=Object.keys(a).map(function(t){return k({key:t},a[t],{area:(e=a[t],e.width*e.height)});var e}).sort(function(t,e){return e.area-t.area}),c=u.filter(function(t){var e=t.width,r=t.height;return e>=n.clientWidth&&r>=n.clientHeight}),l=c.length>0?c[0].key:u[0].key,f=t.split("-")[1];return l+(f?"-"+f:"")}function N(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return O(n,r?S(e):v(e,n),r)}function j(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),n=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),r=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+r,height:t.offsetHeight+n}}function L(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function P(t,e,n){n=n.split("-")[0];var r=j(t),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),s=o?"top":"left",a=o?"left":"top",u=o?"height":"width",c=o?"width":"height";return i[s]=e[s]+e[u]/2-r[u]/2,i[a]=n===a?e[a]-r[c]:e[L(a)],i}function F(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function M(t,e,n){return(void 0===n?t:t.slice(0,function(t,e,n){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===n});var r=F(t,function(t){return t[e]===n});return t.indexOf(r)}(t,"name",n))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=t.function||t.fn;t.enabled&&a(n)&&(e.offsets.popper=D(e.offsets.popper),e.offsets.reference=D(e.offsets.reference),e=n(e,t))}),e}function R(t,e){return t.some(function(t){var n=t.name;return t.enabled&&n===e})}function H(t){for(var e=[!1,"ms","Webkit","Moz","O"],n=t.charAt(0).toUpperCase()+t.slice(1),r=0;r<e.length;r++){var i=e[r],o=i?""+i+n:t;if(void 0!==document.body.style[o])return o}return null}function I(t){var e=t.ownerDocument;return e?e.defaultView:window}function $(t,e,n,r){n.updateBound=r,I(t).addEventListener("resize",n.updateBound,{passive:!0});var i=l(t);return function t(e,n,r,i){var o="BODY"===e.nodeName,s=o?e.ownerDocument.defaultView:e;s.addEventListener(n,r,{passive:!0}),o||t(l(s.parentNode),n,r,i),i.push(s)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function U(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,I(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function B(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function q(t,e){Object.keys(e).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&B(e[n])&&(r="px"),t.style[n]=e[n]+r})}var W=n&&/Firefox/i.test(navigator.userAgent);function J(t,e,n){var r=F(t,function(t){return t.name===e}),i=!!r&&t.some(function(t){return t.name===n&&t.enabled&&t.order<r.order});if(!i){var o="`"+e+"`",s="`"+n+"`";console.warn(s+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var V=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],Q=V.slice(3);function Y(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Q.indexOf(t),r=Q.slice(n+1).concat(Q.slice(0,n));return e?r.reverse():r}var X={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function G(t,e,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),s=t.split(/(\+|\-)/).map(function(t){return t.trim()}),a=s.indexOf(F(s,function(t){return-1!==t.search(/,|\s/)}));s[a]&&-1===s[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,c=-1!==a?[s.slice(0,a).concat([s[a].split(u)[0]]),[s[a].split(u)[1]].concat(s.slice(a+1))]:[s];return(c=c.map(function(t,r){var i=(1===r?!o:o)?"height":"width",s=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,s=!0,t):s?(t[t.length-1]+=e,s=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,n,r){var i=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],s=i[2];if(!o)return t;if(0===s.indexOf("%")){var a=void 0;switch(s){case"%p":a=n;break;case"%":case"%r":default:a=r}return D(a)[e]/100*o}if("vh"===s||"vw"===s)return("vh"===s?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(t,i,e,n)})})).forEach(function(t,e){t.forEach(function(n,r){B(n)&&(i[e]+=n*("-"===t[r-1]?-1:1))})}),i}var z={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,n=e.split("-")[0],r=e.split("-")[1];if(r){var i=t.offsets,o=i.reference,s=i.popper,a=-1!==["bottom","top"].indexOf(n),u=a?"left":"top",c=a?"width":"height",l={start:E({},u,o[u]),end:E({},u,o[u]+o[c]-s[c])};t.offsets.popper=k({},s,l[r])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var n=e.offset,r=t.placement,i=t.offsets,o=i.popper,s=i.reference,a=r.split("-")[0],u=void 0;return u=B(+n)?[+n,0]:G(n,o,s,a),"left"===a?(o.top+=u[0],o.left-=u[1]):"right"===a?(o.top+=u[0],o.left+=u[1]):"top"===a?(o.left+=u[0],o.top-=u[1]):"bottom"===a&&(o.left+=u[0],o.top+=u[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var n=e.boundariesElement||d(t.instance.popper);t.instance.reference===n&&(n=d(n));var r=H("transform"),i=t.instance.popper.style,o=i.top,s=i.left,a=i[r];i.top="",i.left="",i[r]="";var u=_(t.instance.popper,t.instance.reference,e.padding,n,t.positionFixed);i.top=o,i.left=s,i[r]=a,e.boundaries=u;var c=e.priority,l=t.offsets.popper,f={primary:function(t){var n=l[t];return l[t]<u[t]&&!e.escapeWithReference&&(n=Math.max(l[t],u[t])),E({},t,n)},secondary:function(t){var n="right"===t?"left":"top",r=l[n];return l[t]>u[t]&&!e.escapeWithReference&&(r=Math.min(l[n],u[t]-("right"===t?l.width:l.height))),E({},n,r)}};return c.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";l=k({},l,f[e](t))}),t.offsets.popper=l,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,n=e.popper,r=e.reference,i=t.placement.split("-")[0],o=Math.floor,s=-1!==["top","bottom"].indexOf(i),a=s?"right":"bottom",u=s?"left":"top",c=s?"width":"height";return n[a]<o(r[u])&&(t.offsets.popper[u]=o(r[u])-n[c]),n[u]>o(r[a])&&(t.offsets.popper[u]=o(r[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var n;if(!J(t.instance.modifiers,"arrow","keepTogether"))return t;var r=e.element;if("string"==typeof r){if(!(r=t.instance.popper.querySelector(r)))return t}else if(!t.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var i=t.placement.split("-")[0],o=t.offsets,s=o.popper,a=o.reference,c=-1!==["left","right"].indexOf(i),l=c?"height":"width",f=c?"Top":"Left",h=f.toLowerCase(),p=c?"left":"top",d=c?"bottom":"right",m=j(r)[l];a[d]-m<s[h]&&(t.offsets.popper[h]-=s[h]-(a[d]-m)),a[h]+m>s[d]&&(t.offsets.popper[h]+=a[h]+m-s[d]),t.offsets.popper=D(t.offsets.popper);var v=a[h]+a[l]/2-m/2,g=u(t.instance.popper),b=parseFloat(g["margin"+f],10),y=parseFloat(g["border"+f+"Width"],10),w=v-t.offsets.popper[h]-b-y;return w=Math.max(Math.min(s[l]-m,w),0),t.arrowElement=r,t.offsets.arrow=(E(n={},h,Math.round(w)),E(n,p,""),n),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(R(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var n=_(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),r=t.placement.split("-")[0],i=L(r),o=t.placement.split("-")[1]||"",s=[];switch(e.behavior){case X.FLIP:s=[r,i];break;case X.CLOCKWISE:s=Y(r);break;case X.COUNTERCLOCKWISE:s=Y(r,!0);break;default:s=e.behavior}return s.forEach(function(a,u){if(r!==a||s.length===u+1)return t;r=t.placement.split("-")[0],i=L(r);var c=t.offsets.popper,l=t.offsets.reference,f=Math.floor,h="left"===r&&f(c.right)>f(l.left)||"right"===r&&f(c.left)<f(l.right)||"top"===r&&f(c.bottom)>f(l.top)||"bottom"===r&&f(c.top)<f(l.bottom),p=f(c.left)<f(n.left),d=f(c.right)>f(n.right),m=f(c.top)<f(n.top),v=f(c.bottom)>f(n.bottom),g="left"===r&&p||"right"===r&&d||"top"===r&&m||"bottom"===r&&v,b=-1!==["top","bottom"].indexOf(r),y=!!e.flipVariations&&(b&&"start"===o&&p||b&&"end"===o&&d||!b&&"start"===o&&m||!b&&"end"===o&&v);(h||g||y)&&(t.flipped=!0,(h||g)&&(r=s[u+1]),y&&(o=function(t){return"end"===t?"start":"start"===t?"end":t}(o)),t.placement=r+(o?"-"+o:""),t.offsets.popper=k({},t.offsets.popper,P(t.instance.popper,t.offsets.reference,t.placement)),t=M(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,n=e.split("-")[0],r=t.offsets,i=r.popper,o=r.reference,s=-1!==["left","right"].indexOf(n),a=-1===["top","left"].indexOf(n);return i[s?"left":"top"]=o[n]-(a?i[s?"width":"height"]:0),t.placement=L(e),t.offsets.popper=D(i),t}},hide:{order:800,enabled:!0,fn:function(t){if(!J(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,n=F(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<n.top||e.left>n.right||e.top>n.bottom||e.right<n.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var n=e.x,r=e.y,i=t.offsets.popper,o=F(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var s=void 0!==o?o:e.gpuAcceleration,a=d(t.instance.popper),u=T(a),c={position:i.position},l=function(t,e){var n=t.offsets,r=n.popper,i=n.reference,o=Math.round,s=Math.floor,a=function(t){return t},u=o(i.width),c=o(r.width),l=-1!==["left","right"].indexOf(t.placement),f=-1!==t.placement.indexOf("-"),h=e?l||f||u%2==c%2?o:s:a,p=e?o:a;return{left:h(u%2==1&&c%2==1&&!f&&e?r.left-1:r.left),top:p(r.top),bottom:p(r.bottom),right:h(r.right)}}(t,window.devicePixelRatio<2||!W),f="bottom"===n?"top":"bottom",h="right"===r?"left":"right",p=H("transform"),m=void 0,v=void 0;if(v="bottom"===f?"HTML"===a.nodeName?-a.clientHeight+l.bottom:-u.height+l.bottom:l.top,m="right"===h?"HTML"===a.nodeName?-a.clientWidth+l.right:-u.width+l.right:l.left,s&&p)c[p]="translate3d("+m+"px, "+v+"px, 0)",c[f]=0,c[h]=0,c.willChange="transform";else{var g="bottom"===f?-1:1,b="right"===h?-1:1;c[f]=v*g,c[h]=m*b,c.willChange=f+", "+h}var y={"x-placement":t.placement};return t.attributes=k({},y,t.attributes),t.styles=k({},c,t.styles),t.arrowStyles=k({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,n;return q(t.instance.popper,t.styles),e=t.instance.popper,n=t.attributes,Object.keys(n).forEach(function(t){!1!==n[t]?e.setAttribute(t,n[t]):e.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&q(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,n,r,i){var o=N(i,e,t,n.positionFixed),s=A(n.placement,o,e,t,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return e.setAttribute("x-placement",s),q(e,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},K=function(){function t(e,n){var r=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};x(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=s(this.update.bind(this)),this.options=k({},t.Defaults,i),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(k({},t.Defaults.modifiers,i.modifiers)).forEach(function(e){r.options.modifiers[e]=k({},t.Defaults.modifiers[e]||{},i.modifiers?i.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return k({name:t},r.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&a(t.onLoad)&&t.onLoad(r.reference,r.popper,r.options,t,r.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return C(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=N(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=A(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=P(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=M(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,R(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=$(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return U.call(this)}}]),t}();K.Utils=("undefined"!=typeof window?window:t).PopperUtils,K.placements=V,K.Defaults=z,e.a=K}).call(this,n(217))},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(25).f,i=n(31),o=n(20)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e,n){var r=n(84),i=n(73);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){var r=n(22),i=n(139),o=n(73),s=n(72)("IE_PROTO"),a=function(){},u=function(){var t,e=n(63)("iframe"),r=o.length;for(e.style.display="none",n(88).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),u=t.F;r--;)delete u.prototype[o[r]];return u()};t.exports=Object.create||function(t,e){var n;return null!==t?(a.prototype=r(t),n=new a,a.prototype=null,n[s]=t):n=u(),void 0===e?n:i(n,e)}},function(t,e){var n=t.exports={version:"2.6.3"};"number"==typeof __e&&(__e=n)},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){t.exports=n(128)},function(t,e,n){"use strict";n.d(e,"a",function(){return f});var r=n(5),i=n.n(r),o=n(4),s=n.n(o),a=n(0),u=n.n(a),c=n(6),l=n(2);let f=function(){function t(e){i()(this,t),u()(this,"binders",void 0),u()(this,"debug",Object(c.a)("binders:BindersService")),this.binders=e}return s()(t,[{key:"registWrapper",value:function(t,e){e||(e=t.name);const n=t.binder;return this.binders[e]=n,this.binders}},{key:"regist",value:function(t,e){if(t.hasOwnProperty("binder")&&(t=t,e||(e=t.name),t=t.binder),this.debug("name",e,t),!e)throw new Error("[BindersService] name is required");return this.binders[e]=t,this.binders}},{key:"regists",value:function(t){if(l.a.isArray(t))for(let e=0;e<t.length;e++){const n=t[e];this.regist(n.binder,n.name)}if(l.a.isObject(t))for(const e in t)t.hasOwnProperty(e)&&this.regist(t[e],e);return this.binders}}]),t}()},function(t,e,n){"use strict";n.d(e,"a",function(){return f});var r=n(5),i=n.n(r),o=n(4),s=n.n(o),a=n(0),u=n.n(a),c=n(6),l=n(2);let f=function(){function t(e){i()(this,t),u()(this,"formatters",void 0),u()(this,"debug",Object(c.a)("formatters:FormatterService")),this.formatters=e}return s()(t,[{key:"regist",value:function(t,e){if(e||(t.hasOwnProperty("constructor")&&(e=t.constructor.name),t.hasOwnProperty("name")&&(e=t.name)),this.debug("name",e,t),!e)throw new Error("[FormatterService] name is required");return this.formatters[e]=t,this.formatters}},{key:"regists",value:function(t){if(l.a.isArray(t))for(let e=0;e<t.length;e++){const n=t[e];this.regist(n.formatter,n.name)}if(l.a.isObject(t))for(const e in t)t.hasOwnProperty(e)&&this.regist(t[e],e);return this.formatters}}]),t}()},function(t,e,n){"use strict";n.d(e,"a",function(){return v});var r=n(52),i=n.n(r),o=n(78),s=n.n(o),a=n(7),u=n.n(a),c=n(5),l=n.n(c),f=n(4),h=n.n(f),p=n(0),d=n.n(p);let m=function(){function t(){l()(this,t),d()(this,"counter",0),d()(this,"weakmap",{})}return h()(t,[{key:"weakReference",value:function(t){if(!t.hasOwnProperty("__rv")){const e=this.counter++;Object.defineProperty(t,"__rv",{value:e})}return this.weakmap[t.__rv]||(this.weakmap[t.__rv]={callbacks:{}}),this.weakmap[t.__rv]}},{key:"cleanupWeakReference",value:function(t,e){u()(t.callbacks).length||t.pointers&&u()(t.pointers).length||delete this.weakmap[e]}},{key:"stubFunction",value:function(t,e){const n=t[e],r=this.weakReference(t),i=this.weakmap;t[e]=function(){for(var e=arguments.length,o=new Array(e),s=0;s<e;s++)o[s]=arguments[s];const a=n.apply(t,o);return u()(r.pointers).forEach(t=>{const e=r.pointers[t];i[t]&&i[t].callbacks[e]instanceof Array&&i[t].callbacks[e].forEach(t=>{t.sync()})}),a}}},{key:"observeMutations",value:function(e,n,r){if(e instanceof Array){const i=this.weakReference(e);i.pointers||(i.pointers={},t.ARRAY_METHODS.forEach(t=>{this.stubFunction(e,t)})),i.pointers[n]||(i.pointers[n]=[]),-1===i.pointers[n].indexOf(r)&&i.pointers[n].push(r)}}},{key:"unobserveMutations",value:function(t,e,n){if(t instanceof Array&&null!=t.__rv){const r=this.weakmap[t.__rv];if(r){const i=r.pointers[e];if(i){const o=i.indexOf(n);o>-1&&i.splice(o,1),i.length||delete r.pointers[e],this.cleanupWeakReference(r,t.__rv)}}}}},{key:"observe",value:function(t,e,n){let r;const o=this.weakReference(t).callbacks;if(!o[e]){o[e]=[];const n=s()(t,e);n&&(n.get||n.set||!n.configurable)||(r=t[e],i()(t,e,{enumerable:!0,get:()=>r,set:n=>{if(n!==r){this.unobserveMutations(r,t.__rv,e),r=n;const i=this.weakmap[t.__rv];if(i){const r=i.callbacks[e];r&&r.forEach(t=>{t.sync()}),this.observeMutations(n,t.__rv,e)}}}}))}-1===o[e].indexOf(n)&&o[e].push(n),this.observeMutations(t[e],t.__rv,e)}},{key:"unobserve",value:function(t,e,n){const r=this.weakmap[t.__rv];if(r){const i=r.callbacks[e];if(i){const o=i.indexOf(n);o>-1&&(i.splice(o,1),i.length||(delete r.callbacks[e],this.unobserveMutations(t[e],t.__rv,e))),this.cleanupWeakReference(r,t.__rv)}}}},{key:"get",value:function(t,e){return t[e]}},{key:"set",value:function(t,e,n){t[e]=n}}]),t}();d()(m,"ARRAY_METHODS",["push","pop","shift","unshift","sort","reverse","splice"]);const v=new m},function(t,e,n){"use strict";n.d(e,"a",function(){return m});var r=n(7),i=n.n(r),o=n(5),s=n.n(o),a=n(4),u=n.n(a),c=n(0),l=n.n(c),f=n(9),h=n(36),p=n(2),d=n(6);let m=function(){function t(e,n,r,i,o,a,u){s()(this,t),l()(this,"value",void 0),l()(this,"observer",void 0),l()(this,"view",void 0),l()(this,"el",void 0),l()(this,"type",void 0),l()(this,"binder",void 0),l()(this,"formatters",void 0),l()(this,"formatterObservers",{}),l()(this,"keypath",void 0),l()(this,"args",void 0),l()(this,"model",void 0),l()(this,"marker",void 0),l()(this,"_bound",void 0),l()(this,"customData",void 0),l()(this,"debug",void 0),this.view=e,this.el=n,this.type=r,this.keypath=i,this.binder=o,this.formatters=a,this.model=void 0,this.customData={},this.debug=Object(d.a)("riba:Binding"),this.args=u&&r?this.getStarArguments(u,r):new Array}return u()(t,[{key:"observe",value:function(t,e,n){return new h.a(t,e,n)}},{key:"parseTarget",value:function(){if(this.keypath){const t=Object(f.f)(this.keypath);if(t.type===f.b)this.value=t.value;else{if(t.type!==f.a)throw new Error("Unknown type in token");this.observer=this.observe(this.view.models,this.keypath,this),this.model=this.observer.target}}else this.value=void 0}},{key:"getIterationAlias",value:function(t){return"%"+t+"%"}},{key:"parseFormatterArguments",value:function(t,e){return t.map(f.f).map((t,n)=>{let r=t.type,i=t.value;if(r===f.b){return i}if(r===f.a){const t=i;this.formatterObservers[e]||(this.formatterObservers[e]={});let r=this.formatterObservers[e][n];return r||(r=this.observe(this.view.models,t,this),this.formatterObservers[e][n]=r),r.value()}throw new Error("Unknown argument type")})}},{key:"formattedValue",value:function(e){if(null===this.formatters)throw new Error("formatters is null");return this.formatters.reduce((e,n,r)=>{const i=n.match(t.FORMATTER_ARGS);if(null===i)throw new Error(`No args matched from FORMATTER_ARGS "${n}"`);const o=i.shift();if(!o)throw new Error("No id found in args");if(!this.view.options.formatters)throw new Error("No formatters are defined");const s=this.view.options.formatters[o],a=this.parseFormatterArguments(i,r);let u;return s&&s.read instanceof Function?u=s.read:s instanceof Function&&(u=s),u instanceof Function&&(e=u.apply(this.model,[e,...a])),e},e)}},{key:"eventHandler",value:function(t,e){const n=this,r=n.view.options.handler;return i=>{if(!r)throw new Error("No handler defined in binding.view.options.handler");r.call(t,this,i,n,e)}}},{key:"set",value:function(t){let e;if(t=t instanceof Function&&!this.binder.function&&this.view.options.executeFunctions?this.formattedValue(t.call(this.model)):this.formattedValue(t),null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("routine")?(this.binder=this.binder,e=this.binder.routine):(this.binder=this.binder,e=this.binder),e instanceof Function&&(t&&"function"==typeof t.then&&"function"==typeof t.catch?t.then(t=>{e.call(this,this.el,t)}).catch(t=>{console.error(t)}):e.call(this,this.el,t))}},{key:"sync",value:function(){this.observer?(this.model=this.observer.target,this.set(this.observer.value())):this.set(this.value)}},{key:"publish",value:function(){if(this.observer){if(null===this.formatters)throw new Error("formatters is null");const e=this.formatters.reduceRight((e,n,r)=>{const i=n.split(t.FORMATTER_SPLIT),o=i.shift();if(!o)throw new Error("id not defined");if(!this.view.options.formatters)return;const s=this.view.options.formatters[o],a=this.parseFormatterArguments(i,r);return s&&s.publish&&(e=s.publish(e,...a)),e},this.getValue(this.el));this.observer.setValue(e)}}},{key:"bind",value:function(){if(this.parseTarget(),this.binder&&this.binder.hasOwnProperty("bind")){if(this.binder=this.binder,!this.binder.bind&&"function"!=typeof this.binder.bind)throw new Error("the method bind is not a function");this.binder.bind.call(this,this.el)}this.view.options.preloadData&&this.sync()}},{key:"unbind",value:function(){if(null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("bind")&&(this.binder=this.binder,this.binder.unbind&&this.binder.unbind.call(this,this.el)),this.observer&&this.observer.unobserve(),i()(this.formatterObservers).forEach(t=>{const e=this.formatterObservers[t];i()(e).forEach(t=>{e[t].unobserve()})}),this.formatterObservers={}}},{key:"update",value:function(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this.observer&&(this.model=this.observer.target),null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("update")&&(this.binder=this.binder,this.binder.update&&this.binder.update.call(this,t))}},{key:"getValue",value:function(t){if(null===this.binder)throw new Error("binder is null");if(this.binder.hasOwnProperty("getValue")){if(this.binder=this.binder,"function"!=typeof this.binder.getValue)throw new Error("getValue is not a function");return this.binder.getValue.call(this,t)}return p.a.getInputValue(t)}},{key:"getStarArguments",value:function(t,e){const n=new Array;new RegExp(`^${t.replace(/\*/g,".+")}$`).test(e)&&e.split("-")[0]===t.split("-")[0]||"*"!==t&&console.error("Nodename not matchs the identifier,",t,e);const r=t.split("*");if(r.length>0){if(r.length-1<=1)n.push(e.slice(t.length-1));else{const t=r[0];let i=e.slice(t.length);r.forEach((t,e)=>{if(e>0){let o=i.split(t)[0];e===r.length-1&&(o=i),p.a.isNumber(o)&&(o=Number(o)),i=i.substring(i.indexOf(t)+1),n.push(o)}})}}return n}}]),t}();l()(m,"FORMATTER_ARGS",/[^\s']+|'([^']|'[^\s])*'|"([^"]|"[^\s])*"/g),l()(m,"FORMATTER_SPLIT",/\s+/)},function(t,e,n){"use strict";n.d(e,"a",function(){return g});var r=n(24),i=n.n(r),o=n(7),s=n.n(o),a=n(5),u=n.n(a),c=n(4),l=n.n(c),f=n(0),h=n.n(f),p=n(9),d=n(14),m=n(36),v=n(2);let g=function(){function t(e,n,r){if(u()(this,t),h()(this,"view",void 0),h()(this,"el",void 0),h()(this,"type",void 0),h()(this,"component",void 0),h()(this,"static",{}),h()(this,"keypaths",{}),h()(this,"formattersObservers",{}),h()(this,"observers",void 0),h()(this,"bindingPrefix",void 0),h()(this,"pipes",{}),!e.options.components)throw new Error("No components found!");this.view=e,this.el=n,this.type=r,this.component=e.options.components[this.type],this.static={},this.observers={},this.bindingPrefix=e.options.prefix+"-",this.parseTarget(),this.sync()}return l()(t,[{key:"observe",value:function(t,e,n){return new m.a(t,e,n)}},{key:"sync",value:function(){s()(this.static).forEach(t=>{this.component.bind&&-1!==this.component.bind.indexOf(t)&&(this[t]=this.static[t])}),s()(this.observers).forEach(t=>{this.component.bind&&-1!==this.component.bind.indexOf(t)&&(this[t]=this.observers[t].value())})}},{key:"publish",value:function(t,e){t&&this.observers[t]&&this.observers[t].setValue(e)}},{key:"locals",value:function(){const t={};return s()(this.static).forEach(e=>{t[e]=this.static[e]}),s()(this.observers).forEach(e=>{t[e]=this.observers[e].value()}),t}},{key:"getMergedOptions",value:function(){const t={adapters:i()(null),binders:i()(null),components:i()(null),formatters:i()(null),starBinders:i()(null),rootInterface:i()(null)};return this.component.binders&&(t.binders=v.a.concat(!1,t.binders,this.component.binders)),this.component.formatters&&(t.formatters=v.a.concat(!1,t.formatters,this.component.formatters)),this.component.components&&(t.components=v.a.concat(!1,t.components,this.component.components)),this.component.adapters&&(t.adapters=v.a.concat(!1,t.adapters,this.component.adapters)),t.binders=v.a.concat(!1,t.binders,this.view.options.binders),t.formatters=v.a.concat(!1,t.formatters,this.view.options.formatters),t.components=v.a.concat(!1,t.components,this.view.options.components),t.adapters=v.a.concat(!1,t.adapters,this.view.options.adapters),t.prefix=this.component.prefix?this.component.prefix:this.view.options.prefix,t.templateDelimiters=this.component.templateDelimiters?this.component.templateDelimiters:this.view.options.templateDelimiters,t.rootInterface=this.component.rootInterface?this.component.rootInterface:this.view.options.rootInterface,t.preloadData=this.component.preloadData?this.component.preloadData:this.view.options.preloadData,t.handler=this.component.handler?this.component.handler:this.view.options.handler,t.binders&&(t.starBinders=s()(t.binders).filter(t=>t.indexOf("*")>0)),t}},{key:"bind",value:function(){if(this.el._bound)this.view.bind();else{const t=this.component.template.call(this,this.el);null!==t&&(this.el.innerHTML=t);const e=this.component.initialize.call(this,this.el,this.locals());this.view=new d.a(Array.prototype.slice.call(this.el.childNodes),e,this.getMergedOptions()),this.view.bind(),this.el._bound=!0}}},{key:"parseTarget",value:function(){for(let t=0,e=this.el.attributes.length;t<e;t++){const e=this.el.attributes[t];if(0!==e.name.indexOf(this.bindingPrefix)){const t=v.a.camelCase(e.name),n=e.value,r=Object(p.c)(n);r.pipes.length>0&&console.warn("Formatters on component arguments not supported for the moment",r.pipes),this.pipes[t]=r.pipes;const i=Object(p.f)(r.keypath);if(void 0!==this.component.static&&-1!==this.component.static.indexOf(t))this.static[t]=e.value;else if(i.type===p.b)this.static[t]=i.value;else{if(i.type!==p.a)throw new Error("can't parse component attribute");this.keypaths[t]=e.value,this.observers[t]=this.observe(this.view.models,this.keypaths[t],this)}}}}},{key:"unbind",value:function(){s()(this.observers).forEach(t=>{this.observers[t].unobserve()}),s()(this.formattersObservers).forEach(t=>{s()(this.formattersObservers[t]).forEach(e=>{s()(this.formattersObservers[t][e]).forEach(n=>{this.formattersObservers[t][e][n].unobserve()})})}),this.view&&this.view.unbind.call(this)}}]),t}()},function(t,e,n){t.exports=n(209)},function(t,e,n){"use strict";var r=n(6);const i={function:!0,priority:1e3,bind(t){const e=Object(r.b)(t),n=this.args[0];e.addClass(n)},unbind(t){},routine(t,e){const n=Object(r.b)(t),i=this.args[0];e?n.addClass(i+"-start").removeClass(i+"-done"):n.removeClass(i+"-start").addClass(i+"-done")}};var o=n(2);const s=function(t,e){o.a.extend(!1,this.view.models,e)};var a=n(18);const u={function:!0,priority:1e3,bind(t){const e=Object(a.a)(t);this.customData={$el:e,staticClasses:e.attr("class")}},unbind(t){delete this.customData},routine(t,e){e&&(Object(a.a)(t).attr("class",this.customData.staticClasses),Object(a.a)(t).addClass(e))}},c={publishes:!0,priority:2e3,bind(t){const e=this;this.customData={},this.customData.callback||(this.customData.callback=(()=>{e.publish()})),t.addEventListener("change",this.customData.callback)},unbind(t){t.removeEventListener("change",this.customData.callback)},routine(t,e){"radio"===t.type?t.checked=o.a.getString(t.value)===o.a.getString(e):t.checked=!!e}},l=function(t,e){const n=Object(a.a)(t),r=this.args[0];return e?n.addClass(r):n.removeClass(r),e},f=function(t,e){const n=Object(a.a)(t),r=this.args[0];return e?n.css(r,e):n.css(r,""),e},h=(t,e)=>{t.disabled=!e},p=(t,e)=>{t.disabled=!!e},d=t=>{return{binder:{function:!0,priority:1e3,bind(t){this.customData||(this.customData={handler:null})},unbind(e){if(this.customData.handler){if(null===this.args)throw new Error("args is null");t(e).off(this.args[0],this.customData.handler)}},routine(e,n){if(null===this.args)throw new Error("args is null");const r=this.args[0];this.customData.handler&&t(e).off(r,this.customData),this.customData.handler=this.eventHandler(n,e);try{t(e).on(r,this.customData.handler)}catch(n){console.warn(n),t(e).on(r,t=>{this.customData.handler(t)})}}},name:"on-*"}},m=(t,e)=>{const n=Object(a.a)(t);return e&&n.removeClass(e),e};var v=n(14);const g={block:!0,priority:4e3,bind(t){this.customData={},this.marker?!1===this.customData.bound&&this.customData.nested&&this.customData.nested.bind():(this.marker=document.createComment(" riba: "+this.type+" "+this.keypath+" "),this.customData.attached=!1,t.parentNode&&(t.parentNode.insertBefore(this.marker,t),t.parentNode.removeChild(t))),this.customData.bound=!0},unbind(){this.customData.nested&&(this.customData.nested.unbind(),this.customData.bound=!1)},routine(t,e){(e=!!e)!==this.customData.attached&&(e?(this.customData.nested||(this.customData.nested=new v.a(t,this.view.models,this.view.options),this.customData.nested.bind()),this.marker&&this.marker.parentNode&&this.marker.parentNode.insertBefore(t,this.marker.nextSibling),this.customData.attached=!0):(t.parentNode&&t.parentNode.removeChild(t),this.customData.attached=!1))},update(t){this.customData.nested&&this.customData.nested.update(t)}};var b=n(7),y=n.n(b),w=n(62),x=n.n(w);const C={block:!0,priority:4e3,bind(t){this.marker?this.customData.iterated.forEach(t=>{t.bind()}):(this.marker=document.createComment(` riba: ${this.type} `),this.customData={iterated:[]},t.parentNode&&(t.parentNode.insertBefore(this.marker,t),t.parentNode.removeChild(t)))},unbind(t){this.customData.iterated&&this.customData.iterated.forEach(t=>{t.unbind()})},routine(t,e){if(null===this.args)throw new Error("args is null");const n=this.args[0];if(e=e||[],!x()(e))throw new Error("each-"+n+" needs an array to iterate over, but it is");const r=t.getAttribute("index-property")||this.getIterationAlias(n);e.forEach((t,e)=>{const i={$parent:this.view.models};i[r]=e,i[n]=t;let o=this.customData.iterated[e];if(o)if(o.models[n]!==t){let s,a;for(let r=e+1;r<this.customData.iterated.length;r++)if((a=this.customData.iterated[r]).models[n]===t){s=r;break}if(void 0!==s){if(this.customData.iterated.splice(s,1),!this.marker||!this.marker.parentNode)throw new Error("Marker has no parent node");this.marker.parentNode.insertBefore(a.els[0],o.els[0]),a.models[r]=e}else a=v.a.create(this,i,o.els[0]);this.customData.iterated.splice(e,0,a)}else o.models[r]=e;else{let t;if(this.customData.iterated.length)t=this.customData.iterated[this.customData.iterated.length-1].els[0];else{if(!this.marker)throw new Error("previous not defined");t=this.marker}o=v.a.create(this,i,t.nextSibling),this.customData.iterated.push(o)}}),this.customData.iterated.length>e.length&&o.a.times(this.customData.iterated.length-e.length,()=>{const t=this.customData.iterated.pop();if(t.unbind(),!this.marker||!this.marker.parentNode)throw new Error("Marker has no parent node");this.marker.parentNode.removeChild(t.els[0])}),"OPTION"===t.nodeName&&this.view.bindings&&this.view.bindings.forEach(t=>{this.marker&&t.el===this.marker.parentNode&&"value"===t.type&&t.sync&&t.sync()})},update(t){const e={};y()(t).forEach(n=>{if(null===this.args)throw new Error("args is null");n!==this.args[0]&&(e[n]=t[n])}),this.customData.iterated.forEach(t=>{t.update(e)})}},E=(t,e)=>{t.innerHTML=null!=e?e:""},k=(t,e)=>{t.style.display=e?"none":"",e?t.setAttribute("hidden","true"):t.removeAttribute("hidden")},D=(t,e)=>{t.style.display=e?"":"none",e?t.removeAttribute("hidden"):t.setAttribute("hidden","true")},T=(t,e)=>{t.textContent=null!=e?e:""},O=Object(r.a)("binder:value"),S=t=>{const e={};return e.$el=Object(r.b)(t),e.type=e.$el.prop("type"),e.tagName=e.$el.prop("tagName"),e.contenteditable=!!e.$el.attr("contenteditable"),e.isRadio="INPUT"===e.tagName&&"radio"===e.type,e},_={publishes:!0,priority:3e3,bind(t){if(this.customData||(this.customData=S(t)),!this.customData.isRadio){this.customData.event=t.getAttribute("event-name")||("SELECT"===t.tagName?"change":"input");const e=this;this.customData.callback||(this.customData.callback=(()=>{e.publish()})),this.customData.event||(this.customData.event="change input keyup paste blur focus"),Object(r.b)(t).on(this.customData.event,this.customData.callback)}},unbind(t){Object(r.b)(t).off(this.customData.event,this.customData.callback)},routine(t,e){const n=this.getValue(t);if(O("routine value",e),this.customData||(this.customData=S(t)),this.customData.isRadio)t.setAttribute("value",e);else if("select-multiple"===t.type&&t instanceof HTMLSelectElement){if(e instanceof Array)for(let n=0;n<t.options.length;n++){const r=t.options[n];r.selected=e.indexOf(r.value)>-1}}else t.getAttribute("contenteditable")?o.a.getString(e)!==n&&(t.innerHTML=e):o.a.getString(e)!==n&&(t.value=null!=e?e:"")},getValue:o.a.getInputValue},A=function(t){const e=t.detail;this.observer.value()!==e.newValue&&this.observer.setValue(e.newValue)},N={bind(t){this.customData.$el=Object(a.a)(t),t.addEventListener("publish-binder-change:"+this.type,A.bind(this))},unbind(t){delete this.customData,this.el.removeEventListener("publish-binder-change",A.bind(this))},routine(t,e){if(!this.type)throw new Error("Can't set attribute of "+this.type);const n=t.getAttribute(this.type);null!=e?n!==e&&t.setAttribute(this.type,e):t.removeAttribute(this.type),n!==e&&t.dispatchEvent(new CustomEvent("binder-changed",{detail:{name:this.type,oldValue:n,newValue:e,namespace:null}}))}};n.d(e,"a",function(){return j});const j=t=>{return{"animate-*":i,assign:s,"on-*":d(t).binder,"each-*":C,class:u,"remove-class":m,"class-*":l,"css-*":f,text:T,html:E,show:D,hide:k,enabled:h,disabled:p,checked:c,value:_,if:g,"*":N}}},function(t,e,n){"use strict";var r=n(11),i=n.n(r),o=n(1),s=n(19);const a=()=>{window.history.back()};n.d(e,"a",function(){return u});const u={},c=(()=>{const t=Object(o.Debug)("binders:view");return{binder:{block:!0,bind(e){t("bind",this.customData);const n=this;this.customData||(this.customData={}),this.customData.nested=this.customData.nested||null,this.customData.$wrapper=this.customData.$wrapper||Object(o.JQuery)(e),this.customData.onPageReady=((e,r,i,s,a,u,c)=>{e===n.customData.options.viewId?(n.customData.nested&&(t("unbind nested"),"replace"===n.customData.options.action&&n.customData.nested.unbind()),o.Utils.isObject(n.view.models)||(n.view.models={}),!0===n.customData.options.datasetToModel&&o.Utils.isObject(u)&&(n.view.models.dataset=u,t("newPageReady dataset:",u)),n.customData.nested=new o.View(s[0],n.view.models,n.view.options),n.customData.nested.bind()):t("not the right view",n.customData.options.viewId,e)}),this.customData.onTransitionCompleted=(e=>{if(t("onTransitionCompleted",n.customData),e===n.customData.options.viewId){if(this.customData.options.scrollToAnchorHash&&window.location.hash){const e=Object(o.JQuery)(window.location.hash);if(e&&e.length){const n=e.offset();if(n&&n.top)return t("scroll to anchor:",e),new i.a((e,r)=>{setTimeout(()=>{Object(o.JQuery)("body, html").animate({scrollTop:n.top},{duration:1e3,complete:()=>{t("scroll complete"),e()},fail:()=>{t("scroll fail"),r()}})},0)})}}return i.a.resolve()}t("[onTransitionCompleted] not the right view",n.customData.options.viewId,e)})},routine(e,n){const r=Object(o.JQuery)(e);this.customData.options=n||{},this.customData.options.viewId=this.customData.options.viewId||r.attr("id")||"main",this.customData.options.action=this.customData.options.action||"replace",this.customData.options.parseTitle=!!o.Utils.isBoolean(this.customData.options.parseTitle)&&this.customData.options.parseTitle,this.customData.options.containerSelector=this.customData.options.containerSelector||"[data-namespace]","main"===this.customData.options.viewId?(this.customData.options.scrollToTop=!o.Utils.isBoolean(this.customData.options.scrollToTop)||this.customData.options.scrollToTop,this.customData.options.listenAllLinks=!o.Utils.isBoolean(this.customData.options.listenAllLinks)||this.customData.options.listenAllLinks,this.customData.options.listenPopstate=!o.Utils.isBoolean(this.customData.options.listenPopstate)||this.customData.options.listenPopstate,this.customData.options.scrollToAnchorHash=!o.Utils.isBoolean(this.customData.options.scrollToAnchorHash)||this.customData.options.scrollToAnchorHash,this.customData.options.datasetToModel=!o.Utils.isBoolean(this.customData.options.datasetToModel)||this.customData.options.datasetToModel):(this.customData.options.scrollToTop=!!o.Utils.isBoolean(this.customData.options.scrollToTop)&&this.customData.options.scrollToTop,this.customData.options.listenAllLinks=!!o.Utils.isBoolean(this.customData.options.listenAllLinks)&&this.customData.options.listenAllLinks,this.customData.options.listenPopstate=!!o.Utils.isBoolean(this.customData.options.listenPopstate)&&this.customData.options.listenPopstate,this.customData.options.scrollToAnchorHash=!!o.Utils.isBoolean(this.customData.options.scrollToAnchorHash)&&this.customData.options.scrollToAnchorHash,this.customData.options.datasetToModel=!!o.Utils.isBoolean(this.customData.options.datasetToModel)&&this.customData.options.datasetToModel),this.customData.options.autoprefetchLinks=this.customData.options.listenAllLinks,this.customData.options.transition=this.customData.options.transition||new s.HideShowTransition(this.customData.options.action,this.customData.options.scrollToTop),this.customData.dispatcher=new o.EventDispatcher(this.customData.options.viewId),this.customData.prefetch=new s.Prefetch,t("routine",this.customData.options.viewId),this.customData.$wrapper.attr("id",this.customData.options.viewId),t("options",this.customData.options),this.customData.dispatcher.on("newPageReady",this.customData.onPageReady),this.customData.dispatcher.on("transitionCompleted",this.customData.onTransitionCompleted);const i=new s.Pjax(this.customData.options.viewId,this.customData.$wrapper,this.customData.options.containerSelector,this.customData.options.listenAllLinks,this.customData.options.listenPopstate,this.customData.options.transition,this.customData.options.parseTitle);this.customData.prefetch.init(this.customData.options.autoprefetchLinks),i.start()},unbind(e){t("unbind",this.customData.options.viewId),this.customData.dispatcher&&(this.customData.dispatcher.off("newPageReady",this.customData.onPageReady),this.customData.dispatcher.off("transitionCompleted",this.customData.onTransitionCompleted)),this.customData&&null!==this.customData.nested&&this.customData.nested.unbind(),delete this.customData}},name:"view"}})(),l=(()=>{const t=Object(o.Debug)("binders:view-static");return{binder:{block:!0,bind(e){t("bind",this.customData),this.customData||(this.customData={nested:null})},routine(e,n){t("routine",this.customData);const r=Object(o.JQuery)(e),i=this;(n=n||{}).listenAllLinks=!1,n.listenPopstate=!1,n.parseTitle=!1,n.transition=n.transition||new s.HideShowTransition,n.viewId=n.url,t("options",n),new s.Pjax(n.viewId,r,"[data-namespace]",n.listenAllLinks,n.listenPopstate,n.transition,n.parseTitle).load(n.url).then(e=>{r.replaceWith(e),e.css("visibility","visible"),o.Utils.isObject(i.view.models)||(i.view.models={}),i.customData.nested&&(t("unbind nested"),i.customData.nested.unbind()),i.customData.nested=new o.View(e[0],i.view.models,i.view.options),i.customData.nested.bind()})},unbind(e){t("unbind"),this.customData.nested&&(t("unbind nested"),this.customData.nested.unbind()),delete this.customData}},name:"view-static"}})(),f=(()=>{const t=Object(o.Debug)("binders:route");return{binder:{bind(e){this.customData={prefetch:new s.Prefetch,dispatcher:void 0,options:{removeAfterActivation:!1,newTab:!1},$el:Object(o.JQuery)(e),checkURL:t=>!(!t||!o.Utils.onRoute(t)),onClick(e){t("go to",this.customData.options.url),e.preventDefault(),o.Utils.onRoute(this.customData.options.url)?t("already on this site"):this.customData.options.url&&s.Pjax.getInstance(this.customData.options.viewId).goTo(this.customData.options.url,this.customData.options.newTab),this.customData.options.removeAfterActivation&&this.customData.$el&&this.customData.$el.remove()},onNewPageReady(){this.customData.$el&&this.customData.$el.trigger("new-page-ready"),this.customData.checkURL.call(this,this.customData.options.url)},onLinkEnter(t){this.customData.prefetch.onLinkEnter(t,this.customData.options.url)}}},routine(e,n){if(o.Utils.isString(n)?this.customData.options.url=n:o.Utils.isObject(n)&&(this.customData.options=n),this.customData.options.viewId=this.customData.options.viewId||"main",this.customData.options.removeAfterActivation=!!o.Utils.isBoolean(this.customData.options.removeAfterActivation)&&this.customData.options.removeAfterActivation,this.customData.dispatcher=new o.EventDispatcher(this.customData.options.viewId),this.customData.options.newTab=!1,!this.customData.$el)throw new Error("$el is not set");const r="A"===this.customData.$el.prop("tagName");if(t("getBinder",e,this.customData.options.url),!this.customData.options.url&&r){const t=this.customData.$el.attr("href");t&&(this.customData.options.url=t)}"_blank"===this.customData.$el.attr("target")&&(this.customData.options.newTab=!0);const i=o.Utils.getLocation(),s=i.protocol+"//"+i.hostname;this.customData.options.url&&o.Utils.isAbsoluteUrl(this.customData.options.url)?(t("is absolut url",this.customData.options.url),o.Utils.isInternalUrl(this.customData.options.url)?(t("interal url",this.customData.options.url),this.customData.options.url=this.customData.options.url.replace(s,"")):(t("external url",this.customData.options.url),this.customData.options.newTab=!0)):t("is relative url",this.customData.options.url),r&&!this.customData.$el.attr("href")&&this.customData.options.url&&this.customData.$el.attr("href",this.customData.options.url),this.customData.dispatcher.on("newPageReady",this.customData.onNewPageReady.bind(this)),this.customData.$el.off("click").on("click",this.customData.onClick.bind(this)),this.customData.options.newTab||o.Utils.onRoute(this.customData.options.url)||(e.addEventListener("mouseover",this.customData.onLinkEnter.bind(this)),e.addEventListener("touchstart",this.customData.onLinkEnter.bind(this))),this.customData.checkURL.call(this,this.customData.options.url)},unbind(t){t.removeEventListener("mouseover",this.customData.onLinkEnter),t.removeEventListener("touchstart",this.customData.onLinkEnter),this.customData.$el.off("click",this.customData.onClick),this.customData.dispatcher.off("newPageReady",this.customData.onNewPageReady)}},name:"route"}})(),h={binder:{bind(t){this.customData={dispatcher:new o.EventDispatcher("main")}},routine(t,e){const n=Object(o.JQuery)(t),r=this.args[0].toString()||"active",i="A"===n.prop("tagName");if(!e&&i){const t=n.attr("href");t&&(e=t)}const s=t=>{if(t){if(o.Utils.onRoute(t))return n.addClass(r),n.is(":radio")&&n.prop("checked",!0),!0;n.removeClass(r),n.is(":radio")&&n.prop("checked",!1)}return!1};this.customData.dispatcher.on("newPageReady",()=>s(e)),s(e)},unbind(t){}},name:"route-class-*"},p={binder:{bind(t){this.customData={dispatcher:new o.EventDispatcher("main")}},routine(t,e){const n=Object(o.JQuery)(t),r=this.args[0].toString()||"active",i="A"===n.prop("tagName");if(!e&&i){const t=n.attr("href");t&&(e=t)}const s=t=>{if(t){if(o.Utils.onParentRoute(t))return n.addClass(r),n.is(":radio")&&n.prop("checked",!0),!0;n.removeClass(r),n.is(":radio")&&n.prop("checked",!1)}return!1};this.customData.dispatcher.on("newPageReady",()=>s(e)),s(e)},unbind(t){}},name:"parent-route-class-*"},d={binder:{priority:3e3,bind(t){},unbind(t){Object(o.JQuery)(t).off(this.args[0],a)},routine(t,e){if(null===this.args)throw new Error("args is null");const n=this.args[0];Object(o.JQuery)(t).off(n,a),Object(o.JQuery)(t).on(n,a)}},name:"route-back-on-*"};u[c.name]=c.binder,u[l.name]=l.binder,u[f.name]=f.binder,u[h.name]=h.binder,u[p.name]=p.binder,u[d.name]=d.binder},function(t,e,n){"use strict";n.r(e);var r=n(53),i=n(27),o=n(5),s=n.n(o),a=n(4),u=n.n(a),c=n(0),l=n.n(c);let f=function(){function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"main";return s()(this,t),l()(this,"events",{}),l()(this,"id",void 0),this.id=e,t.instances[this.id]?t.instances[this.id]:(t.instances[this.id]=this,t.instances[this.id])}return u()(t,null,[{key:"getInstance",value:function(e){const n=t.instances[e];if(!n)throw new Error(`No EventDispatcher instance with id ${e} found!`);return n}}]),u()(t,[{key:"on",value:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)}},{key:"off",value:function(t,e){t in this.events!=!1&&this.events[t].splice(this.events[t].indexOf(e),1)}},{key:"trigger",value:function(t){if(t in this.events!=!1){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];for(let e=0;e<this.events[t].length;e++)this.events[t][e].apply(this,n)}}}]),t}();l()(f,"instances",{});var h=n(54),p=n(2);n.d(e,"BindersService",function(){return r.a}),n.d(e,"ComponentService",function(){return i.a}),n.d(e,"EventDispatcher",function(){return f}),n.d(e,"FormatterService",function(){return h.a}),n.d(e,"Utils",function(){return p.a})},function(t,e,n){t.exports=n(193)},function(t,e,n){var r=n(23),i=n(12).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){var r=n(23);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e,n){var r=n(66),i=n(44),o=n(32),s=n(64),a=n(31),u=n(81),c=Object.getOwnPropertyDescriptor;e.f=n(26)?c:function(t,e){if(t=o(t),e=s(e,!0),u)try{return c(t,e)}catch(t){}if(a(t,e))return i(!r.f.call(t,e),t[e])}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var r=n(13),i=n(8),o=n(30);t.exports=function(t,e){var n=(i.Object||{})[t]||Object[t],s={};s[t]=e(n),r(r.S+r.F*o(function(){n(1)}),"Object",s)}},function(t,e,n){var r=n(8),i=n(12),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(39)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){e.f=n(20)},function(t,e,n){var r=n(12),i=n(8),o=n(39),s=n(69),a=n(25).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:s.f(t)})}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(68)("keys"),i=n(46);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){var r=n(45);t.exports=function(t){return Object(r(t))}},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){t.exports=!n(104)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e,n){"use strict";var r=n(33);function i(t){var e,n;this.promise=new t(function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r}),this.resolve=r(e),this.reject=r(n)}t.exports.f=function(t){return new i(t)}},function(t,e,n){t.exports=n(130)},function(t,e,n){"use strict";(function(r){function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}e.log=function(){var t;return"object"===("undefined"==typeof console?"undefined":i(console))&&console.log&&(t=console).log.apply(t,arguments)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(r++,"%c"===t&&(i=r))}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){var t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(143)(e),t.exports.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(100))},function(t,e,n){t.exports=n(190)},function(t,e,n){t.exports=!n(26)&&!n(30)(function(){return 7!=Object.defineProperty(n(63)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){"use strict";var r=n(12),i=n(31),o=n(26),s=n(13),a=n(83),u=n(135).KEY,c=n(30),l=n(68),f=n(47),h=n(46),p=n(20),d=n(69),m=n(70),v=n(136),g=n(87),b=n(22),y=n(23),w=n(32),x=n(64),C=n(44),E=n(49),k=n(140),D=n(65),T=n(25),O=n(48),S=D.f,_=T.f,A=k.f,N=r.Symbol,j=r.JSON,L=j&&j.stringify,P=p("_hidden"),F=p("toPrimitive"),M={}.propertyIsEnumerable,R=l("symbol-registry"),H=l("symbols"),I=l("op-symbols"),$=Object.prototype,U="function"==typeof N,B=r.QObject,q=!B||!B.prototype||!B.prototype.findChild,W=o&&c(function(){return 7!=E(_({},"a",{get:function(){return _(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=S($,e);r&&delete $[e],_(t,e,n),r&&t!==$&&_($,e,r)}:_,J=function(t){var e=H[t]=E(N.prototype);return e._k=t,e},V=U&&"symbol"==typeof N.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof N},Q=function(t,e,n){return t===$&&Q(I,e,n),b(t),e=x(e,!0),b(n),i(H,e)?(n.enumerable?(i(t,P)&&t[P][e]&&(t[P][e]=!1),n=E(n,{enumerable:C(0,!1)})):(i(t,P)||_(t,P,C(1,{})),t[P][e]=!0),W(t,e,n)):_(t,e,n)},Y=function(t,e){b(t);for(var n,r=v(e=w(e)),i=0,o=r.length;o>i;)Q(t,n=r[i++],e[n]);return t},X=function(t){var e=M.call(this,t=x(t,!0));return!(this===$&&i(H,t)&&!i(I,t))&&(!(e||!i(this,t)||!i(H,t)||i(this,P)&&this[P][t])||e)},G=function(t,e){if(t=w(t),e=x(e,!0),t!==$||!i(H,e)||i(I,e)){var n=S(t,e);return!n||!i(H,e)||i(t,P)&&t[P][e]||(n.enumerable=!0),n}},z=function(t){for(var e,n=A(w(t)),r=[],o=0;n.length>o;)i(H,e=n[o++])||e==P||e==u||r.push(e);return r},K=function(t){for(var e,n=t===$,r=A(n?I:w(t)),o=[],s=0;r.length>s;)!i(H,e=r[s++])||n&&!i($,e)||o.push(H[e]);return o};U||(a((N=function(){if(this instanceof N)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(n){this===$&&e.call(I,n),i(this,P)&&i(this[P],t)&&(this[P][t]=!1),W(this,t,C(1,n))};return o&&q&&W($,t,{configurable:!0,set:e}),J(t)}).prototype,"toString",function(){return this._k}),D.f=G,T.f=Q,n(89).f=k.f=z,n(66).f=X,n(86).f=K,o&&!n(39)&&a($,"propertyIsEnumerable",X,!0),d.f=function(t){return J(p(t))}),s(s.G+s.W+s.F*!U,{Symbol:N});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Z.length>tt;)p(Z[tt++]);for(var et=O(p.store),nt=0;et.length>nt;)m(et[nt++]);s(s.S+s.F*!U,"Symbol",{for:function(t){return i(R,t+="")?R[t]:R[t]=N(t)},keyFor:function(t){if(!V(t))throw TypeError(t+" is not a symbol!");for(var e in R)if(R[e]===t)return e},useSetter:function(){q=!0},useSimple:function(){q=!1}}),s(s.S+s.F*!U,"Object",{create:function(t,e){return void 0===e?E(t):Y(E(t),e)},defineProperty:Q,defineProperties:Y,getOwnPropertyDescriptor:G,getOwnPropertyNames:z,getOwnPropertySymbols:K}),j&&s(s.S+s.F*(!U||c(function(){var t=N();return"[null]"!=L([t])||"{}"!=L({a:t})||"{}"!=L(Object(t))})),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(y(e)||void 0!==t)&&!V(t))return g(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!V(e))return e}),r[1]=e,L.apply(j,r)}}),N.prototype[F]||n(29)(N.prototype,F,N.prototype.valueOf),f(N,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,e,n){t.exports=n(29)},function(t,e,n){var r=n(31),i=n(32),o=n(137)(!1),s=n(72)("IE_PROTO");t.exports=function(t,e){var n,a=i(t),u=0,c=[];for(n in a)n!=s&&r(a,n)&&c.push(n);for(;e.length>u;)r(a,n=e[u++])&&(~o(c,n)||c.push(n));return c}},function(t,e,n){var r=n(71),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(38);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){var r=n(12).document;t.exports=r&&r.documentElement},function(t,e,n){var r=n(84),i=n(73).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){"use strict";var r=n(91);n.o(r,"Debug")&&n.d(e,"Debug",function(){return r.Debug}),n.o(r,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return r.EventDispatcher}),n.o(r,"JQuery")&&n.d(e,"JQuery",function(){return r.JQuery}),n.o(r,"Riba")&&n.d(e,"Riba",function(){return r.Riba}),n.o(r,"RibaComponent")&&n.d(e,"RibaComponent",function(){return r.RibaComponent}),n.o(r,"Utils")&&n.d(e,"Utils",function(){return r.Utils}),n.o(r,"View")&&n.d(e,"View",function(){return r.View});var i=n(92);n.o(i,"Debug")&&n.d(e,"Debug",function(){return i.Debug}),n.o(i,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return i.EventDispatcher}),n.o(i,"JQuery")&&n.d(e,"JQuery",function(){return i.JQuery}),n.o(i,"Riba")&&n.d(e,"Riba",function(){return i.Riba}),n.o(i,"RibaComponent")&&n.d(e,"RibaComponent",function(){return i.RibaComponent}),n.o(i,"Utils")&&n.d(e,"Utils",function(){return i.Utils}),n.o(i,"View")&&n.d(e,"View",function(){return i.View});var o=n(93);n.o(o,"Debug")&&n.d(e,"Debug",function(){return o.Debug}),n.o(o,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return o.EventDispatcher}),n.o(o,"JQuery")&&n.d(e,"JQuery",function(){return o.JQuery}),n.o(o,"Riba")&&n.d(e,"Riba",function(){return o.Riba}),n.o(o,"RibaComponent")&&n.d(e,"RibaComponent",function(){return o.RibaComponent}),n.o(o,"Utils")&&n.d(e,"Utils",function(){return o.Utils}),n.o(o,"View")&&n.d(e,"View",function(){return o.View});var s=n(94);n.o(s,"Debug")&&n.d(e,"Debug",function(){return s.Debug}),n.o(s,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return s.EventDispatcher}),n.o(s,"JQuery")&&n.d(e,"JQuery",function(){return s.JQuery}),n.o(s,"Riba")&&n.d(e,"Riba",function(){return s.Riba}),n.o(s,"RibaComponent")&&n.d(e,"RibaComponent",function(){return s.RibaComponent}),n.o(s,"Utils")&&n.d(e,"Utils",function(){return s.Utils}),n.o(s,"View")&&n.d(e,"View",function(){return s.View});var a=n(95);n.o(a,"Debug")&&n.d(e,"Debug",function(){return a.Debug}),n.o(a,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return a.EventDispatcher}),n.o(a,"JQuery")&&n.d(e,"JQuery",function(){return a.JQuery}),n.o(a,"Riba")&&n.d(e,"Riba",function(){return a.Riba}),n.o(a,"RibaComponent")&&n.d(e,"RibaComponent",function(){return a.RibaComponent}),n.o(a,"Utils")&&n.d(e,"Utils",function(){return a.Utils}),n.o(a,"View")&&n.d(e,"View",function(){return a.View});var u=n(96);n.o(u,"Debug")&&n.d(e,"Debug",function(){return u.Debug}),n.o(u,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return u.EventDispatcher}),n.o(u,"JQuery")&&n.d(e,"JQuery",function(){return u.JQuery}),n.o(u,"Riba")&&n.d(e,"Riba",function(){return u.Riba}),n.o(u,"RibaComponent")&&n.d(e,"RibaComponent",function(){return u.RibaComponent}),n.o(u,"Utils")&&n.d(e,"Utils",function(){return u.Utils}),n.o(u,"View")&&n.d(e,"View",function(){return u.View});var c=n(97);n.o(c,"Debug")&&n.d(e,"Debug",function(){return c.Debug}),n.o(c,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return c.EventDispatcher}),n.o(c,"JQuery")&&n.d(e,"JQuery",function(){return c.JQuery}),n.o(c,"Riba")&&n.d(e,"Riba",function(){return c.Riba}),n.o(c,"RibaComponent")&&n.d(e,"RibaComponent",function(){return c.RibaComponent}),n.o(c,"Utils")&&n.d(e,"Utils",function(){return c.Utils}),n.o(c,"View")&&n.d(e,"View",function(){return c.View});var l=n(98);n.o(l,"Debug")&&n.d(e,"Debug",function(){return l.Debug}),n.o(l,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return l.EventDispatcher}),n.o(l,"JQuery")&&n.d(e,"JQuery",function(){return l.JQuery}),n.o(l,"Riba")&&n.d(e,"Riba",function(){return l.Riba}),n.o(l,"RibaComponent")&&n.d(e,"RibaComponent",function(){return l.RibaComponent}),n.o(l,"Utils")&&n.d(e,"Utils",function(){return l.Utils}),n.o(l,"View")&&n.d(e,"View",function(){return l.View});var f=n(99);n.o(f,"Debug")&&n.d(e,"Debug",function(){return f.Debug}),n.o(f,"EventDispatcher")&&n.d(e,"EventDispatcher",function(){return f.EventDispatcher}),n.o(f,"JQuery")&&n.d(e,"JQuery",function(){return f.JQuery}),n.o(f,"Riba")&&n.d(e,"Riba",function(){return f.Riba}),n.o(f,"RibaComponent")&&n.d(e,"RibaComponent",function(){return f.RibaComponent}),n.o(f,"Utils")&&n.d(e,"Utils",function(){return f.Utils}),n.o(f,"View")&&n.d(e,"View",function(){return f.View})},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var u,c=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!l){var t=a(h);l=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function m(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||l||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e){var n=1e3,r=60*n,i=60*r,o=24*i,s=7*o,a=365.25*o;function u(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}t.exports=function(t,e){e=e||{};var c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var u=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return u*a;case"weeks":case"week":case"w":return u*s;case"days":case"day":case"d":return u*o;case"hours":case"hour":case"hrs":case"hr":case"h":return u*i;case"minutes":case"minute":case"mins":case"min":case"m":return u*r;case"seconds":case"second":case"secs":case"sec":case"s":return u*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return u;default:return}}(t);if("number"===c&&!1===isNaN(t))return e.long?function(t){var e=Math.abs(t);if(e>=o)return u(t,e,o,"day");if(e>=i)return u(t,e,i,"hour");if(e>=r)return u(t,e,r,"minute");if(e>=n)return u(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=o)return Math.round(t/o)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){var r=n(13),i=n(45),o=n(30),s=n(75),a="["+s+"]",u=RegExp("^"+a+a+"*"),c=RegExp(a+a+"*$"),l=function(t,e,n){var i={},a=o(function(){return!!s[t]()||"​"!="​"[t]()}),u=i[t]=a?e(f):s[t];n&&(i[n]=u),r(r.P+r.F*a,"String",i)},f=l.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(u,"")),2&e&&(t=t.replace(c,"")),t};t.exports=l},function(t,e,n){var r=n(152),i=n(157);t.exports=n(76)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e,n){var r=n(167)("wks"),i=n(105),o=n(40).Symbol,s="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=s&&o[t]||(s?o:i)("Symbol."+t))}).store=r},function(t,e){},function(t,e,n){"use strict";var r=n(172)(!0);n(109)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){"use strict";var r=n(39),i=n(13),o=n(83),s=n(29),a=n(41),u=n(173),c=n(47),l=n(110),f=n(20)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,n,d,m,v,g){u(n,e,d);var b,y,w,x=function(t){if(!h&&t in D)return D[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},C=e+" Iterator",E="values"==m,k=!1,D=t.prototype,T=D[f]||D["@@iterator"]||m&&D[m],O=T||x(m),S=m?E?x("entries"):O:void 0,_="Array"==e&&D.entries||T;if(_&&(w=l(_.call(new t)))!==Object.prototype&&w.next&&(c(w,C,!0),r||"function"==typeof w[f]||s(w,f,p)),E&&T&&"values"!==T.name&&(k=!0,O=function(){return T.call(this)}),r&&!g||!h&&!k&&D[f]||s(D,f,O),a[e]=O,a[C]=p,m)if(b={values:E?O:x("values"),keys:v?O:x("keys"),entries:S},g)for(y in b)y in D||o(D,y,b[y]);else i(i.P+i.F*(h||k),e,b);return b}},function(t,e,n){var r=n(31),i=n(74),o=n(72)("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},function(t,e,n){n(174);for(var r=n(12),i=n(29),o=n(41),s=n(20)("toStringTag"),a="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),u=0;u<a.length;u++){var c=a[u],l=r[c],f=l&&l.prototype;f&&!f[s]&&i(f,s,c),o[c]=o.Array}},function(t,e,n){var r=n(38),i=n(20)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,s;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(s=r(e))&&"function"==typeof e.callee?"Arguments":s}},function(t,e,n){var r=n(22),i=n(33),o=n(20)("species");t.exports=function(t,e){var n,s=r(t).constructor;return void 0===s||null==(n=r(s)[o])?e:i(n)}},function(t,e,n){var r,i,o,s=n(37),a=n(115),u=n(88),c=n(63),l=n(12),f=l.process,h=l.setImmediate,p=l.clearImmediate,d=l.MessageChannel,m=l.Dispatch,v=0,g={},b=function(){var t=+this;if(g.hasOwnProperty(t)){var e=g[t];delete g[t],e()}},y=function(t){b.call(t.data)};h&&p||(h=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return g[++v]=function(){a("function"==typeof t?t:Function(t),e)},r(v),v},p=function(t){delete g[t]},"process"==n(38)(f)?r=function(t){f.nextTick(s(b,t,1))}:m&&m.now?r=function(t){m.now(s(b,t,1))}:d?(o=(i=new d).port2,i.port1.onmessage=y,r=s(o.postMessage,o,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(t){l.postMessage(t+"","*")},l.addEventListener("message",y,!1)):r="onreadystatechange"in c("script")?function(t){u.appendChild(c("script")).onreadystatechange=function(){u.removeChild(this),b.call(t)}}:function(t){setTimeout(s(b,t,1),0)}),t.exports={set:h,clear:p}},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){var r=n(22),i=n(23),o=n(77);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){"use strict";n(119),n(120)},function(t,e){},function(t,e){},function(t,e,n){"use strict";n(57),n(27);var r=n(123),i=n.n(r),o=n(11),s=n.n(o),a=n(5),u=n.n(a),c=n(15),l=n.n(c),f=n(16),h=n.n(f),p=n(4),d=n.n(p),m=n(17),v=n.n(m),g=n(3),b=n.n(g),y=n(0),w=n.n(y),x=n(6),C=n(14),E=n(35),k=n(2),D=n(58),T=n.n(D),O=n(24),S=n.n(O),_=n(124),A=n.n(_);let N=function t(e){if(u()(this,t),window.customElements)return A()(HTMLElement,[],this.constructor)};window.customElements&&(N.prototype=S()(HTMLElement.prototype,{constructor:{value:HTMLElement,configurable:!0,writable:!0}}),T()(N,HTMLElement));let j=function(t){function e(t,n){var r;if(u()(this,e),r=l()(this,h()(e).call(this,t)),w()(b()(b()(r)),"context",void 0),w()(b()(b()(r)),"debug",void 0),w()(b()(b()(r)),"view",void 0),w()(b()(b()(r)),"templateLoaded",!1),w()(b()(b()(r)),"riba",void 0),w()(b()(b()(r)),"el",void 0),w()(b()(b()(r)),"scope",void 0),w()(b()(b()(r)),"autobind",!0),w()(b()(b()(r)),"attributeObserverFallback",void 0),r.context=n,r.debug=Object(x.a)("component:RibaComponent"),r.debug("constructor called",t,n,b()(b()(r))),t)r.el=t;else{if(!window.customElements)throw new Error("element is required on browsers without custom elements support");r.el=b()(b()(r))}return r}return v()(e,t),d()(e,[{key:"bound",get:function(){return!!this.view}}]),d()(e,[{key:"remove",value:function(){this.debug("remove",this.el),this.el&&this.el.parentElement&&(this.el.parentElement.removeChild(this.el),window.customElements||this.disconnectedFallbackCallback())}},{key:"disconnectedFallbackCallback",value:function(){this.disconnectedCallback()}},{key:"requiredAttributes",value:function(){return[]}},{key:"init",value:async function(t){if(this.initAttributeObserver(t),this.checkRequiredAttributes())return this.loadTemplate().then(t=>this.autobind?s.a.resolve(this.bind()):s.a.resolve(null));this.debug("not all required attributes are set to load and bind the template")}},{key:"checkRequiredAttributes",value:function(){let t=!0;return this.requiredAttributes().forEach(e=>{this.scope.hasOwnProperty(e)&&this.scope[e]?this.debug(`Attribute ${e} is defined: ${this.scope[e]}`):(this.debug(`Attribute ${e} not set: ${this.scope[e]}`),t=!1)}),t}},{key:"parseAttribute",value:function(t){let e=t;return"true"===t?e=!0:"false"===t?e=!1:"null"===t?e=null:"undefined"===t?e=void 0:""===t?e=void 0:isNaN(Number(t))?k.a.isJson(t)&&(e=JSON.parse(t)):(e=Number(t))>=i.a&&(e=t),e}},{key:"publish",value:function(t,e,n){this.el.dispatchEvent(new CustomEvent("publish-binder-change:"+t,{detail:{name:t,newValue:e,namespace:null}}))}},{key:"eventHandler",value:function(t){return this.debug("eventHandler",t),function(e,n,r,i){this.call(t,e,n,r.view.models,i)}}},{key:"callFormatterHandler",value:function(t){var e=this;return function(n){t.debug("callFormatterHandler",e,n);for(var r=arguments.length,i=new Array(r>1?r-1:0),o=1;o<r;o++)i[o-1]=arguments[o];return n.apply(t,i)}}},{key:"argsFormatterHandler",value:function(t){return this.debug("argsFormatterHandler",t),function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];return(n,i,o,s)=>(r.push(n),r.push(i),r.push(o),r.push(s),e.apply(t,r))}}},{key:"connectedCallback",value:function(){this.debug("connectedCallback called")}},{key:"disconnectedCallback",value:function(){this.debug("disconnectedCallback called"),this.view&&this.view.unbind(),this.attributeObserverFallback&&this.attributeObserverFallback.disconnect(),this.el.removeEventListener("binder-changed",this.BinderChangedEventHandler)}},{key:"attributeChangedCallback",value:function(t,e,n,r){n=this.parseAttribute(n),t=k.a.camelCase(t),this.debug("attributeChangedCallback called",t,e,n,r),this.scope&&this.scope[t]&&(e=this.scope[t]),this.scope[t]=n,this.parsedAttributeChangedCallback(t,e,n,r),this.checkRequiredAttributes()?this.loadTemplate().then(t=>this.autobind?this.bind():s.a.resolve(null)):this.debug("not all required attributes are set to load and bind the template")}},{key:"parsedAttributeChangedCallback",value:function(t,e,n,r){this.debug("parsedAttributeChangedCallback called",t,e,n,r)}},{key:"adoptedCallback",value:function(t,e){this.debug("adoptedCallback called",t,e)}},{key:"loadTemplate",value:async function(){return this.templateLoaded?(this.debug("template already loaded"),null):this.checkRequiredAttributes()?s.a.resolve(this.template()).then(t=>(this.debug("template",t),null!==t&&(this.el.innerHTML=t),t)).then(t=>(this.templateLoaded=!0,t)).catch(t=>(console.error(t),this.templateLoaded=!1,t)):(this.debug("not all required attributes are set to load the template"),null)}},{key:"bind",value:async function(){if(this.bound)this.debug("component already bounded");else{if(this.checkRequiredAttributes())return await this.beforeBind().then(()=>{if(!this.el)throw new Error("this.el is not defined");this.riba=new E.a;const t=this.riba.getViewOptions({handler:this.eventHandler(this),formatters:{call:this.callFormatterHandler(this),args:this.argsFormatterHandler(this)}});return this.view=new C.a(Array.prototype.slice.call(this.el.childNodes),this.scope,t),this.scope=this.view.models,this.view.bind(),this.view}).then(t=>this.afterBind()).catch(t=>{console.error(t)}),this.view;this.debug("not all required attributes are set for bind")}}},{key:"unbind",value:async function(){this.view&&(this.view.unbind(),delete this.view)}},{key:"build",value:async function(){this.view&&this.view.build()}},{key:"beforeBind",value:async function(){this.debug("beforeBind",this.bound)}},{key:"afterBind",value:async function(){this.debug("afterBind",this.bound)}},{key:"BinderChangedEventHandler",value:function(t){const e=t.detail;this.attributeChangedCallback(e.name,e.oldValue,e.oldValue,e.namespace)}},{key:"initAttributeObserver",value:function(t){if(window.customElements);else{window.MutationObserver?(this.attributeObserverFallback=new MutationObserver(e=>{e.forEach(e=>{if("attributes"===e.type&&(this.debug("attributes changed",e),e.attributeName&&-1!==t.indexOf(e.attributeName))){const t=this.el.getAttribute(e.attributeName);this.attributeChangedCallback(e.attributeName,e.oldValue,t,e.attributeNamespace)}})}),this.attributeObserverFallback.observe(this.el,{attributes:!0})):this.el.addEventListener("binder-changed",this.BinderChangedEventHandler);const e=this.el.attributes;for(const n in e)if(e.hasOwnProperty(n)){const r=e[n],i=r.nodeName;if(-1!==t.indexOf(i)){const t=r.nodeValue;this.attributeChangedCallback(i,null,t,null)}}}}}]),e}(N);w()(j,"tagName",void 0),n.d(e,"a",function(){return j})},function(t,e,n){var r;!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,i){"use strict";var o=[],s=n.document,a=Object.getPrototypeOf,u=o.slice,c=o.concat,l=o.push,f=o.indexOf,h={},p=h.toString,d=h.hasOwnProperty,m=d.toString,v=m.call(Object),g={},b=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function(t){return null!=t&&t===t.window},w={type:!0,src:!0,noModule:!0};function x(t,e,n){var r,i=(e=e||s).createElement("script");if(i.text=t,n)for(r in w)n[r]&&(i[r]=n[r]);e.head.appendChild(i).parentNode.removeChild(i)}function C(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?h[p.call(t)]||"object":typeof t}var E=function(t,e){return new E.fn.init(t,e)},k=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function D(t){var e=!!t&&"length"in t&&t.length,n=C(t);return!b(t)&&!y(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}E.fn=E.prototype={jquery:"3.3.1",constructor:E,length:0,toArray:function(){return u.call(this)},get:function(t){return null==t?u.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=E.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return E.each(this,t)},map:function(t){return this.pushStack(E.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},E.extend=E.fn.extend=function(){var t,e,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||b(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],s!==(r=t[e])&&(c&&r&&(E.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&E.isPlainObject(n)?n:{},s[e]=E.extend(c,o,r)):void 0!==r&&(s[e]=r));return s},E.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==p.call(t))&&(!(e=a(t))||"function"==typeof(n=d.call(e,"constructor")&&e.constructor)&&m.call(n)===v)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t){x(t)},each:function(t,e){var n,r=0;if(D(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(k,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(D(Object(t))?E.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:f.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,s=!n;i<o;i++)!e(t[i],i)!==s&&r.push(t[i]);return r},map:function(t,e,n){var r,i,o=0,s=[];if(D(t))for(r=t.length;o<r;o++)null!=(i=e(t[o],o,n))&&s.push(i);else for(o in t)null!=(i=e(t[o],o,n))&&s.push(i);return c.apply([],s)},guid:1,support:g}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=o[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){h["[object "+e+"]"]=e.toLowerCase()});var T=function(t){var e,n,r,i,o,s,a,u,c,l,f,h,p,d,m,v,g,b,y,w="sizzle"+1*new Date,x=t.document,C=0,E=0,k=st(),D=st(),T=st(),O=function(t,e){return t===e&&(f=!0),0},S={}.hasOwnProperty,_=[],A=_.pop,N=_.push,j=_.push,L=_.slice,P=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},F="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",R="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",H="\\["+M+"*("+R+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+M+"*\\]",I=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",$=new RegExp(M+"+","g"),U=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),B=new RegExp("^"+M+"*,"+M+"*"),q=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),W=new RegExp("="+M+"*([^\\]'\"]*?)"+M+"*\\]","g"),J=new RegExp(I),V=new RegExp("^"+R+"$"),Q={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+I),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+F+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,G=/^[^{]+\{\s*\[native \w/,z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,K=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),tt=function(t,e,n){var r="0x"+e-65536;return r!=r||n?e:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,nt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=function(){h()},it=bt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{j.apply(_=L.call(x.childNodes),x.childNodes),_[x.childNodes.length].nodeType}catch(t){j={apply:_.length?function(t,e){N.apply(t,L.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}function ot(t,e,r,i){var o,a,c,l,f,d,g,b=e&&e.ownerDocument,C=e?e.nodeType:9;if(r=r||[],"string"!=typeof t||!t||1!==C&&9!==C&&11!==C)return r;if(!i&&((e?e.ownerDocument||e:x)!==p&&h(e),e=e||p,m)){if(11!==C&&(f=z.exec(t)))if(o=f[1]){if(9===C){if(!(c=e.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(b&&(c=b.getElementById(o))&&y(e,c)&&c.id===o)return r.push(c),r}else{if(f[2])return j.apply(r,e.getElementsByTagName(t)),r;if((o=f[3])&&n.getElementsByClassName&&e.getElementsByClassName)return j.apply(r,e.getElementsByClassName(o)),r}if(n.qsa&&!T[t+" "]&&(!v||!v.test(t))){if(1!==C)b=e,g=t;else if("object"!==e.nodeName.toLowerCase()){for((l=e.getAttribute("id"))?l=l.replace(et,nt):e.setAttribute("id",l=w),a=(d=s(t)).length;a--;)d[a]="#"+l+" "+gt(d[a]);g=d.join(","),b=K.test(t)&&mt(e.parentNode)||e}if(g)try{return j.apply(r,b.querySelectorAll(g)),r}catch(t){}finally{l===w&&e.removeAttribute("id")}}}return u(t.replace(U,"$1"),e,r,i)}function st(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function at(t){return t[w]=!0,t}function ut(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ct(t,e){for(var n=t.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=e}function lt(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ft(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ht(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function pt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&it(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function dt(t){return at(function(e){return e=+e,at(function(n,r){for(var i,o=t([],n.length,e),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}function mt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=ot.support={},o=ot.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},h=ot.setDocument=function(t){var e,i,s=t?t.ownerDocument||t:x;return s!==p&&9===s.nodeType&&s.documentElement?(d=(p=s).documentElement,m=!o(p),x!==p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",rt,!1):i.attachEvent&&i.attachEvent("onunload",rt)),n.attributes=ut(function(t){return t.className="i",!t.getAttribute("className")}),n.getElementsByTagName=ut(function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length}),n.getElementsByClassName=G.test(p.getElementsByClassName),n.getById=ut(function(t){return d.appendChild(t).id=w,!p.getElementsByName||!p.getElementsByName(w).length}),n.getById?(r.filter.ID=function(t){var e=t.replace(Z,tt);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(Z,tt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&m)return e.getElementsByClassName(t)},g=[],v=[],(n.qsa=G.test(p.querySelectorAll))&&(ut(function(t){d.appendChild(t).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+M+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||v.push("\\["+M+"*(?:value|"+F+")"),t.querySelectorAll("[id~="+w+"-]").length||v.push("~="),t.querySelectorAll(":checked").length||v.push(":checked"),t.querySelectorAll("a#"+w+"+*").length||v.push(".#.+[+~]")}),ut(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&v.push("name"+M+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),d.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),v.push(",.*:")})),(n.matchesSelector=G.test(b=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ut(function(t){n.disconnectedMatch=b.call(t,"*"),b.call(t,"[s!='']:x"),g.push("!=",I)}),v=v.length&&new RegExp(v.join("|")),g=g.length&&new RegExp(g.join("|")),e=G.test(d.compareDocumentPosition),y=e||G.test(d.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},O=e?function(t,e){if(t===e)return f=!0,0;var r=!t.compareDocumentPosition-!e.compareDocumentPosition;return r||(1&(r=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===r?t===p||t.ownerDocument===x&&y(x,t)?-1:e===p||e.ownerDocument===x&&y(x,e)?1:l?P(l,t)-P(l,e):0:4&r?-1:1)}:function(t,e){if(t===e)return f=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,s=[t],a=[e];if(!i||!o)return t===p?-1:e===p?1:i?-1:o?1:l?P(l,t)-P(l,e):0;if(i===o)return lt(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?lt(s[r],a[r]):s[r]===x?-1:a[r]===x?1:0},p):p},ot.matches=function(t,e){return ot(t,null,null,e)},ot.matchesSelector=function(t,e){if((t.ownerDocument||t)!==p&&h(t),e=e.replace(W,"='$1']"),n.matchesSelector&&m&&!T[e+" "]&&(!g||!g.test(e))&&(!v||!v.test(e)))try{var r=b.call(t,e);if(r||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){}return ot(e,p,null,[t]).length>0},ot.contains=function(t,e){return(t.ownerDocument||t)!==p&&h(t),y(t,e)},ot.attr=function(t,e){(t.ownerDocument||t)!==p&&h(t);var i=r.attrHandle[e.toLowerCase()],o=i&&S.call(r.attrHandle,e.toLowerCase())?i(t,e,!m):void 0;return void 0!==o?o:n.attributes||!m?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},ot.escape=function(t){return(t+"").replace(et,nt)},ot.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},ot.uniqueSort=function(t){var e,r=[],i=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&t.slice(0),t.sort(O),f){for(;e=t[o++];)e===t[o]&&(i=r.push(o));for(;i--;)t.splice(r[i],1)}return l=null,t},i=ot.getText=function(t){var e,n="",r=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=i(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[r++];)n+=i(e);return n},(r=ot.selectors={cacheLength:50,createPseudo:at,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(Z,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(Z,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||ot.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&ot.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return Q.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&J.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(Z,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=k[t+" "];return e||(e=new RegExp("(^|"+M+")"+t+"("+M+"|$)"))&&k(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(r){var i=ot.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace($," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,u){var c,l,f,h,p,d,m=o!==s?"nextSibling":"previousSibling",v=e.parentNode,g=a&&e.nodeName.toLowerCase(),b=!u&&!a,y=!1;if(v){if(o){for(;m;){for(h=e;h=h[m];)if(a?h.nodeName.toLowerCase()===g:1===h.nodeType)return!1;d=m="only"===t&&!d&&"nextSibling"}return!0}if(d=[s?v.firstChild:v.lastChild],s&&b){for(y=(p=(c=(l=(f=(h=v)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===C&&c[1])&&c[2],h=p&&v.childNodes[p];h=++p&&h&&h[m]||(y=p=0)||d.pop();)if(1===h.nodeType&&++y&&h===e){l[t]=[C,p,y];break}}else if(b&&(y=p=(c=(l=(f=(h=e)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]||[])[0]===C&&c[1]),!1===y)for(;(h=++p&&h&&h[m]||(y=p=0)||d.pop())&&((a?h.nodeName.toLowerCase()!==g:1!==h.nodeType)||!++y||(b&&((l=(f=h[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[t]=[C,y]),h!==e)););return(y-=i)===r||y%r==0&&y/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||ot.error("unsupported pseudo: "+t);return i[w]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,n){for(var r,o=i(t,e),s=o.length;s--;)t[r=P(t,o[s])]=!(n[r]=o[s])}):function(t){return i(t,0,n)}):i}},pseudos:{not:at(function(t){var e=[],n=[],r=a(t.replace(U,"$1"));return r[w]?at(function(t,e,n,i){for(var o,s=r(t,null,i,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:at(function(t){return function(e){return ot(t,e).length>0}}),contains:at(function(t){return t=t.replace(Z,tt),function(e){return(e.textContent||e.innerText||i(e)).indexOf(t)>-1}}),lang:at(function(t){return V.test(t||"")||ot.error("unsupported lang: "+t),t=t.replace(Z,tt).toLowerCase(),function(e){var n;do{if(n=m?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===d},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:pt(!1),disabled:pt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return X.test(t.nodeName)},input:function(t){return Y.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:dt(function(){return[0]}),last:dt(function(t,e){return[e-1]}),eq:dt(function(t,e,n){return[n<0?n+e:n]}),even:dt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:dt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:dt(function(t,e,n){for(var r=n<0?n+e:n;--r>=0;)t.push(r);return t}),gt:dt(function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=ft(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=ht(e);function vt(){}function gt(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function bt(t,e,n){var r=e.dir,i=e.next,o=i||r,s=n&&"parentNode"===o,a=E++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||s)return t(e,n,i);return!1}:function(e,n,u){var c,l,f,h=[C,a];if(u){for(;e=e[r];)if((1===e.nodeType||s)&&t(e,n,u))return!0}else for(;e=e[r];)if(1===e.nodeType||s)if(l=(f=e[w]||(e[w]={}))[e.uniqueID]||(f[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((c=l[o])&&c[0]===C&&c[1]===a)return h[2]=c[2];if(l[o]=h,h[2]=t(e,n,u))return!0}return!1}}function yt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function wt(t,e,n,r,i){for(var o,s=[],a=0,u=t.length,c=null!=e;a<u;a++)(o=t[a])&&(n&&!n(o,r,i)||(s.push(o),c&&e.push(a)));return s}function xt(t,e,n,r,i,o){return r&&!r[w]&&(r=xt(r)),i&&!i[w]&&(i=xt(i,o)),at(function(o,s,a,u){var c,l,f,h=[],p=[],d=s.length,m=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)ot(t,e[r],n);return n}(e||"*",a.nodeType?[a]:a,[]),v=!t||!o&&e?m:wt(m,h,t,a,u),g=n?i||(o?t:d||r)?[]:s:v;if(n&&n(v,g,a,u),r)for(c=wt(g,p),r(c,[],a,u),l=c.length;l--;)(f=c[l])&&(g[p[l]]=!(v[p[l]]=f));if(o){if(i||t){if(i){for(c=[],l=g.length;l--;)(f=g[l])&&c.push(v[l]=f);i(null,g=[],c,u)}for(l=g.length;l--;)(f=g[l])&&(c=i?P(o,f):h[l])>-1&&(o[c]=!(s[c]=f))}}else g=wt(g===s?g.splice(d,g.length):g),i?i(null,s,g,u):j.apply(s,g)})}function Ct(t){for(var e,n,i,o=t.length,s=r.relative[t[0].type],a=s||r.relative[" "],u=s?1:0,l=bt(function(t){return t===e},a,!0),f=bt(function(t){return P(e,t)>-1},a,!0),h=[function(t,n,r){var i=!s&&(r||n!==c)||((e=n).nodeType?l(t,n,r):f(t,n,r));return e=null,i}];u<o;u++)if(n=r.relative[t[u].type])h=[bt(yt(h),n)];else{if((n=r.filter[t[u].type].apply(null,t[u].matches))[w]){for(i=++u;i<o&&!r.relative[t[i].type];i++);return xt(u>1&&yt(h),u>1&&gt(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(U,"$1"),n,u<i&&Ct(t.slice(u,i)),i<o&&Ct(t=t.slice(i)),i<o&&gt(t))}h.push(n)}return yt(h)}return vt.prototype=r.filters=r.pseudos,r.setFilters=new vt,s=ot.tokenize=function(t,e){var n,i,o,s,a,u,c,l=D[t+" "];if(l)return e?0:l.slice(0);for(a=t,u=[],c=r.preFilter;a;){for(s in n&&!(i=B.exec(a))||(i&&(a=a.slice(i[0].length)||a),u.push(o=[])),n=!1,(i=q.exec(a))&&(n=i.shift(),o.push({value:n,type:i[0].replace(U," ")}),a=a.slice(n.length)),r.filter)!(i=Q[s].exec(a))||c[s]&&!(i=c[s](i))||(n=i.shift(),o.push({value:n,type:s,matches:i}),a=a.slice(n.length));if(!n)break}return e?a.length:a?ot.error(t):D(t,u).slice(0)},a=ot.compile=function(t,e){var n,i=[],o=[],a=T[t+" "];if(!a){for(e||(e=s(t)),n=e.length;n--;)(a=Ct(e[n]))[w]?i.push(a):o.push(a);(a=T(t,function(t,e){var n=e.length>0,i=t.length>0,o=function(o,s,a,u,l){var f,d,v,g=0,b="0",y=o&&[],w=[],x=c,E=o||i&&r.find.TAG("*",l),k=C+=null==x?1:Math.random()||.1,D=E.length;for(l&&(c=s===p||s||l);b!==D&&null!=(f=E[b]);b++){if(i&&f){for(d=0,s||f.ownerDocument===p||(h(f),a=!m);v=t[d++];)if(v(f,s||p,a)){u.push(f);break}l&&(C=k)}n&&((f=!v&&f)&&g--,o&&y.push(f))}if(g+=b,n&&b!==g){for(d=0;v=e[d++];)v(y,w,s,a);if(o){if(g>0)for(;b--;)y[b]||w[b]||(w[b]=A.call(u));w=wt(w)}j.apply(u,w),l&&!o&&w.length>0&&g+e.length>1&&ot.uniqueSort(u)}return l&&(C=k,c=x),y};return n?at(o):o}(o,i))).selector=t}return a},u=ot.select=function(t,e,n,i){var o,u,c,l,f,h="function"==typeof t&&t,p=!i&&s(t=h.selector||t);if(n=n||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===e.nodeType&&m&&r.relative[u[1].type]){if(!(e=(r.find.ID(c.matches[0].replace(Z,tt),e)||[])[0]))return n;h&&(e=e.parentNode),t=t.slice(u.shift().value.length)}for(o=Q.needsContext.test(t)?0:u.length;o--&&(c=u[o],!r.relative[l=c.type]);)if((f=r.find[l])&&(i=f(c.matches[0].replace(Z,tt),K.test(u[0].type)&&mt(e.parentNode)||e))){if(u.splice(o,1),!(t=i.length&&gt(u)))return j.apply(n,i),n;break}}return(h||a(t,p))(i,e,!m,n,!e||K.test(t)&&mt(e.parentNode)||e),n},n.sortStable=w.split("").sort(O).join("")===w,n.detectDuplicates=!!f,h(),n.sortDetached=ut(function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))}),ut(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ct("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),n.attributes&&ut(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ct("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),ut(function(t){return null==t.getAttribute("disabled")})||ct(F,function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null}),ot}(n);E.find=T,E.expr=T.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=T.uniqueSort,E.text=T.getText,E.isXMLDoc=T.isXML,E.contains=T.contains,E.escapeSelector=T.escape;var O=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&E(t).is(n))break;r.push(t)}return r},S=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},_=E.expr.match.needsContext;function A(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(t,e,n){return b(e)?E.grep(t,function(t,r){return!!e.call(t,r,t)!==n}):e.nodeType?E.grep(t,function(t){return t===e!==n}):"string"!=typeof e?E.grep(t,function(t){return f.call(e,t)>-1!==n}):E.filter(e,t,n)}E.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?E.find.matchesSelector(r,t)?[r]:[]:E.find.matches(t,E.grep(e,function(t){return 1===t.nodeType}))},E.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(E(t).filter(function(){for(e=0;e<r;e++)if(E.contains(i[e],this))return!0}));for(n=this.pushStack([]),e=0;e<r;e++)E.find(t,i[e],n);return r>1?E.uniqueSort(n):n},filter:function(t){return this.pushStack(j(this,t||[],!1))},not:function(t){return this.pushStack(j(this,t||[],!0))},is:function(t){return!!j(this,"string"==typeof t&&_.test(t)?E(t):t||[],!1).length}});var L,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||L,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:P.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof E?e[0]:e,E.merge(this,E.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:s,!0)),N.test(r[1])&&E.isPlainObject(e))for(r in e)b(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=s.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):b(t)?void 0!==n.ready?n.ready(t):t(E):E.makeArray(t,this)}).prototype=E.fn,L=E(s);var F=/^(?:parents|prev(?:Until|All))/,M={children:!0,contents:!0,next:!0,prev:!0};function R(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}E.fn.extend({has:function(t){var e=E(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(E.contains(this,e[t]))return!0})},closest:function(t,e){var n,r=0,i=this.length,o=[],s="string"!=typeof t&&E(t);if(!_.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?E.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?f.call(E(t),this[0]):f.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),E.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return O(t,"parentNode")},parentsUntil:function(t,e,n){return O(t,"parentNode",n)},next:function(t){return R(t,"nextSibling")},prev:function(t){return R(t,"previousSibling")},nextAll:function(t){return O(t,"nextSibling")},prevAll:function(t){return O(t,"previousSibling")},nextUntil:function(t,e,n){return O(t,"nextSibling",n)},prevUntil:function(t,e,n){return O(t,"previousSibling",n)},siblings:function(t){return S((t.parentNode||{}).firstChild,t)},children:function(t){return S(t.firstChild)},contents:function(t){return A(t,"iframe")?t.contentDocument:(A(t,"template")&&(t=t.content||t),E.merge([],t.childNodes))}},function(t,e){E.fn[t]=function(n,r){var i=E.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=E.filter(r,i)),this.length>1&&(M[t]||E.uniqueSort(i),F.test(t)&&i.reverse()),this.pushStack(i)}});var H=/[^\x20\t\r\n\f]+/g;function I(t){return t}function $(t){throw t}function U(t,e,n,r){var i;try{t&&b(i=t.promise)?i.call(t).done(e).fail(n):t&&b(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}E.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return E.each(t.match(H)||[],function(t,n){e[n]=!0}),e}(t):E.extend({},t);var e,n,r,i,o=[],s=[],a=-1,u=function(){for(i=i||t.once,r=e=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(a=o.length-1,s.push(n)),function e(n){E.each(n,function(n,r){b(r)?t.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==C(r)&&e(r)})}(arguments),n&&!e&&u()),this},remove:function(){return E.each(arguments,function(t,e){for(var n;(n=E.inArray(e,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(t){return t?E.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=s=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},E.extend({Deferred:function(t){var e=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return E.Deferred(function(n){E.each(e,function(e,r){var i=b(t[r[4]])&&t[r[4]];o[r[1]](function(){var t=i&&i.apply(this,arguments);t&&b(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)})}),t=null}).promise()},then:function(t,r,i){var o=0;function s(t,e,r,i){return function(){var a=this,u=arguments,c=function(){var n,c;if(!(t<o)){if((n=r.apply(a,u))===e.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,b(c)?i?c.call(n,s(o,e,I,i),s(o,e,$,i)):(o++,c.call(n,s(o,e,I,i),s(o,e,$,i),s(o,e,I,e.notifyWith))):(r!==I&&(a=void 0,u=[n]),(i||e.resolveWith)(a,u))}},l=i?c:function(){try{c()}catch(n){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(n,l.stackTrace),t+1>=o&&(r!==$&&(a=void 0,u=[n]),e.rejectWith(a,u))}};t?l():(E.Deferred.getStackHook&&(l.stackTrace=E.Deferred.getStackHook()),n.setTimeout(l))}}return E.Deferred(function(n){e[0][3].add(s(0,n,b(i)?i:I,n.notifyWith)),e[1][3].add(s(0,n,b(t)?t:I)),e[2][3].add(s(0,n,b(r)?r:$))}).promise()},promise:function(t){return null!=t?E.extend(t,i):i}},o={};return E.each(e,function(t,n){var s=n[2],a=n[5];i[n[1]]=s.add,a&&s.add(function(){r=a},e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=u.call(arguments),o=E.Deferred(),s=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?u.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(U(t,o.done(s(n)).resolve,o.reject,!e),"pending"===o.state()||b(i[n]&&i[n].then)))return o.then();for(;n--;)U(i[n],s(n),o.reject);return o.promise()}});var B=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&B.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},E.readyException=function(t){n.setTimeout(function(){throw t})};var q=E.Deferred();function W(){s.removeEventListener("DOMContentLoaded",W),n.removeEventListener("load",W),E.ready()}E.fn.ready=function(t){return q.then(t).catch(function(t){E.readyException(t)}),this},E.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==t&&--E.readyWait>0||q.resolveWith(s,[E]))}}),E.ready.then=q.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(E.ready):(s.addEventListener("DOMContentLoaded",W),n.addEventListener("load",W));var J=function(t,e,n,r,i,o,s){var a=0,u=t.length,c=null==n;if("object"===C(n))for(a in i=!0,n)J(t,e,a,n[a],!0,o,s);else if(void 0!==r&&(i=!0,b(r)||(s=!0),c&&(s?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(E(t),n)})),e))for(;a<u;a++)e(t[a],n,s?r:r.call(t[a],a,e(t[a],n)));return i?t:c?e.call(t):u?e(t[0],n):o},V=/^-ms-/,Q=/-([a-z])/g;function Y(t,e){return e.toUpperCase()}function X(t){return t.replace(V,"ms-").replace(Q,Y)}var G=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function z(){this.expando=E.expando+z.uid++}z.uid=1,z.prototype={cache:function(t){var e=t[this.expando];return e||(e={},G(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[X(e)]=n;else for(r in e)i[X(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in r?[e]:e.match(H)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||E.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!E.isEmptyObject(e)}};var K=new z,Z=new z,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Z.set(t,e,n)}else n=void 0;return n}E.extend({hasData:function(t){return Z.hasData(t)||K.hasData(t)},data:function(t,e,n){return Z.access(t,e,n)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,n){return K.access(t,e,n)},_removeData:function(t,e){K.remove(t,e)}}),E.fn.extend({data:function(t,e){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(i=Z.get(o),1===o.nodeType&&!K.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=X(r.slice(5)),nt(o,r,i[r]));K.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each(function(){Z.set(this,t)}):J(this,function(e){var n;if(o&&void 0===e)return void 0!==(n=Z.get(o,t))?n:void 0!==(n=nt(o,t))?n:void 0;this.each(function(){Z.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Z.remove(this,t)})}}),E.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=K.get(t,e),n&&(!r||Array.isArray(n)?r=K.access(t,e,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=E.queue(t,e),r=n.length,i=n.shift(),o=E._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,function(){E.dequeue(t,e)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return K.get(t,n)||K.access(t,n,{empty:E.Callbacks("once memory").add(function(){K.remove(t,[e+"queue",n])})})}}),E.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?E.queue(this[0],t):void 0===e?this:this.each(function(){var n=E.queue(this,t,e);E._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&E.dequeue(this,t)})},dequeue:function(t){return this.each(function(){E.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=E.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=K.get(o[s],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(e)}});var rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+rt+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],st=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&E.contains(t.ownerDocument,t)&&"none"===E.css(t,"display")},at=function(t,e,n,r){var i,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];for(o in i=n.apply(t,r||[]),e)t.style[o]=s[o];return i};function ut(t,e,n,r){var i,o,s=20,a=r?function(){return r.cur()}:function(){return E.css(t,e,"")},u=a(),c=n&&n[3]||(E.cssNumber[e]?"":"px"),l=(E.cssNumber[e]||"px"!==c&&+u)&&it.exec(E.css(t,e));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;s--;)E.style(t,e,l+c),(1-o)*(1-(o=a()/u||.5))<=0&&(s=0),l/=o;l*=2,E.style(t,e,l+c),n=n||[]}return n&&(l=+l||+u||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}var ct={};function lt(t){var e,n=t.ownerDocument,r=t.nodeName,i=ct[r];return i||(e=n.body.appendChild(n.createElement(r)),i=E.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),ct[r]=i,i)}function ft(t,e){for(var n,r,i=[],o=0,s=t.length;o<s;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=K.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&st(r)&&(i[o]=lt(r))):"none"!==n&&(i[o]="none",K.set(r,"display",n)));for(o=0;o<s;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}E.fn.extend({show:function(){return ft(this,!0)},hide:function(){return ft(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){st(this)?E(this).show():E(this).hide()})}});var ht=/^(?:checkbox|radio)$/i,pt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,dt=/^$|^module$|\/(?:java|ecma)script/i,mt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function vt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&A(t,e)?E.merge([t],n):n}function gt(t,e){for(var n=0,r=t.length;n<r;n++)K.set(t[n],"globalEval",!e||K.get(e[n],"globalEval"))}mt.optgroup=mt.option,mt.tbody=mt.tfoot=mt.colgroup=mt.caption=mt.thead,mt.th=mt.td;var bt,yt,wt=/<|&#?\w+;/;function xt(t,e,n,r,i){for(var o,s,a,u,c,l,f=e.createDocumentFragment(),h=[],p=0,d=t.length;p<d;p++)if((o=t[p])||0===o)if("object"===C(o))E.merge(h,o.nodeType?[o]:o);else if(wt.test(o)){for(s=s||f.appendChild(e.createElement("div")),a=(pt.exec(o)||["",""])[1].toLowerCase(),u=mt[a]||mt._default,s.innerHTML=u[1]+E.htmlPrefilter(o)+u[2],l=u[0];l--;)s=s.lastChild;E.merge(h,s.childNodes),(s=f.firstChild).textContent=""}else h.push(e.createTextNode(o));for(f.textContent="",p=0;o=h[p++];)if(r&&E.inArray(o,r)>-1)i&&i.push(o);else if(c=E.contains(o.ownerDocument,o),s=vt(f.appendChild(o),"script"),c&&gt(s),n)for(l=0;o=s[l++];)dt.test(o.type||"")&&n.push(o);return f}bt=s.createDocumentFragment().appendChild(s.createElement("div")),(yt=s.createElement("input")).setAttribute("type","radio"),yt.setAttribute("checked","checked"),yt.setAttribute("name","t"),bt.appendChild(yt),g.checkClone=bt.cloneNode(!0).cloneNode(!0).lastChild.checked,bt.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!bt.cloneNode(!0).lastChild.defaultValue;var Ct=s.documentElement,Et=/^key/,kt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Dt=/^([^.]*)(?:\.(.+)|)/;function Tt(){return!0}function Ot(){return!1}function St(){try{return s.activeElement}catch(t){}}function _t(t,e,n,r,i,o){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(r=r||n,n=void 0),e)_t(t,a,n,r,e[a],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ot;else if(!i)return t;return 1===o&&(s=i,(i=function(t){return E().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=E.guid++)),t.each(function(){E.event.add(this,e,i,r,n)})}E.event={global:{},add:function(t,e,n,r,i){var o,s,a,u,c,l,f,h,p,d,m,v=K.get(t);if(v)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&E.find.matchesSelector(Ct,i),n.guid||(n.guid=E.guid++),(u=v.events)||(u=v.events={}),(s=v.handle)||(s=v.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(H)||[""]).length;c--;)p=m=(a=Dt.exec(e[c])||[])[1],d=(a[2]||"").split(".").sort(),p&&(f=E.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=E.event.special[p]||{},l=E.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&E.expr.match.needsContext.test(i),namespace:d.join(".")},o),(h=u[p])||((h=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,d,s)||t.addEventListener&&t.addEventListener(p,s)),f.add&&(f.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),i?h.splice(h.delegateCount++,0,l):h.push(l),E.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,s,a,u,c,l,f,h,p,d,m,v=K.hasData(t)&&K.get(t);if(v&&(u=v.events)){for(c=(e=(e||"").match(H)||[""]).length;c--;)if(p=m=(a=Dt.exec(e[c])||[])[1],d=(a[2]||"").split(".").sort(),p){for(f=E.event.special[p]||{},h=u[p=(r?f.delegateType:f.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=h.length;o--;)l=h[o],!i&&m!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(h.splice(o,1),l.selector&&h.delegateCount--,f.remove&&f.remove.call(t,l));s&&!h.length&&(f.teardown&&!1!==f.teardown.call(t,d,v.handle)||E.removeEvent(t,p,v.handle),delete u[p])}else for(p in u)E.event.remove(t,p+e[c],n,r,!0);E.isEmptyObject(u)&&K.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,s,a=E.event.fix(t),u=new Array(arguments.length),c=(K.get(this,"events")||{})[a.type]||[],l=E.event.special[a.type]||{};for(u[0]=a,e=1;e<arguments.length;e++)u[e]=arguments[e];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(s=E.event.handlers.call(this,a,c),e=0;(i=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(r=((E.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,r,i,o,s,a=[],u=e.delegateCount,c=t.target;if(u&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],s={},n=0;n<u;n++)void 0===s[i=(r=e[n]).selector+" "]&&(s[i]=r.needsContext?E(i,this).index(c)>-1:E.find(i,this,null,[c]).length),s[i]&&o.push(r);o.length&&a.push({elem:c,handlers:o})}return c=this,u<e.length&&a.push({elem:c,handlers:e.slice(u)}),a},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[E.expando]?t:new E.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==St()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===St()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&A(this,"input"))return this.click(),!1},_default:function(t){return A(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},E.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},E.Event=function(t,e){if(!(this instanceof E.Event))return new E.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Tt:Ot,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&E.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Ot,isPropagationStopped:Ot,isImmediatePropagationStopped:Ot,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Tt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Tt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Tt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Et.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&kt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},E.event.addProp),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){E.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=t.relatedTarget,i=t.handleObj;return r&&(r===this||E.contains(this,r))||(t.type=i.origType,n=i.handler.apply(this,arguments),t.type=e),n}}}),E.fn.extend({on:function(t,e,n,r){return _t(this,t,e,n,r)},one:function(t,e,n,r){return _t(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,E(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Ot),this.each(function(){E.event.remove(this,t,n,e)})}});var At=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Nt=/<script|<style|<link/i,jt=/checked\s*(?:[^=]|=\s*.checked.)/i,Lt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Pt(t,e){return A(t,"table")&&A(11!==e.nodeType?e:e.firstChild,"tr")&&E(t).children("tbody")[0]||t}function Ft(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Mt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Rt(t,e){var n,r,i,o,s,a,u,c;if(1===e.nodeType){if(K.hasData(t)&&(o=K.access(t),s=K.set(e,o),c=o.events))for(i in delete s.handle,s.events={},c)for(n=0,r=c[i].length;n<r;n++)E.event.add(e,i,c[i][n]);Z.hasData(t)&&(a=Z.access(t),u=E.extend({},a),Z.set(e,u))}}function Ht(t,e,n,r){e=c.apply([],e);var i,o,s,a,u,l,f=0,h=t.length,p=h-1,d=e[0],m=b(d);if(m||h>1&&"string"==typeof d&&!g.checkClone&&jt.test(d))return t.each(function(i){var o=t.eq(i);m&&(e[0]=d.call(this,i,o.html())),Ht(o,e,n,r)});if(h&&(o=(i=xt(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(a=(s=E.map(vt(i,"script"),Ft)).length;f<h;f++)u=i,f!==p&&(u=E.clone(u,!0,!0),a&&E.merge(s,vt(u,"script"))),n.call(t[f],u,f);if(a)for(l=s[s.length-1].ownerDocument,E.map(s,Mt),f=0;f<a;f++)u=s[f],dt.test(u.type||"")&&!K.access(u,"globalEval")&&E.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?E._evalUrl&&E._evalUrl(u.src):x(u.textContent.replace(Lt,""),l,u))}return t}function It(t,e,n){for(var r,i=e?E.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||E.cleanData(vt(r)),r.parentNode&&(n&&E.contains(r.ownerDocument,r)&&gt(vt(r,"script")),r.parentNode.removeChild(r));return t}E.extend({htmlPrefilter:function(t){return t.replace(At,"<$1></$2>")},clone:function(t,e,n){var r,i,o,s,a,u,c,l=t.cloneNode(!0),f=E.contains(t.ownerDocument,t);if(!(g.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||E.isXMLDoc(t)))for(s=vt(l),r=0,i=(o=vt(t)).length;r<i;r++)a=o[r],u=s[r],c=void 0,"input"===(c=u.nodeName.toLowerCase())&&ht.test(a.type)?u.checked=a.checked:"input"!==c&&"textarea"!==c||(u.defaultValue=a.defaultValue);if(e)if(n)for(o=o||vt(t),s=s||vt(l),r=0,i=o.length;r<i;r++)Rt(o[r],s[r]);else Rt(t,l);return(s=vt(l,"script")).length>0&&gt(s,!f&&vt(t,"script")),l},cleanData:function(t){for(var e,n,r,i=E.event.special,o=0;void 0!==(n=t[o]);o++)if(G(n)){if(e=n[K.expando]){if(e.events)for(r in e.events)i[r]?E.event.remove(n,r):E.removeEvent(n,r,e.handle);n[K.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(t){return It(this,t,!0)},remove:function(t){return It(this,t)},text:function(t){return J(this,function(t){return void 0===t?E.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Ht(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Pt(this,t).appendChild(t)})},prepend:function(){return Ht(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Pt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Ht(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Ht(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(E.cleanData(vt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return E.clone(this,t,e)})},html:function(t){return J(this,function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Nt.test(t)&&!mt[(pt.exec(t)||["",""])[1].toLowerCase()]){t=E.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(E.cleanData(vt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return Ht(this,arguments,function(e){var n=this.parentNode;E.inArray(this,t)<0&&(E.cleanData(vt(this)),n&&n.replaceChild(e,this))},t)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){E.fn[t]=function(t){for(var n,r=[],i=E(t),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),E(i[s])[e](n),l.apply(r,n.get());return this.pushStack(r)}});var $t=new RegExp("^("+rt+")(?!px)[a-z%]+$","i"),Ut=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},Bt=new RegExp(ot.join("|"),"i");function qt(t,e,n){var r,i,o,s,a=t.style;return(n=n||Ut(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||E.contains(t.ownerDocument,t)||(s=E.style(t,e)),!g.pixelBoxStyles()&&$t.test(s)&&Bt.test(e)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function Wt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Ct.appendChild(c).appendChild(l);var t=n.getComputedStyle(l);r="1%"!==t.top,u=12===e(t.marginLeft),l.style.right="60%",a=36===e(t.right),i=36===e(t.width),l.style.position="absolute",o=36===l.offsetWidth||"absolute",Ct.removeChild(c),l=null}}function e(t){return Math.round(parseFloat(t))}var r,i,o,a,u,c=s.createElement("div"),l=s.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===l.style.backgroundClip,E.extend(g,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),o}}))}();var Jt=/^(none|table(?!-c[ea]).+)/,Vt=/^--/,Qt={position:"absolute",visibility:"hidden",display:"block"},Yt={letterSpacing:"0",fontWeight:"400"},Xt=["Webkit","Moz","ms"],Gt=s.createElement("div").style;function zt(t){var e=E.cssProps[t];return e||(e=E.cssProps[t]=function(t){if(t in Gt)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Xt.length;n--;)if((t=Xt[n]+e)in Gt)return t}(t)||t),e}function Kt(t,e,n){var r=it.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function Zt(t,e,n,r,i,o){var s="width"===e?1:0,a=0,u=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(u+=E.css(t,n+ot[s],!0,i)),r?("content"===n&&(u-=E.css(t,"padding"+ot[s],!0,i)),"margin"!==n&&(u-=E.css(t,"border"+ot[s]+"Width",!0,i))):(u+=E.css(t,"padding"+ot[s],!0,i),"padding"!==n?u+=E.css(t,"border"+ot[s]+"Width",!0,i):a+=E.css(t,"border"+ot[s]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-u-a-.5))),u}function te(t,e,n){var r=Ut(t),i=qt(t,e,r),o="border-box"===E.css(t,"boxSizing",!1,r),s=o;if($t.test(i)){if(!n)return i;i="auto"}return s=s&&(g.boxSizingReliable()||i===t.style[e]),("auto"===i||!parseFloat(i)&&"inline"===E.css(t,"display",!1,r))&&(i=t["offset"+e[0].toUpperCase()+e.slice(1)],s=!0),(i=parseFloat(i)||0)+Zt(t,e,n||(o?"border":"content"),s,r,i)+"px"}function ee(t,e,n,r,i){return new ee.prototype.init(t,e,n,r,i)}E.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=qt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,s,a=X(e),u=Vt.test(e),c=t.style;if(u||(e=zt(a)),s=E.cssHooks[e]||E.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(t,!1,r))?i:c[e];"string"===(o=typeof n)&&(i=it.exec(n))&&i[1]&&(n=ut(t,e,i),o="number"),null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(E.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,r))||(u?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,r){var i,o,s,a=X(e);return Vt.test(e)||(e=zt(a)),(s=E.cssHooks[e]||E.cssHooks[a])&&"get"in s&&(i=s.get(t,!0,n)),void 0===i&&(i=qt(t,e,r)),"normal"===i&&e in Yt&&(i=Yt[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),E.each(["height","width"],function(t,e){E.cssHooks[e]={get:function(t,n,r){if(n)return!Jt.test(E.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?te(t,e,r):at(t,Qt,function(){return te(t,e,r)})},set:function(t,n,r){var i,o=Ut(t),s="border-box"===E.css(t,"boxSizing",!1,o),a=r&&Zt(t,e,r,s,o);return s&&g.scrollboxSize()===o.position&&(a-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-Zt(t,e,"border",!1,o)-.5)),a&&(i=it.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=E.css(t,e)),Kt(0,n,a)}}}),E.cssHooks.marginLeft=Wt(g.reliableMarginLeft,function(t,e){if(e)return(parseFloat(qt(t,"marginLeft"))||t.getBoundingClientRect().left-at(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),E.each({margin:"",padding:"",border:"Width"},function(t,e){E.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ot[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(E.cssHooks[t+e].set=Kt)}),E.fn.extend({css:function(t,e){return J(this,function(t,e,n){var r,i,o={},s=0;if(Array.isArray(e)){for(r=Ut(t),i=e.length;s<i;s++)o[e[s]]=E.css(t,e[s],!1,r);return o}return void 0!==n?E.style(t,e,n):E.css(t,e)},t,e,arguments.length>1)}}),E.Tween=ee,ee.prototype={constructor:ee,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||E.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(E.cssNumber[n]?"":"px")},cur:function(){var t=ee.propHooks[this.prop];return t&&t.get?t.get(this):ee.propHooks._default.get(this)},run:function(t){var e,n=ee.propHooks[this.prop];return this.options.duration?this.pos=e=E.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ee.propHooks._default.set(this),this}},ee.prototype.init.prototype=ee.prototype,ee.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=E.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){E.fx.step[t.prop]?E.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[E.cssProps[t.prop]]&&!E.cssHooks[t.prop]?t.elem[t.prop]=t.now:E.style(t.elem,t.prop,t.now+t.unit)}}},ee.propHooks.scrollTop=ee.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},E.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},E.fx=ee.prototype.init,E.fx.step={};var ne,re,ie=/^(?:toggle|show|hide)$/,oe=/queueHooks$/;function se(){re&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(se):n.setTimeout(se,E.fx.interval),E.fx.tick())}function ae(){return n.setTimeout(function(){ne=void 0}),ne=Date.now()}function ue(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ot[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function ce(t,e,n){for(var r,i=(le.tweeners[e]||[]).concat(le.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,e,t))return r}function le(t,e,n){var r,i,o=0,s=le.prefilters.length,a=E.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var e=ne||ae(),n=Math.max(0,c.startTime+c.duration-e),r=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(r);return a.notifyWith(t,[c,r,n]),r<1&&s?n:(s||a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:e,originalOptions:n,startTime:ne||ae(),duration:n.duration,tweens:[],createTween:function(e,n){var r=E.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(r),r},stop:function(e){var n=0,r=e?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return e?(a.notifyWith(t,[c,1,0]),a.resolveWith(t,[c,e])):a.rejectWith(t,[c,e]),this}}),l=c.props;for(!function(t,e){var n,r,i,o,s;for(n in t)if(i=e[r=X(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(s=E.cssHooks[r])&&"expand"in s)for(n in o=s.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(l,c.opts.specialEasing);o<s;o++)if(r=le.prefilters[o].call(c,t,l,c.opts))return b(r.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return E.map(l,ce,c),b(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(u,{elem:t,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(le,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ut(n.elem,t,it.exec(e),n),n}]},tweener:function(t,e){b(t)?(e=t,t=["*"]):t=t.match(H);for(var n,r=0,i=t.length;r<i;r++)n=t[r],le.tweeners[n]=le.tweeners[n]||[],le.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,s,a,u,c,l,f="width"in e||"height"in e,h=this,p={},d=t.style,m=t.nodeType&&st(t),v=K.get(t,"fxshow");for(r in n.queue||(null==(s=E._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,h.always(function(){h.always(function(){s.unqueued--,E.queue(t,"fx").length||s.empty.fire()})})),e)if(i=e[r],ie.test(i)){if(delete e[r],o=o||"toggle"===i,i===(m?"hide":"show")){if("show"!==i||!v||void 0===v[r])continue;m=!0}p[r]=v&&v[r]||E.style(t,r)}if((u=!E.isEmptyObject(e))||!E.isEmptyObject(p))for(r in f&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(c=v&&v.display)&&(c=K.get(t,"display")),"none"===(l=E.css(t,"display"))&&(c?l=c:(ft([t],!0),c=t.style.display||c,l=E.css(t,"display"),ft([t]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===E.css(t,"float")&&(u||(h.done(function(){d.display=c}),null==c&&(l=d.display,c="none"===l?"":l)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),u=!1,p)u||(v?"hidden"in v&&(m=v.hidden):v=K.access(t,"fxshow",{display:c}),o&&(v.hidden=!m),m&&ft([t],!0),h.done(function(){for(r in m||ft([t]),K.remove(t,"fxshow"),p)E.style(t,r,p[r])})),u=ce(m?v[r]:0,r,h),r in v||(v[r]=u.start,m&&(u.end=u.start,u.start=0))}],prefilter:function(t,e){e?le.prefilters.unshift(t):le.prefilters.push(t)}}),E.speed=function(t,e,n){var r=t&&"object"==typeof t?E.extend({},t):{complete:n||!n&&e||b(t)&&t,duration:t,easing:n&&e||e&&!b(e)&&e};return E.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in E.fx.speeds?r.duration=E.fx.speeds[r.duration]:r.duration=E.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){b(r.old)&&r.old.call(this),r.queue&&E.dequeue(this,r.queue)},r},E.fn.extend({fadeTo:function(t,e,n,r){return this.filter(st).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=E.isEmptyObject(t),o=E.speed(e,n,r),s=function(){var e=le(this,E.extend({},t),o);(i||K.get(this,"finish"))&&e.stop(!0)};return s.finish=s,i||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,i=null!=t&&t+"queueHooks",o=E.timers,s=K.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&oe.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||E.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=K.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=E.timers,s=r?r.length:0;for(n.finish=!0,E.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish})}}),E.each(["toggle","show","hide"],function(t,e){var n=E.fn[e];E.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(ue(e,!0),t,r,i)}}),E.each({slideDown:ue("show"),slideUp:ue("hide"),slideToggle:ue("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){E.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}}),E.timers=[],E.fx.tick=function(){var t,e=0,n=E.timers;for(ne=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||E.fx.stop(),ne=void 0},E.fx.timer=function(t){E.timers.push(t),E.fx.start()},E.fx.interval=13,E.fx.start=function(){re||(re=!0,se())},E.fx.stop=function(){re=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(t,e){return t=E.fx&&E.fx.speeds[t]||t,e=e||"fx",this.queue(e,function(e,r){var i=n.setTimeout(e,t);r.stop=function(){n.clearTimeout(i)}})},function(){var t=s.createElement("input"),e=s.createElement("select").appendChild(s.createElement("option"));t.type="checkbox",g.checkOn=""!==t.value,g.optSelected=e.selected,(t=s.createElement("input")).value="t",t.type="radio",g.radioValue="t"===t.value}();var fe,he=E.expr.attrHandle;E.fn.extend({attr:function(t,e){return J(this,E.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){E.removeAttr(this,t)})}}),E.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?E.prop(t,e,n):(1===o&&E.isXMLDoc(t)||(i=E.attrHooks[e.toLowerCase()]||(E.expr.match.bool.test(e)?fe:void 0)),void 0!==n?null===n?void E.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=E.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!g.radioValue&&"radio"===e&&A(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(H);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),fe={set:function(t,e,n){return!1===e?E.removeAttr(t,n):t.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),function(t,e){var n=he[e]||E.find.attr;he[e]=function(t,e,r){var i,o,s=e.toLowerCase();return r||(o=he[s],he[s]=i,i=null!=n(t,e,r)?s:null,he[s]=o),i}});var pe=/^(?:input|select|textarea|button)$/i,de=/^(?:a|area)$/i;function me(t){return(t.match(H)||[]).join(" ")}function ve(t){return t.getAttribute&&t.getAttribute("class")||""}function ge(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(H)||[]}E.fn.extend({prop:function(t,e){return J(this,E.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[E.propFix[t]||t]})}}),E.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(t)||(e=E.propFix[e]||e,i=E.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=E.find.attr(t,"tabindex");return e?parseInt(e,10):pe.test(t.nodeName)||de.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(E.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){E.propFix[this.toLowerCase()]=this}),E.fn.extend({addClass:function(t){var e,n,r,i,o,s,a,u=0;if(b(t))return this.each(function(e){E(this).addClass(t.call(this,e,ve(this)))});if((e=ge(t)).length)for(;n=this[u++];)if(i=ve(n),r=1===n.nodeType&&" "+me(i)+" "){for(s=0;o=e[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(a=me(r))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,r,i,o,s,a,u=0;if(b(t))return this.each(function(e){E(this).removeClass(t.call(this,e,ve(this)))});if(!arguments.length)return this.attr("class","");if((e=ge(t)).length)for(;n=this[u++];)if(i=ve(n),r=1===n.nodeType&&" "+me(i)+" "){for(s=0;o=e[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(a=me(r))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t,r="string"===n||Array.isArray(t);return"boolean"==typeof e&&r?e?this.addClass(t):this.removeClass(t):b(t)?this.each(function(n){E(this).toggleClass(t.call(this,n,ve(this),e),e)}):this.each(function(){var e,i,o,s;if(r)for(i=0,o=E(this),s=ge(t);e=s[i++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=ve(this))&&K.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":K.get(this,"__className__")||""))})},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+me(ve(n))+" ").indexOf(e)>-1)return!0;return!1}});var be=/\r/g;E.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=b(t),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,E(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=E.map(i,function(t){return null==t?"":t+""})),(e=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))})):i?(e=E.valHooks[i.type]||E.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(be,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(t){var e=E.find.attr(t,"value");return null!=e?e:me(E.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,s="select-one"===t.type,a=s?null:[],u=s?o+1:i.length;for(r=o<0?u:s?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(e=E(n).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var n,r,i=t.options,o=E.makeArray(e),s=i.length;s--;)((r=i[s]).selected=E.inArray(E.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),E.each(["radio","checkbox"],function(){E.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=E.inArray(E(t).val(),e)>-1}},g.checkOn||(E.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),g.focusin="onfocusin"in n;var ye=/^(?:focusinfocus|focusoutblur)$/,we=function(t){t.stopPropagation()};E.extend(E.event,{trigger:function(t,e,r,i){var o,a,u,c,l,f,h,p,m=[r||s],v=d.call(t,"type")?t.type:t,g=d.call(t,"namespace")?t.namespace.split("."):[];if(a=p=u=r=r||s,3!==r.nodeType&&8!==r.nodeType&&!ye.test(v+E.event.triggered)&&(v.indexOf(".")>-1&&(g=v.split("."),v=g.shift(),g.sort()),l=v.indexOf(":")<0&&"on"+v,(t=t[E.expando]?t:new E.Event(v,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=g.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),e=null==e?[t]:E.makeArray(e,[t]),h=E.event.special[v]||{},i||!h.trigger||!1!==h.trigger.apply(r,e))){if(!i&&!h.noBubble&&!y(r)){for(c=h.delegateType||v,ye.test(c+v)||(a=a.parentNode);a;a=a.parentNode)m.push(a),u=a;u===(r.ownerDocument||s)&&m.push(u.defaultView||u.parentWindow||n)}for(o=0;(a=m[o++])&&!t.isPropagationStopped();)p=a,t.type=o>1?c:h.bindType||v,(f=(K.get(a,"events")||{})[t.type]&&K.get(a,"handle"))&&f.apply(a,e),(f=l&&a[l])&&f.apply&&G(a)&&(t.result=f.apply(a,e),!1===t.result&&t.preventDefault());return t.type=v,i||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(m.pop(),e)||!G(r)||l&&b(r[v])&&!y(r)&&((u=r[l])&&(r[l]=null),E.event.triggered=v,t.isPropagationStopped()&&p.addEventListener(v,we),r[v](),t.isPropagationStopped()&&p.removeEventListener(v,we),E.event.triggered=void 0,u&&(r[l]=u)),t.result}},simulate:function(t,e,n){var r=E.extend(new E.Event,n,{type:t,isSimulated:!0});E.event.trigger(r,null,e)}}),E.fn.extend({trigger:function(t,e){return this.each(function(){E.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return E.event.trigger(t,e,n,!0)}}),g.focusin||E.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){E.event.simulate(e,t.target,E.event.fix(t))};E.event.special[e]={setup:function(){var r=this.ownerDocument||this,i=K.access(r,e);i||r.addEventListener(t,n,!0),K.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=K.access(r,e)-1;i?K.access(r,e,i):(r.removeEventListener(t,n,!0),K.remove(r,e))}}});var xe=n.location,Ce=Date.now(),Ee=/\?/;E.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+t),e};var ke=/\[\]$/,De=/\r?\n/g,Te=/^(?:submit|button|image|reset|file)$/i,Oe=/^(?:input|select|textarea|keygen)/i;function Se(t,e,n,r){var i;if(Array.isArray(e))E.each(e,function(e,i){n||ke.test(t)?r(t,i):Se(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)});else if(n||"object"!==C(e))r(t,e);else for(i in e)Se(t+"["+i+"]",e[i],n,r)}E.param=function(t,e){var n,r=[],i=function(t,e){var n=b(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!E.isPlainObject(t))E.each(t,function(){i(this.name,this.value)});else for(n in t)Se(n,t[n],e,i);return r.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=E.prop(this,"elements");return t?E.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!E(this).is(":disabled")&&Oe.test(this.nodeName)&&!Te.test(t)&&(this.checked||!ht.test(t))}).map(function(t,e){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,function(t){return{name:e.name,value:t.replace(De,"\r\n")}}):{name:e.name,value:n.replace(De,"\r\n")}}).get()}});var _e=/%20/g,Ae=/#.*$/,Ne=/([?&])_=[^&]*/,je=/^(.*?):[ \t]*([^\r\n]*)$/gm,Le=/^(?:GET|HEAD)$/,Pe=/^\/\//,Fe={},Me={},Re="*/".concat("*"),He=s.createElement("a");function Ie(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(H)||[];if(b(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function $e(t,e,n,r){var i={},o=t===Me;function s(a){var u;return i[a]=!0,E.each(t[a]||[],function(t,a){var c=a(e,n,r);return"string"!=typeof c||o||i[c]?o?!(u=c):void 0:(e.dataTypes.unshift(c),s(c),!1)}),u}return s(e.dataTypes[0])||!i["*"]&&s("*")}function Ue(t,e){var n,r,i=E.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&E.extend(!0,t,r),t}He.href=xe.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xe.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Re,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ue(Ue(t,E.ajaxSettings),e):Ue(E.ajaxSettings,t)},ajaxPrefilter:Ie(Fe),ajaxTransport:Ie(Me),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,i,o,a,u,c,l,f,h,p,d=E.ajaxSetup({},e),m=d.context||d,v=d.context&&(m.nodeType||m.jquery)?E(m):E.event,g=E.Deferred(),b=E.Callbacks("once memory"),y=d.statusCode||{},w={},x={},C="canceled",k={readyState:0,getResponseHeader:function(t){var e;if(l){if(!a)for(a={};e=je.exec(o);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(t,e){return null==l&&(t=x[t.toLowerCase()]=x[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==l&&(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)k.always(t[k.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||C;return r&&r.abort(e),D(0,e),this}};if(g.promise(k),d.url=((t||d.url||xe.href)+"").replace(Pe,xe.protocol+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(H)||[""],null==d.crossDomain){c=s.createElement("a");try{c.href=d.url,c.href=c.href,d.crossDomain=He.protocol+"//"+He.host!=c.protocol+"//"+c.host}catch(t){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=E.param(d.data,d.traditional)),$e(Fe,d,e,k),l)return k;for(h in(f=E.event&&d.global)&&0==E.active++&&E.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Le.test(d.type),i=d.url.replace(Ae,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(_e,"+")):(p=d.url.slice(i.length),d.data&&(d.processData||"string"==typeof d.data)&&(i+=(Ee.test(i)?"&":"?")+d.data,delete d.data),!1===d.cache&&(i=i.replace(Ne,"$1"),p=(Ee.test(i)?"&":"?")+"_="+Ce+++p),d.url=i+p),d.ifModified&&(E.lastModified[i]&&k.setRequestHeader("If-Modified-Since",E.lastModified[i]),E.etag[i]&&k.setRequestHeader("If-None-Match",E.etag[i])),(d.data&&d.hasContent&&!1!==d.contentType||e.contentType)&&k.setRequestHeader("Content-Type",d.contentType),k.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Re+"; q=0.01":""):d.accepts["*"]),d.headers)k.setRequestHeader(h,d.headers[h]);if(d.beforeSend&&(!1===d.beforeSend.call(m,k,d)||l))return k.abort();if(C="abort",b.add(d.complete),k.done(d.success),k.fail(d.error),r=$e(Me,d,e,k)){if(k.readyState=1,f&&v.trigger("ajaxSend",[k,d]),l)return k;d.async&&d.timeout>0&&(u=n.setTimeout(function(){k.abort("timeout")},d.timeout));try{l=!1,r.send(w,D)}catch(t){if(l)throw t;D(-1,t)}}else D(-1,"No Transport");function D(t,e,s,a){var c,h,p,w,x,C=e;l||(l=!0,u&&n.clearTimeout(u),r=void 0,o=a||"",k.readyState=t>0?4:0,c=t>=200&&t<300||304===t,s&&(w=function(t,e,n){for(var r,i,o,s,a=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||t.converters[i+" "+u[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}(d,k,s)),w=function(t,e,n,r){var i,o,s,a,u,c={},l=t.dataTypes.slice();if(l[1])for(s in t.converters)c[s.toLowerCase()]=t.converters[s];for(o=l.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=c[u+" "+o]||c["* "+o]))for(i in c)if((a=i.split(" "))[1]===o&&(s=c[u+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[i]:!0!==c[i]&&(o=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}(d,w,k,c),c?(d.ifModified&&((x=k.getResponseHeader("Last-Modified"))&&(E.lastModified[i]=x),(x=k.getResponseHeader("etag"))&&(E.etag[i]=x)),204===t||"HEAD"===d.type?C="nocontent":304===t?C="notmodified":(C=w.state,h=w.data,c=!(p=w.error))):(p=C,!t&&C||(C="error",t<0&&(t=0))),k.status=t,k.statusText=(e||C)+"",c?g.resolveWith(m,[h,C,k]):g.rejectWith(m,[k,C,p]),k.statusCode(y),y=void 0,f&&v.trigger(c?"ajaxSuccess":"ajaxError",[k,d,c?h:p]),b.fireWith(m,[k,C]),f&&(v.trigger("ajaxComplete",[k,d]),--E.active||E.event.trigger("ajaxStop")))}return k},getJSON:function(t,e,n){return E.get(t,e,n,"json")},getScript:function(t,e){return E.get(t,void 0,e,"script")}}),E.each(["get","post"],function(t,e){E[e]=function(t,n,r,i){return b(n)&&(i=i||r,r=n,n=void 0),E.ajax(E.extend({url:t,type:e,dataType:i,data:n,success:r},E.isPlainObject(t)&&t))}}),E._evalUrl=function(t){return E.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},E.fn.extend({wrapAll:function(t){var e;return this[0]&&(b(t)&&(t=t.call(this[0])),e=E(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return b(t)?this.each(function(e){E(this).wrapInner(t.call(this,e))}):this.each(function(){var e=E(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=b(t);return this.each(function(n){E(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){E(this).replaceWith(this.childNodes)}),this}}),E.expr.pseudos.hidden=function(t){return!E.expr.pseudos.visible(t)},E.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Be={0:200,1223:204},qe=E.ajaxSettings.xhr();g.cors=!!qe&&"withCredentials"in qe,g.ajax=qe=!!qe,E.ajaxTransport(function(t){var e,r;if(g.cors||qe&&!t.crossDomain)return{send:function(i,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];for(s in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)a.setRequestHeader(s,i[s]);e=function(t){return function(){e&&(e=r=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Be[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),r=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){e&&r()})},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),E.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return E.globalEval(t),t}}}),E.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),E.ajaxTransport("script",function(t){var e,n;if(t.crossDomain)return{send:function(r,i){e=E("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),s.head.appendChild(e[0])},abort:function(){n&&n()}}});var We,Je=[],Ve=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Je.pop()||E.expando+"_"+Ce++;return this[t]=!0,t}}),E.ajaxPrefilter("json jsonp",function(t,e,r){var i,o,s,a=!1!==t.jsonp&&(Ve.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ve.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=b(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ve,"$1"+i):!1!==t.jsonp&&(t.url+=(Ee.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||E.error(i+" was not called"),s[0]},t.dataTypes[0]="json",o=n[i],n[i]=function(){s=arguments},r.always(function(){void 0===o?E(n).removeProp(i):n[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,Je.push(i)),s&&b(o)&&o(s[0]),s=o=void 0}),"script"}),g.createHTMLDocument=((We=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===We.childNodes.length),E.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(g.createHTMLDocument?((r=(e=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,e.head.appendChild(r)):e=s),o=!n&&[],(i=N.exec(t))?[e.createElement(i[1])]:(i=xt([t],e,o),o&&o.length&&E(o).remove(),E.merge([],i.childNodes)));var r,i,o},E.fn.load=function(t,e,n){var r,i,o,s=this,a=t.indexOf(" ");return a>-1&&(r=me(t.slice(a)),t=t.slice(0,a)),b(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),s.length>0&&E.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(r?E("<div>").append(E.parseHTML(t)).find(r):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){E.fn[e]=function(t){return this.on(e,t)}}),E.expr.pseudos.animated=function(t){return E.grep(E.timers,function(e){return t===e.elem}).length},E.offset={setOffset:function(t,e,n){var r,i,o,s,a,u,c=E.css(t,"position"),l=E(t),f={};"static"===c&&(t.style.position="relative"),a=l.offset(),o=E.css(t,"top"),u=E.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(s=(r=l.position()).top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),b(e)&&(e=e.call(t,n,E.extend({},a))),null!=e.top&&(f.top=e.top-a.top+s),null!=e.left&&(f.left=e.left-a.left+i),"using"in e?e.using.call(t,f):l.css(f)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){E.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===E.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===E.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=E(t).offset()).top+=E.css(t,"borderTopWidth",!0),i.left+=E.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-E.css(r,"marginTop",!0),left:e.left-i.left-E.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===E.css(t,"position");)t=t.offsetParent;return t||Ct})}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;E.fn[t]=function(r){return J(this,function(t,r,i){var o;if(y(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i},t,r,arguments.length)}}),E.each(["top","left"],function(t,e){E.cssHooks[e]=Wt(g.pixelPosition,function(t,n){if(n)return n=qt(t,e),$t.test(n)?E(t).position()[e]+"px":n})}),E.each({Height:"height",Width:"width"},function(t,e){E.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,r){E.fn[r]=function(i,o){var s=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===o?"margin":"border");return J(this,function(e,n,i){var o;return y(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?E.css(e,n,a):E.style(e,n,i,a)},e,s?i:void 0,s)}})}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){E.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),E.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),E.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),E.proxy=function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),b(t))return r=u.call(arguments,2),(i=function(){return t.apply(e||this,r.concat(u.call(arguments)))}).guid=t.guid=t.guid||E.guid++,i},E.holdReady=function(t){t?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=A,E.isFunction=b,E.isWindow=y,E.camelCase=X,E.type=C,E.now=Date.now,E.isNumeric=function(t){var e=E.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(r=function(){return E}.apply(e,[]))||(t.exports=r);var Qe=n.jQuery,Ye=n.$;return E.noConflict=function(t){return n.$===E&&(n.$=Ye),t&&n.jQuery===E&&(n.jQuery=Qe),E},i||(n.jQuery=n.$=E),E})},function(t,e,n){t.exports=n(197)},function(t,e,n){t.exports=n(213)},function(t,e,n){t.exports=n(216)},function(t,e,n){"use strict";n.d(e,"routerModule",function(){return o});var r=n(60),i=(n(118),n(19));const o={binders:r.a,services:i}},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(218)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(100))},function(t,e,n){n(129);var r=n(8).Object;t.exports=function(t,e,n){return r.defineProperty(t,e,n)}},function(t,e,n){var r=n(13);r(r.S+r.F*!n(26),"Object",{defineProperty:n(25).f})},function(t,e,n){n(131);var r=n(8).Object;t.exports=function(t,e){return r.getOwnPropertyDescriptor(t,e)}},function(t,e,n){var r=n(32),i=n(65).f;n(67)("getOwnPropertyDescriptor",function(){return function(t,e){return i(r(t),e)}})},function(t,e,n){var r=n(38);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){t.exports=n(134)},function(t,e,n){n(82),t.exports=n(8).Object.getOwnPropertySymbols},function(t,e,n){var r=n(46)("meta"),i=n(23),o=n(31),s=n(25).f,a=0,u=Object.isExtensible||function(){return!0},c=!n(30)(function(){return u(Object.preventExtensions({}))}),l=function(t){s(t,r,{value:{i:"O"+ ++a,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!u(t))return"F";if(!e)return"E";l(t)}return t[r].i},getWeak:function(t,e){if(!o(t,r)){if(!u(t))return!0;if(!e)return!1;l(t)}return t[r].w},onFreeze:function(t){return c&&f.NEED&&u(t)&&!o(t,r)&&l(t),t}}},function(t,e,n){var r=n(48),i=n(86),o=n(66);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var s,a=n(t),u=o.f,c=0;a.length>c;)u.call(t,s=a[c++])&&e.push(s);return e}},function(t,e,n){var r=n(32),i=n(85),o=n(138);t.exports=function(t){return function(e,n,s){var a,u=r(e),c=i(u.length),l=o(s,c);if(t&&n!=n){for(;c>l;)if((a=u[l++])!=a)return!0}else for(;c>l;l++)if((t||l in u)&&u[l]===n)return t||l||0;return!t&&-1}}},function(t,e,n){var r=n(71),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},function(t,e,n){var r=n(25),i=n(22),o=n(48);t.exports=n(26)?Object.defineProperties:function(t,e){i(t);for(var n,s=o(e),a=s.length,u=0;a>u;)r.f(t,n=s[u++],e[n]);return t}},function(t,e,n){var r=n(32),i=n(89).f,o={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return s&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return s.slice()}}(t):i(r(t))}},function(t,e,n){n(142),t.exports=n(8).Object.keys},function(t,e,n){var r=n(74),i=n(48);n(67)("keys",function(){return function(t){return i(r(t))}})},function(t,e,n){"use strict";t.exports=function(t){function e(t){for(var e=0,n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){var n;function s(){if(s.enabled){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var o=s,a=Number(new Date),u=a-(n||a);o.diff=u,o.prev=n,o.curr=a,n=a,e[0]=r.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");var c=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,function(t,n){if("%%"===t)return t;c++;var i=r.formatters[n];if("function"==typeof i){var s=e[c];t=i.call(o,s),e.splice(c,1),c--}return t}),r.formatArgs.call(o,e),(o.log||r.log).apply(o,e)}}return s.namespace=t,s.enabled=r.enabled(t),s.useColors=r.useColors(),s.color=e(t),s.destroy=i,s.extend=o,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function i(){var t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function o(t,e){return r(this.namespace+(void 0===e?":":e)+t)}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){r.enable("")},r.enable=function(t){var e;r.save(t),r.names=[],r.skips=[];var n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){var o=r.instances[e];o.enabled=r.enabled(o.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;var e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(101),Object.keys(t).forEach(function(e){r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e,n){n(145),t.exports=n(8).parseInt},function(t,e,n){var r=n(13),i=n(146);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(t,e,n){var r=n(12).parseInt,i=n(102).trim,o=n(75),s=/^[-+]?0[xX]/;t.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(t,e){var n=i(String(t),3);return r(n,e>>>0||(s.test(n)?16:10))}:r},function(t,e,n){n(148),t.exports=n(8).Date.now},function(t,e,n){var r=n(13);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,e,n){n(150),t.exports=n(50).String.startsWith},function(t,e,n){"use strict";var r=n(151),i=n(162),o=n(164),s="".startsWith;r(r.P+r.F*n(170)("startsWith"),"String",{startsWith:function(t){var e=o(this,t,"startsWith"),n=i(Math.min(arguments.length>1?arguments[1]:void 0,e.length)),r=String(t);return s?s.call(e,r,n):e.slice(n,n+r.length)===r}})},function(t,e,n){var r=n(40),i=n(50),o=n(103),s=n(158),a=n(160),u=function(t,e,n){var c,l,f,h,p=t&u.F,d=t&u.G,m=t&u.S,v=t&u.P,g=t&u.B,b=d?r:m?r[e]||(r[e]={}):(r[e]||{}).prototype,y=d?i:i[e]||(i[e]={}),w=y.prototype||(y.prototype={});for(c in d&&(n=e),n)f=((l=!p&&b&&void 0!==b[c])?b:n)[c],h=g&&l?a(f,r):v&&"function"==typeof f?a(Function.call,f):f,b&&s(b,c,f,t&u.U),y[c]!=f&&o(y,c,h),v&&w[c]!=f&&(w[c]=f)};r.core=i,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e,n){var r=n(153),i=n(154),o=n(156),s=Object.defineProperty;e.f=n(76)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(51);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e,n){t.exports=!n(76)&&!n(104)(function(){return 7!=Object.defineProperty(n(155)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){var r=n(51),i=n(40).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){var r=n(51);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){var r=n(40),i=n(103),o=n(159),s=n(105)("src"),a=Function.toString,u=(""+a).split("toString");n(50).inspectSource=function(t){return a.call(t)},(t.exports=function(t,e,n,a){var c="function"==typeof n;c&&(o(n,"name")||i(n,"name",e)),t[e]!==n&&(c&&(o(n,s)||i(n,s,t[e]?""+t[e]:u.join(String(e)))),t===r?t[e]=n:a?t[e]?t[e]=n:i(t,e,n):(delete t[e],i(t,e,n)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[s]||a.call(this)})},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(161);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var r=n(163),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(165),i=n(169);t.exports=function(t,e,n){if(r(e))throw TypeError("String#"+n+" doesn't accept regex!");return String(i(t))}},function(t,e,n){var r=n(51),i=n(166),o=n(106)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){var r=n(50),i=n(40),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(168)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){t.exports=!1},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var r=n(106)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(n){try{return e[r]=!1,!"/./"[t](e)}catch(t){}}return!0}},function(t,e,n){n(107),n(108),n(111),n(177),n(188),n(189),t.exports=n(8).Promise},function(t,e,n){var r=n(71),i=n(45);t.exports=function(t){return function(e,n){var o,s,a=String(i(e)),u=r(n),c=a.length;return u<0||u>=c?t?"":void 0:(o=a.charCodeAt(u))<55296||o>56319||u+1===c||(s=a.charCodeAt(u+1))<56320||s>57343?t?a.charAt(u):o:t?a.slice(u,u+2):s-56320+(o-55296<<10)+65536}}},function(t,e,n){"use strict";var r=n(49),i=n(44),o=n(47),s={};n(29)(s,n(20)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=r(s,{next:i(1,n)}),o(t,e+" Iterator")}},function(t,e,n){"use strict";var r=n(175),i=n(176),o=n(41),s=n(32);t.exports=n(109)(Array,"Array",function(t,e){this._t=s(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){"use strict";var r,i,o,s,a=n(39),u=n(12),c=n(37),l=n(112),f=n(13),h=n(23),p=n(33),d=n(178),m=n(179),v=n(113),g=n(114).set,b=n(183)(),y=n(77),w=n(116),x=n(184),C=n(117),E=u.TypeError,k=u.process,D=k&&k.versions,T=D&&D.v8||"",O=u.Promise,S="process"==l(k),_=function(){},A=i=y.f,N=!!function(){try{var t=O.resolve(1),e=(t.constructor={})[n(20)("species")]=function(t){t(_,_)};return(S||"function"==typeof PromiseRejectionEvent)&&t.then(_)instanceof e&&0!==T.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(t){}}(),j=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},L=function(t,e){if(!t._n){t._n=!0;var n=t._c;b(function(){for(var r=t._v,i=1==t._s,o=0,s=function(e){var n,o,s,a=i?e.ok:e.fail,u=e.resolve,c=e.reject,l=e.domain;try{a?(i||(2==t._h&&M(t),t._h=1),!0===a?n=r:(l&&l.enter(),n=a(r),l&&(l.exit(),s=!0)),n===e.promise?c(E("Promise-chain cycle")):(o=j(n))?o.call(n,u,c):u(n)):c(r)}catch(t){l&&!s&&l.exit(),c(t)}};n.length>o;)s(n[o++]);t._c=[],t._n=!1,e&&!t._h&&P(t)})}},P=function(t){g.call(u,function(){var e,n,r,i=t._v,o=F(t);if(o&&(e=w(function(){S?k.emit("unhandledRejection",i,t):(n=u.onunhandledrejection)?n({promise:t,reason:i}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=S||F(t)?2:1),t._a=void 0,o&&e.e)throw e.v})},F=function(t){return 1!==t._h&&0===(t._a||t._c).length},M=function(t){g.call(u,function(){var e;S?k.emit("rejectionHandled",t):(e=u.onrejectionhandled)&&e({promise:t,reason:t._v})})},R=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),L(e,!0))},H=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw E("Promise can't be resolved itself");(e=j(t))?b(function(){var r={_w:n,_d:!1};try{e.call(t,c(H,r,1),c(R,r,1))}catch(t){R.call(r,t)}}):(n._v=t,n._s=1,L(n,!1))}catch(t){R.call({_w:n,_d:!1},t)}}};N||(O=function(t){d(this,O,"Promise","_h"),p(t),r.call(this);try{t(c(H,this,1),c(R,this,1))}catch(t){R.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(185)(O.prototype,{then:function(t,e){var n=A(v(this,O));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=S?k.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&L(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=c(H,t,1),this.reject=c(R,t,1)},y.f=A=function(t){return t===O||t===s?new o(t):i(t)}),f(f.G+f.W+f.F*!N,{Promise:O}),n(47)(O,"Promise"),n(186)("Promise"),s=n(8).Promise,f(f.S+f.F*!N,"Promise",{reject:function(t){var e=A(this);return(0,e.reject)(t),e.promise}}),f(f.S+f.F*(a||!N),"Promise",{resolve:function(t){return C(a&&this===s?O:this,t)}}),f(f.S+f.F*!(N&&n(187)(function(t){O.all(t).catch(_)})),"Promise",{all:function(t){var e=this,n=A(e),r=n.resolve,i=n.reject,o=w(function(){var n=[],o=0,s=1;m(t,!1,function(t){var a=o++,u=!1;n.push(void 0),s++,e.resolve(t).then(function(t){u||(u=!0,n[a]=t,--s||r(n))},i)}),--s||r(n)});return o.e&&i(o.v),n.promise},race:function(t){var e=this,n=A(e),r=n.reject,i=w(function(){m(t,!1,function(t){e.resolve(t).then(n.resolve,r)})});return i.e&&r(i.v),n.promise}})},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){var r=n(37),i=n(180),o=n(181),s=n(22),a=n(85),u=n(182),c={},l={};(e=t.exports=function(t,e,n,f,h){var p,d,m,v,g=h?function(){return t}:u(t),b=r(n,f,e?2:1),y=0;if("function"!=typeof g)throw TypeError(t+" is not iterable!");if(o(g)){for(p=a(t.length);p>y;y++)if((v=e?b(s(d=t[y])[0],d[1]):b(t[y]))===c||v===l)return v}else for(m=g.call(t);!(d=m.next()).done;)if((v=i(m,b,d.value,e))===c||v===l)return v}).BREAK=c,e.RETURN=l},function(t,e,n){var r=n(22);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},function(t,e,n){var r=n(41),i=n(20)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,e,n){var r=n(112),i=n(20)("iterator"),o=n(41);t.exports=n(8).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(12),i=n(114).set,o=r.MutationObserver||r.WebKitMutationObserver,s=r.process,a=r.Promise,u="process"==n(38)(s);t.exports=function(){var t,e,n,c=function(){var r,i;for(u&&(r=s.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(u)n=function(){s.nextTick(c)};else if(!o||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var l=a.resolve(void 0);n=function(){l.then(c)}}else n=function(){i.call(r,c)};else{var f=!0,h=document.createTextNode("");new o(c).observe(h,{characterData:!0}),n=function(){h.data=f=!f}}return function(r){var i={fn:r,next:void 0};e&&(e.next=i),t||(t=i,n()),e=i}}},function(t,e,n){var r=n(12).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){var r=n(29);t.exports=function(t,e,n){for(var i in e)n&&t[i]?t[i]=e[i]:r(t,i,e[i]);return t}},function(t,e,n){"use strict";var r=n(12),i=n(8),o=n(25),s=n(26),a=n(20)("species");t.exports=function(t){var e="function"==typeof i[t]?i[t]:r[t];s&&e&&!e[a]&&o.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r=n(20)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o=[7],s=o[r]();s.next=function(){return{done:n=!0}},o[r]=function(){return s},t(o)}catch(t){}return n}},function(t,e,n){"use strict";var r=n(13),i=n(8),o=n(12),s=n(113),a=n(117);r(r.P+r.R,"Promise",{finally:function(t){var e=s(this,i.Promise||o.Promise),n="function"==typeof t;return this.then(n?function(n){return a(e,t()).then(function(){return n})}:t,n?function(n){return a(e,t()).then(function(){throw n})}:t)}})},function(t,e,n){"use strict";var r=n(13),i=n(77),o=n(116);r(r.S,"Promise",{try:function(t){var e=i.f(this),n=o(t);return(n.e?e.reject:e.resolve)(n.v),e.promise}})},function(t,e,n){n(191),t.exports=n(8).parseFloat},function(t,e,n){var r=n(13),i=n(192);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(t,e,n){var r=n(12).parseFloat,i=n(102).trim;t.exports=1/r(n(75)+"-0")!=-1/0?function(t){var e=i(String(t),3),n=r(e);return 0===n&&"-"==e.charAt(0)?-0:n}:r},function(t,e,n){n(194),t.exports=n(8).Array.isArray},function(t,e,n){var r=n(13);r(r.S,"Array",{isArray:n(87)})},function(t,e,n){n(196);var r=n(8).Object;t.exports=function(t,e){return r.create(t,e)}},function(t,e,n){var r=n(13);r(r.S,"Object",{create:n(49)})},function(t,e,n){n(198),t.exports=9007199254740991},function(t,e,n){var r=n(13);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,n){var r=n(200),i=n(202);function o(t){return(o="function"==typeof i&&"symbol"==typeof r?function(t){return typeof t}:function(t){return t&&"function"==typeof i&&t.constructor===i&&t!==i.prototype?"symbol":typeof t})(t)}function s(e){return"function"==typeof i&&"symbol"===o(r)?t.exports=s=function(t){return o(t)}:t.exports=s=function(t){return t&&"function"==typeof i&&t.constructor===i&&t!==i.prototype?"symbol":o(t)},s(e)}t.exports=s},function(t,e,n){t.exports=n(201)},function(t,e,n){n(108),n(111),t.exports=n(69).f("iterator")},function(t,e,n){t.exports=n(203)},function(t,e,n){n(82),n(107),n(204),n(205),t.exports=n(8).Symbol},function(t,e,n){n(70)("asyncIterator")},function(t,e,n){n(70)("observable")},function(t,e,n){t.exports=n(207)},function(t,e,n){n(208),t.exports=n(8).Object.getPrototypeOf},function(t,e,n){var r=n(74),i=n(110);n(67)("getPrototypeOf",function(){return function(t){return i(r(t))}})},function(t,e,n){n(210),t.exports=n(8).Object.setPrototypeOf},function(t,e,n){var r=n(13);r(r.S,"Object",{setPrototypeOf:n(211).set})},function(t,e,n){var r=n(23),i=n(22),o=function(t,e){if(i(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(37)(Function.call,n(65).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return o(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:o}},function(t,e,n){var r=n(58);function i(e,n){return t.exports=i=r||function(t,e){return t.__proto__=e,t},i(e,n)}t.exports=i},function(t,e,n){n(214),t.exports=n(8).Reflect.construct},function(t,e,n){var r=n(13),i=n(49),o=n(33),s=n(22),a=n(23),u=n(30),c=n(215),l=(n(12).Reflect||{}).construct,f=u(function(){function t(){}return!(l(function(){},[],t)instanceof t)}),h=!u(function(){l(function(){})});r(r.S+r.F*(f||h),"Reflect",{construct:function(t,e){o(t),s(e);var n=arguments.length<3?t:o(arguments[2]);if(h&&!f)return l(t,e,n);if(t==n){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var r=[null];return r.push.apply(r,e),new(c.apply(t,r))}var u=n.prototype,p=i(a(u)?u:Object.prototype),d=Function.apply.call(t,p,e);return a(d)?d:p}})},function(t,e,n){"use strict";var r=n(33),i=n(23),o=n(115),s=[].slice,a={};t.exports=Function.bind||function(t){var e=r(this),n=s.call(arguments,1),u=function(){var r=n.concat(s.call(arguments));return this instanceof u?function(t,e,n){if(!(e in a)){for(var r=[],i=0;i<e;i++)r[i]="a["+i+"]";a[e]=Function("F,a","return new F("+r.join(",")+")")}return a[e](t,n)}(e,r.length,r):o(e,r,t)};return i(e.prototype)&&(u.prototype=e.prototype),u}},function(t,e,n){var r=n(8),i=r.JSON||(r.JSON={stringify:JSON.stringify});t.exports=function(t){return i.stringify.apply(i,arguments)}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function s(...t){if(!s.enabled)return;const e=s,i=Number(new Date),o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;a++;const o=r.formatters[i];if("function"==typeof o){const r=t[a];n=o.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return s.namespace=t,s.enabled=r.enabled(t),s.useColors=r.useColors(),s.color=e(t),s.destroy=i,s.extend=o,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function o(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function s(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){const t=[...r.names.map(s),...r.skips.map(s).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(101),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"NAME",function(){return E}),n.d(r,"VERSION",function(){return k}),n.d(r,"DATA_KEY",function(){return D}),n.d(r,"EVENT_KEY",function(){return T}),n.d(r,"DATA_API_KEY",function(){return O}),n.d(r,"ESCAPE_KEYCODE",function(){return S}),n.d(r,"SPACE_KEYCODE",function(){return _}),n.d(r,"TAB_KEYCODE",function(){return A}),n.d(r,"ARROW_UP_KEYCODE",function(){return N}),n.d(r,"ARROW_DOWN_KEYCODE",function(){return j}),n.d(r,"RIGHT_MOUSE_BUTTON_WHICH",function(){return L}),n.d(r,"REGEXP_KEYDOWN",function(){return P}),n.d(r,"EVENT",function(){return F}),n.d(r,"CLASSNAME",function(){return M}),n.d(r,"SELECTOR",function(){return R}),n.d(r,"ATTACHMENTMAP",function(){return H}),n.d(r,"DEFAULT",function(){return I}),n.d(r,"DEFAULTTYPE",function(){return $}),n.d(r,"DropdownService",function(){return U}),n.d(r,"Utils",function(){return C});var i={};n.r(i),n.d(i,"TabsComponent",function(){return tt}),n.d(i,"DropdownComponent",function(){return et}),n.d(i,"NavbarComponent",function(){return nt});var o=n(5),s=n.n(o),a=n(0),u=n.n(a),c=n(1),l=n(126),f=n(42),h=n.n(f),p=n(4),d=n.n(p),m=n(43),v=n(15),g=n.n(v),b=n(16),y=n.n(b),w=n(17),x=n.n(w);let C=function(t){function e(){return s()(this,e),g()(this,y()(e).apply(this,arguments))}return x()(e,t),d()(e,null,[{key:"toType",value:function(t){const e={}.toString.call(t).match(/\s([a-z]+)/i);return e?e[1].toLowerCase():null}},{key:"isElement",value:function(t){return(t[0]||t).nodeType}},{key:"typeCheckConfig",value:function(t,n,r){for(const i in r)if(Object.prototype.hasOwnProperty.call(r,i)){const o=r[i],s=n[i],a=s&&e.isElement(s)?"element":e.toType(s);if(!a||!new RegExp(o).test(a))throw new Error(`${t.toUpperCase()}: `+`Option "${i}" provided type "${a}" `+`but expected type "${o}".`)}}}]),e}(c.Utils);const E="dropdown",k="4.1.3",D="bs.dropdown",T=`.${D}`,O=".data-api",S=27,_=32,A=9,N=38,j=40,L=3,P=new RegExp(`${N}|${j}|${S}`),F={HIDE:`hide${T}`,HIDDEN:`hidden${T}`,SHOW:`show${T}`,SHOWN:`shown${T}`,CLICK:`click${T}`,CLICK_DATA_API:`click${T}${O}`,KEYDOWN_DATA_API:`keydown${T}${O}`,KEYUP_DATA_API:`keyup${T}${O}`},M={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},R={DATA_TOGGLE:"bs4-dropdown .dropdown-toggle",FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"},H={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},I={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},$={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"};let U=function(){function t(e,n){s()(this,t),u()(this,"_element",void 0),u()(this,"_popper",void 0),u()(this,"_config",void 0),u()(this,"_menu",void 0),u()(this,"_inNavbar",void 0),u()(this,"debug",Object(c.Debug)("service:DropdownService")),this._element=e,this._popper=null,this._config=this._getConfig(n),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),Object(c.JQuery)(this._element).data(D,this._config),this.clouseOnClickOutsite(t._getParentFromElement(this._element))}return d()(t,null,[{key:"closeAll",value:function(){Object(c.JQuery)(".dropdown-menu.show").each((t,e)=>{const n=Object(c.JQuery)(e),r=n.closest("dropdown-menu.show");this.close(n[0],n,r)})}},{key:"close",value:function(e,n,r){const i={relatedTarget:e},o=t._getParentFromElement(e);n&&n.hasClass(M.SHOW)&&n.removeClass(M.SHOW),r&&r.hasClass(M.SHOW)&&r.removeClass(M.SHOW).removeClass(M.SHOW).trigger(c.JQuery.Event(F.HIDDEN,i)),o.hasClass(M.SHOW)&&o.removeClass(M.SHOW).trigger(c.JQuery.Event(F.HIDDEN,i))}},{key:"_clearMenus",value:function(e){if(e&&(e.which===L||"keyup"===e.type&&e.which!==A))return;const n=[].slice.call(Object(c.JQuery)(R.DATA_TOGGLE).get());Object(c.JQuery)(R.DATA_TOGGLE).each((r,i)=>{const o=t._getParentFromElement(i),s=Object(c.JQuery)(n[r]).data(D),a={relatedTarget:n[r]};if(e&&"click"===e.type&&(a.clickEvent=e),!s)return;const u=o.find(R.MENU);if(!Object(c.JQuery)(o).hasClass(M.SHOW))return;if(e&&("click"===e.type&&/input|textarea/i.test(e.target.tagName)||"keyup"===e.type&&e.which===A)&&c.JQuery.contains(o.get(0),e.target))return;const l=c.JQuery.Event(F.HIDE,a);Object(c.JQuery)(o).trigger(l),l.isDefaultPrevented()||(document.documentElement&&"ontouchstart"in document.documentElement&&Object(c.JQuery)(document.body).children().off("mouseover","null",c.JQuery.noop),n[r].setAttribute("aria-expanded","false"),u.removeClass(M.SHOW),o.removeClass(M.SHOW).trigger(c.JQuery.Event(F.HIDDEN,a)))})}},{key:"_getParentFromElement",value:function(t){return Object(c.JQuery)(t).parent()}},{key:"VERSION",get:function(){return k}},{key:"Default",get:function(){return I}},{key:"DefaultType",get:function(){return $}}]),d()(t,[{key:"close",value:function(){return this.debug("close"),t.close(this._element,Object(c.JQuery)(this._menu))}},{key:"show",value:function(){this.debug("show");const e={relatedTarget:this._element},n=t._getParentFromElement(this._element);Object(c.JQuery)(this._menu).hasClass(M.SHOW)||Object(c.JQuery)(this._menu).addClass(M.SHOW),n.hasClass(M.SHOW)||n.addClass(M.SHOW).trigger(c.JQuery.Event(F.SHOWN,e))}},{key:"toggle",value:function(){if(this._element.disabled||Object(c.JQuery)(this._element).hasClass(M.DISABLED))return;this.debug("toggle");const e=t._getParentFromElement(this._element),n=Object(c.JQuery)(this._menu).hasClass(M.SHOW);if(t._clearMenus(),n)return void this.close();const r={relatedTarget:this._element},i=c.JQuery.Event(F.SHOW,r);if(Object(c.JQuery)(e).trigger(i),!i.isDefaultPrevented()){if(this.clouseOnClickOutsite(t._getParentFromElement(this._element)),!this._inNavbar){if(void 0===m.a)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");let t=this._element;"parent"===this._config.reference?t=e.get(0):C.isElement(this._config.reference)&&(t=this._config.reference,void 0!==this._config.reference.jquery&&(t=this._config.reference[0])),"scrollParent"!==this._config.boundary&&Object(c.JQuery)(e).addClass(M.POSITION_STATIC),this._popper=new m.a(t,this._menu,this._getPopperConfig())}document.documentElement&&"ontouchstart"in document.documentElement&&0===Object(c.JQuery)(e).closest(R.NAVBAR_NAV).length&&Object(c.JQuery)(document.body).children().on("mouseover",null,c.JQuery.noop),this.clouseOnClickOutsite(t._getParentFromElement(this._element)),this._element.focus(),this._element.setAttribute("aria-expanded","true"),Object(c.JQuery)(this._menu).toggleClass(M.SHOW),Object(c.JQuery)(e).toggleClass(M.SHOW).trigger(c.JQuery.Event(F.SHOWN,r))}}},{key:"dispose",value:function(){c.JQuery.removeData(this._element,D),Object(c.JQuery)(this._element).off(T),delete this._element,delete this._menu,null!==this._popper&&(this._popper.destroy(),this._popper=null)}},{key:"update",value:function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()}},{key:"clouseOnClickOutsite",value:function(t){const e=e=>{Object(c.JQuery)(e.target).closest(t.get(0)).length||(this.close(),n())},n=()=>{document.removeEventListener("click",e)};document.addEventListener("click",e)}},{key:"_getConfig",value:function(e){return e=h()({},t.Default,Object(c.JQuery)(this._element).data(),e),C.typeCheckConfig(E,e,t.DefaultType),e}},{key:"_getMenuElement",value:function(){if(!this._menu){const e=t._getParentFromElement(this._element);e&&(this._menu=e.find(R.MENU).get(0))}return this._menu}},{key:"_getPlacement",value:function(){const t=Object(c.JQuery)(this._element.parentNode);let e=H.BOTTOM;return t.hasClass(M.DROPUP)?(e=H.TOP,Object(c.JQuery)(this._menu).hasClass(M.MENURIGHT)&&(e=H.TOPEND)):t.hasClass(M.DROPRIGHT)?e=H.RIGHT:t.hasClass(M.DROPLEFT)?e=H.LEFT:Object(c.JQuery)(this._menu).hasClass(M.MENURIGHT)&&(e=H.BOTTOMEND),e}},{key:"_detectNavbar",value:function(){return Object(c.JQuery)(this._element).closest(".navbar").length>0}},{key:"_getPopperConfig",value:function(){const t={};"function"==typeof this._config.offset?t.fn=(t=>(t.offsets=h()({},t.offsets,this._config.offset(t.offsets)||{}),t)):t.offset=this._config.offset;const e={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),e}}]),t}(),B=function(){function t(e){s()(this,t),u()(this,"$target",void 0),this.$target=e}return d()(t,[{key:"show",value:function(){this.$target.removeClass(t.CLASSNAME.COLLAPSE).addClass(t.CLASSNAME.SHOW).trigger(t.EVENT.SHOWN)}},{key:"hide",value:function(){this.$target.removeClass(t.CLASSNAME.SHOW).addClass(t.CLASSNAME.COLLAPSE).trigger(t.EVENT.HIDDEN)}},{key:"isExpanded",value:function(){return this.$target.hasClass(t.CLASSNAME.SHOW)}},{key:"isCollapsed",value:function(){return!this.isExpanded()}},{key:"toggle",value:function(){this.isCollapsed()?this.show():this.hide()}}]),t}();u()(B,"DATA_KEY","bs.collapse"),u()(B,"EVENT_KEY",`.${B.DATA_KEY}`),u()(B,"DATA_API_KEY",".data-api"),u()(B,"EVENT",{SHOW:`show${B.EVENT_KEY}`,SHOWN:`shown${B.EVENT_KEY}`,HIDE:`hide${B.EVENT_KEY}`,HIDDEN:`hidden${B.EVENT_KEY}`,CLICK_DATA_API:`click${B.EVENT_KEY}${B.DATA_API_KEY}`}),u()(B,"CLASSNAME",{SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"});var q=n(127);const W=n.n(q)()("binder:rv-bs4-tooltip"),J={},V={binder:(t,e)=>{const n=Object(c.JQuery)(t),r=new B(n),i=new c.EventDispatcher("main");i.on("newPageReady",()=>(t=>!(!t||!C.onRoute(t)||(r.hide(),0)))(e))},name:"bs4-collapse-on-url"},Q={binder:(t,e)=>{const n=Object(c.JQuery)(t),r=Object(c.JQuery)(e),i=new B(r),o=()=>{i.isCollapsed()?n.addClass(B.CLASSNAME.COLLAPSED).attr("aria-expanded","false"):n.removeClass(B.CLASSNAME.COLLAPSED).attr("aria-expanded","true")};r.on(B.EVENT.SHOWN,o),r.on(B.EVENT.HIDDEN,o),n.on("click",t=>{t.preventDefault(),i.toggle()}),o()},name:"bs4-collapse"},Y={binder:(t,e)=>{const n=Object(c.JQuery)(t);let r;(r=n.hasClass("dropdown-toggle")?n:n.find(".dropdown-toggle"))||(r=n);const i=new U(r[0]);r.on("click",t=>{i.toggle()})},name:"bs4-dropdown"},X={binder:(t,e)=>{const n=Object(c.JQuery)(t),r=new B(n),i=new c.EventDispatcher("main"),o=t=>t&&C.onRoute(t)?(r.show(),!0):(r.hide(),!1);i.on("newPageReady",()=>o(e)),o(e)},name:"bs4-expan-on-url"},G={binder:function(t,e){const n=Object(c.JQuery)(t),r=e.replace("#","");let i=document.getElementById(r),o=null;i&&(o=Object(c.JQuery)(i));const s=this.args[0],a=()=>{(i=document.getElementById(r))&&(o=Object(c.JQuery)(r),(t=>{if(!t)return!1;const e=t.getBoundingClientRect();return e.top+e.height>=0&&e.bottom-e.height<=0})(i)?(n.addClass(s),n.is(":radio")&&n.prop("checked",!0)):(n.removeClass(s),n.is(":radio")&&n.prop("checked",!1)))};Object(c.JQuery)(window).off("scroll",a).on("scroll",a),a()},name:"bs4-scrollspy-*"},z={binder:{block:!1,bind(t){this.customData.$tip=Object(c.JQuery)('<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>'),this.customData.show=(()=>{this.customData.popper=new m.a(t,this.customData.$tip[0],{placement:"top",modifiers:{offset:{offset:0},flip:{behavior:"flip"},arrow:{element:".arrow"},preventOverflow:{boundariesElement:"scrollParent"}},onCreate:t=>{W("onCreate")},onUpdate:t=>{W("onUpdate")}}),this.customData.$tip.appendTo(document.body),this.customData.$tip.addClass("show"),this.customData.$tip.addClass("bs-tooltip-top")}),this.customData.hide=(()=>{this.customData.$tip.removeClass("show"),this.customData.popper&&this.customData.popper.destroy()}),t.addEventListener("mouseenter",this.customData.show),t.addEventListener("mouseleave",this.customData.hide)},routine(t,e){W("TODO routine"),this.customData.$tip.find(".tooltip-inner").html(e)},unbind(){this.customData.hide(),this.el.removeEventListener("mouseenter",this.customData.show),this.el.removeEventListener("mouseleave",this.customData.hide)}},name:"bs4-tooltip"};J[V.name]=V.binder,J[Q.name]=Q.binder,J[Y.name]=Y.binder,J[X.name]=X.binder,J[G.name]=G.binder,J[z.name]=z.binder;var K=n(3),Z=n.n(K);let tt=function(t){function e(t){var n;s()(this,e),n=g()(this,y()(e).call(this,t)),u()(Z()(Z()(n)),"debug",Object(c.Debug)("component:bs4-tabs")),u()(Z()(Z()(n)),"scope",{}),u()(Z()(Z()(n)),"$el",void 0),u()(Z()(Z()(n)),"$tabs",void 0),u()(Z()(Z()(n)),"$tabPanes",void 0),u()(Z()(Z()(n)),"$scrollable",void 0),u()(Z()(Z()(n)),"tabsSameHeight",!0);const r=Z()(Z()(n));return n.$el=Object(c.JQuery)(n.el),n.$tabs=n.$el.find(".nav-link"),n.$tabPanes=n.$el.find(".tab-pane"),n.$scrollable=n.$el.find("[scrollable]"),n.debug("constructor",n.$el,n.$tabs,n.$tabPanes),n.$tabs.on("click",function(t){t.preventDefault();const e=Object(c.JQuery)(this);r.activate(e)}),n.$tabs.off("shown.bs.tab").on("shown.bs.tab",t=>{const e=Object(c.JQuery)(t.target);if(n.$scrollable.length){const t=e[0].getBoundingClientRect(),r=n.$scrollable.scrollLeft()||0+t.left;n.$scrollable.animate({scrollLeft:r},"slow")}}),n.activate(n.$tabs.first()),n.tabsSameHeight&&Object(c.JQuery)(window).on("resize",()=>{n.setHeight()}),n.init(e.observedAttributes),n}return x()(e,t),d()(e,null,[{key:"observedAttributes",get:function(){return[]}}]),d()(e,[{key:"setHeight",value:function(){let t=0;this.$tabPanes.each(function(){const e=Object(c.JQuery)(this);e.css("height","auto");const n=e.height()||0;n>t&&(t=n)}),this.$tabPanes.each(function(){Object(c.JQuery)(this).css("height",t+"px")})}},{key:"deactivateAll",value:function(){this.$tabs.each(function(){Object(c.JQuery)(this).removeClass("active")}),this.$tabPanes.each(function(){Object(c.JQuery)(this).removeClass("active show")})}},{key:"activate",value:function(t){const e=t.attr("href");if(this.debug("activate",e,this.$el.find(e||"")),e){const n=this.$el.find(e);this.deactivateAll(),n.addClass("active"),setTimeout(()=>{n.addClass("show"),t.addClass("active"),n.trigger("shown.bs.tab"),t.trigger("shown.bs.tab")},0)}}},{key:"afterBind",value:async function(){this.setHeight()}},{key:"template",value:function(){return null}}]),e}(c.RibaComponent);u()(tt,"tagName","bs4-tabs");let et=function(t){function e(t){var n;s()(this,e),n=g()(this,y()(e).call(this,t)),u()(Z()(Z()(n)),"debug",Object(c.Debug)("component:bs4-dropdown")),u()(Z()(Z()(n)),"scope",{toggle:n.toggle}),u()(Z()(Z()(n)),"dropdownService",void 0);Z()(Z()(n));const r=Object(c.JQuery)(n.el);return n.dropdownService=new U(r.find(".dropdown-toggle")[0]),n.init(e.observedAttributes),n}return x()(e,t),d()(e,null,[{key:"observedAttributes",get:function(){return[]}}]),d()(e,[{key:"toggle",value:function(t,e){return this.debug("toggle"),e.preventDefault(),e.stopPropagation(),this.dropdownService.toggle()}},{key:"template",value:function(){return null}}]),e}(c.RibaComponent);u()(et,"tagName","bs4-dropdown");let nt=function(t){function e(t){var n;s()(this,e),n=g()(this,y()(e).call(this,t)),u()(Z()(Z()(n)),"debug",Object(c.Debug)("component:bs4-navbar")),u()(Z()(Z()(n)),"scope",{toggle:n.toggle,isCollapsed:!0}),u()(Z()(Z()(n)),"collapseService",void 0);Z()(Z()(n));const r=Object(c.JQuery)(n.el),i=r.find(".navbar-collapse"),o=new c.EventDispatcher("main");n.collapseService=new B(i);const a=()=>{n.collapseService.isCollapsed()?r.addClass(B.CLASSNAME.COLLAPSED).attr("aria-expanded","false"):r.removeClass(B.CLASSNAME.COLLAPSED).attr("aria-expanded","true"),n.scope.isCollapsed=n.collapseService.isCollapsed()};return i.on(B.EVENT.SHOWN,a),i.on(B.EVENT.HIDDEN,a),o.on("newPageReady",()=>{n.collapseService.hide()}),a(),n.init(e.observedAttributes),n}return x()(e,t),d()(e,null,[{key:"observedAttributes",get:function(){return[]}}]),d()(e,[{key:"toggle",value:function(t,e){this.debug("toggle"),this.collapseService.toggle(),e.preventDefault(),e.stopPropagation()}},{key:"template",value:function(){return null}}]),e}(c.RibaComponent);u()(nt,"tagName","bs4-navbar");const rt={binders:J,services:r,components:i};n.d(e,"Main",function(){return it});let it=function t(){s()(this,t),u()(this,"view",void 0),u()(this,"debug",Object(c.Debug)("app:main")),u()(this,"riba",new c.Riba),u()(this,"model",{}),u()(this,"dispatcher",new c.EventDispatcher),this.debug("init the main application"),this.riba.module.regist(c.coreModule),this.riba.module.regist(l.routerModule),this.riba.module.regist(rt),Object(c.JQuery)(t=>{const e=Object(c.JQuery)("body")[0];this.debug("bind to",e),this.view=this.riba.bind(e,this.model)})};new it}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,