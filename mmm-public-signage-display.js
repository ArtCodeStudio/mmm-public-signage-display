!function(e){var t={};function r(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(i,o,function(t){return e[t]}.bind(null,o));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=r(1);Module.register("mmm-public-signage-display",{defaults:{},start(){Log.log(`[${this.name}] started`,MM),new i.SocketService(MM,Log,this).initNotificationForwarding()},getTemplate(){return Log.log(`[${this.name}] getTemplate`),""}})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.SocketService=class{constructor(e,t,r){this.magicMirrorHelper=e,this.magicMirrorLogger=t,this.magicMirrorModule=r,this.socketModule=io("/mmm-public-signage-display")}initNotificationForwarding(){this.socketModule.on("*",(e,t)=>{this.magicMirrorLogger.log(`[${this.magicMirrorModule.name}] * notification`,e,t),this.magicMirrorHelper.sendNotification(e,t,this.magicMirrorModule)})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,