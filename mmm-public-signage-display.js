!function(e){var t={};function o(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)o.d(n,i,function(t){return e[t]}.bind(null,i));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Module.register("mmm-public-signage-display",{defaults:{text:"Hello World!"},start(){Log.log(`[${this.name}] started`,MM);const e=io("http://localhost:8080");e.on("connection",e=>{Log.log(`[${this.name}] socketGlobal connection`)}),e.on("SHOW_ALERT",e=>{Log.log(`[${this.name}] global SHOW_ALERT`,e)}),e.on("notification",(e,t)=>{Log.log(`[${this.name}] global notification`,e,t)});io("/mmm-public-signage-display");e.on("connection",e=>{Log.log(`[${this.name}] socketModule connection`)}),e.on("SHOW_ALERT",e=>{Log.log(`[${this.name}] module SHOW_ALERT`,e)}),e.on("notification",(e,t)=>{Log.log(`[${this.name}] module notification`,e,t)})},getTemplate(){return Log.log(`[${this.name}] getTemplate`),"<div>Hello {{text | safe}}</div>"},getTemplateData(){return Log.log(`[${this.name}] getTemplateData`),this.config}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,